!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	ThinkPHP/Common/common.php	/^function A($name,$layer='',$common=false) {$/;"	f
ACTION_ALIAS	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                    define('ACTION_ALIAS',strtolower($action));$/;"	d
ACTION_NAME	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('ACTION_NAME',self::getAction(C('VAR_ACTION')));$/;"	d
APP_DEBUG	ThinkPHP/ThinkPHP.php	/^defined('APP_DEBUG') 	or define('APP_DEBUG',false); \/\/ 是否调试模式$/;"	d
APP_NAME	Runtime/~runtime.php	/^<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_NAME') or define('APP_NAME','Webim'); defined('APP_PATH') or define('APP_PATH','.\/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/'); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('RUNTIME_PATH') or define('RUNTIME_PATH','.\/Runtime\/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','.\/Runtime\/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','\/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/'); defined('EXTEND_PATH') or define('EXTEND_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/'); defined('MODE_PATH') or define('MODE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Mode\/'); defined('ENGINE_PATH') or define('ENGINE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Engine\/'); defined('VENDOR_PATH') or define('VENDOR_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Vendor\/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Library\/'); defined('COMMON_PATH') or define('COMMON_PATH','.\/Common\/'); defined('LIB_PATH') or define('LIB_PATH','.\/Lib\/'); defined('CONF_PATH') or define('CONF_PATH','.\/Conf\/'); defined('LANG_PATH') or define('LANG_PATH','.\/Lang\/'); defined('TMPL_PATH') or define('TMPL_PATH','.\/Tpl\/'); defined('HTML_PATH') or define('HTML_PATH','.\/Html\/'); defined('LOG_PATH') or define('LOG_PATH','.\/Runtime\/Logs\/'); defined('TEMP_PATH') or define('TEMP_PATH','.\/Runtime\/Temp\/'); defined('DATA_PATH') or define('DATA_PATH','.\/Runtime\/Data\/'); defined('CACHE_PATH') or define('CACHE_PATH','.\/Runtime\/Cache\/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template='',$layer=''){ if(is_file($template)) { return $template; } if(false === strpos($template,':\/\/')){ $template = APP_NAME.':\/\/'.str_replace(':', '\/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $group = isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':''); $app = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); if(($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])){ $baseUrl = $list[$app].'\/'.$group.$layer.'\/'; }elseif(1==C('APP_GROUP_MODE')){ $baseUrl = dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/'; }else{ $baseUrl = TMPL_PATH.$group; } if('' == $file) { $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($file, '\/')){ $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file; } return $baseUrl.$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; default: return NULL; } if(C('VAR_FILTERS')) { $_filters = explode(',',C('VAR_FILTERS')); foreach($_filters as $_filter){ array_walk_recursive($input,$_filter); } } if(empty($name)) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $data = array_map($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])\/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("\/_([a-zA-Z])\/e", "strtoupper('\\\\1')", $name)); } else { return strtolower(trim(preg_replace("\/[A-Z]\/", "_\\\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array,$return=false){ foreach ($array as $file){ if (require_cache($file) && $return) return true; } if($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('\/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '\/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('\/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1); }elseif ('think' == strtolower($class_strut[0])){ $baseUrl = CORE_PATH; $class = substr($class,6); }elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; }else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('\/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@\/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if (is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); }elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } }elseif (is_array($alias)) { $_alias = array_merge($_alias,$alias); return; } return false; } function D($name='',$layer='') { if(empty($name)) return new Model; static $_model = array(); $layer = $layer?$layer:C('DEFAULT_M_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = C('DEFAULT_APP'); $name = $app.'\/'.$layer.'\/'.$name; } if(isset($_model[$name])) return $_model[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class)) { $model = new $class(basename($name)); }else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function A($name,$layer='',$common=false) { static $_action = array(); $layer = $layer?$layer:C('DEFAULT_C_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = '@'; $name = '@\/'.$layer.'\/'.$name; } if(isset($_action[$name])) return $_action[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif($common) { import(str_replace('@\/','',$name).$layer,LIB_PATH); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class,false)) { $action = new $class(); $_action[$name] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) { if(!empty($value) && $array = S('c_'.$value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name)); if(!empty($value)) { S('c_'.$value,$_config); } return; } return null; } function tag($tag, &$params=NULL) { $extends = C('extends.' . $tag); $tags = C('tags.' . $tag); if (!empty($tags)) { if(empty($tags['_overlay']) && !empty($extends)) { $tags = array_unique(array_merge($extends,$tags)); }elseif(isset($tags['_overlay'])){ unset($tags['_overlay']); } }elseif(!empty($extends)) { $tags = $extends; } if($tags) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach ($tags as $key=>$name) { if(!is_int($key)) { $name = $key; } B($name, $params); } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } }else{ return false; } } function add_tag_behavior($tag,$behavior,$path='') { $array = C('tags.'.$tag); if(!$array) { $array = array(); } if($path) { $array[$behavior] = $path; }else{ $array[] = $behavior; } C('tags.'.$tag,$array); } function B($name, &$params=NULL) { if(strpos($name,'\/')){ list($name,$method) = explode('\/',$name); }else{ $method = 'run'; } $class = $name.'Behavior'; if(APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if(APP_DEBUG) { G('behaviorEnd'); trace($name.' Behavior ::'.$method.' [ RunTime:'.G('behaviorStart','behaviorEnd',6).'s ]','','INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); if('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if(!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info,$level,$record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think','fatalError')); set_error_handler(array('Think','appError')); set_exception_handler(array('Think','appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return ; } public static function autoload($class) { if(alias_import($class)) return ; $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':''; $file = $class.'.class.php'; if(substr($class,-8)=='Behavior') { if(require_array(array( CORE_PATH.'Behavior\/'.$file, EXTEND_PATH.'Behavior\/'.$file, LIB_PATH.'Behavior\/'.$file, $libPath.'Behavior\/'.$file),true) || (defined('MODE_NAME') && require_cache(MODE_PATH.ucwords(MODE_NAME).'\/Behavior\/'.$file))) { return ; } }elseif(substr($class,-5)=='Model'){ if(require_array(array( LIB_PATH.'Model\/'.$group.$file, $libPath.'Model\/'.$file, EXTEND_PATH.'Model\/'.$file),true)) { return ; } }elseif(substr($class,-6)=='Action'){ if(require_array(array( LIB_PATH.'Action\/'.$group.$file, $libPath.'Action\/'.$file, EXTEND_PATH.'Action\/'.$file),true)) { return ; } }elseif(substr($class,0,5)=='Cache'){ if(require_array(array( EXTEND_PATH.'Driver\/Cache\/'.$file, CORE_PATH.'Driver\/Cache\/'.$file),true)){ return ; } }elseif(substr($class,0,2)=='Db'){ if(require_array(array( EXTEND_PATH.'Driver\/Db\/'.$file, CORE_PATH.'Driver\/Db\/'.$file),true)){ return ; } }elseif(substr($class,0,8)=='Template'){ if(require_array(array( EXTEND_PATH.'Driver\/Template\/'.$file, CORE_PATH.'Driver\/Template\/'.$file),true)){ return ; } }elseif(substr($class,0,6)=='TagLib'){ if(require_array(array( EXTEND_PATH.'Driver\/TagLib\/'.$file, CORE_PATH.'Driver\/TagLib\/'.$file),true)) { return ; } } $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'.'.$class)) return ; } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('throw_exception'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'],Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { if(C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt')?halt($e):exit('ERROR:'.$e['message']); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); public function __construct() { if(!empty($this->options)) { foreach ($this->options as $name=>$val){ if(NULL !== C($name)) { $this->options[$name] = C($name); }else{ C($name,$val); } } array_change_key_case($this->options); } } public function __get($name){ return $this->options[strtolower($name)]; } abstract public function run(&$params); } class ReadHtmlCacheBehavior extends Behavior { protected $options = array( 'HTML_CACHE_ON' => false, 'HTML_CACHE_TIME' => 60, 'HTML_CACHE_RULES' => array(), 'HTML_FILE_SUFFIX' => '.html', ); public function run(&$params){ if(C('HTML_CACHE_ON')) { $cacheTime = $this->requireHtmlCache(); if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { readfile(HTML_FILE_NAME); exit(); } } } static private function requireHtmlCache() { $htmls = C('HTML_CACHE_RULES'); if(!empty($htmls)) { $htmls = array_change_key_case($htmls); $moduleName = strtolower(MODULE_NAME); $actionName = strtolower(ACTION_NAME); if(isset($htmls[$moduleName.':'.$actionName])) { $html = $htmls[$moduleName.':'.$actionName]; }elseif(isset($htmls[$moduleName.':'])){ $html = $htmls[$moduleName.':']; }elseif(isset($htmls[$actionName])){ $html = $htmls[$actionName]; }elseif(isset($htmls['*'])){ $html = $htmls['*']; }elseif(isset($htmls['empty:index']) && !class_exists(MODULE_NAME.'Action')){ $html = $htmls['empty:index']; }elseif(isset($htmls[$moduleName.':_empty']) && $this->isEmptyAction(MODULE_NAME,ACTION_NAME)){ $html = $htmls[$moduleName.':_empty']; } if(!empty($html)) { $rule = $html[0]; $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule); $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule); $rule = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule); $rule = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule); $rule = str_ireplace( array('{:app}','{:module}','{:action}','{:group}'), array(APP_NAME,MODULE_NAME,ACTION_NAME,defined('GROUP_NAME')?GROUP_NAME:''), $rule); $rule = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule); if(!empty($html[2])) $rule = $html[2]($rule); $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX')); return $cacheTime; } } return false; } static public function checkHTMLCache($cacheFile='',$cacheTime='') { if(!is_file($cacheFile)){ return false; }elseif (filemtime(C('TEMPLATE_NAME')) > filemtime($cacheFile)) { return false; }elseif(!is_numeric($cacheTime) && function_exists($cacheTime)){ return $cacheTime($cacheFile); }elseif ($cacheTime != 0 && NOW_TIME > filemtime($cacheFile)+$cacheTime) { return false; } return true; } static private function isEmptyAction($module,$action) { $className = $module.'Action'; $class = new $className; return !method_exists($class,$action); } } class CheckRouteBehavior extends Behavior { protected $options = array( 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array(), ); public function run(&$return){ $regx = trim($_SERVER['PATH_INFO'],'\/'); if(empty($regx)) return $return = true; if(!C('URL_ROUTER_ON')) return $return = false; $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { $depr = C('URL_PATHINFO_DEPR'); $regx = str_replace($depr,'\/',$regx); foreach ($routes as $rule=>$route){ if(0===strpos($rule,'\/') && preg_match($rule,$regx,$matches)) { return $return = $this->parseRegex($matches,$route,$regx); }else{ $len1 = substr_count($regx,'\/'); $len2 = substr_count($rule,'\/'); if($len1>=$len2) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = $this->checkUrlMatch($regx,$rule); if($match) return $return = $this->parseRule($rule,$route,$regx); } } } } $return = false; } private function checkUrlMatch($regx,$rule) { $m1 = explode('\/',$regx); $m2 = explode('\/',$rule); $match = true; foreach ($m2 as $key=>$val){ if(':' == substr($val,0,1)) { if(strpos($val,'\\\\')) { $type = substr($val,-1); if('d'==$type && !is_numeric($m1[$key])) { $match = false; break; } }elseif(strpos($val,'^')){ $array = explode('|',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { $match = false; break; } } }elseif(0 !== strcasecmp($val,$m1[$key])){ $match = false; break; } } return $match; } private function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('\/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'\/')){ $path = explode('\/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_GROUP')] = array_pop($path); } } return $var; } private function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('\/',$regx); $matches = array(); $rule = explode('\/',$rule); foreach ($rule as $item){ if(0===strpos($item,':')) { if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if($paths) { preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url); if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace('@(\\w+)\\\/([^,\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', $regx); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } } class ParseTemplateBehavior extends Behavior { protected $options = array( 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', ); public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { extract($_data['var'], EXTR_OVERWRITE); include C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'); }else{ $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ $class = 'Template'.ucwords($engine); if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { throw_exception(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > filemtime($tmplCacheFile)) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(is_file(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } } class ContentReplaceBehavior extends Behavior { protected $options = array( 'TMPL_PARSE_STRING' => array(), ); public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '..\/Public' => APP_TMPL_PATH.'Public', '__PUBLIC__' => __ROOT__.'\/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } } class TokenBuildBehavior extends Behavior { protected $options = array( 'TOKEN_ON' => false, 'TOKEN_NAME' => '__hash__', 'TOKEN_TYPE' => 'md5', 'TOKEN_RESET' => true, ); public function run(&$content){ if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $content = str_replace('{__TOKEN__}',$this->buildToken(),$content); }elseif(preg_match('\/<\\\/form(\\s*)>\/is',$content,$match)) { $content = str_replace($match[0],$this->buildToken().$match[0],$content); } }else{ $content = str_replace('{__TOKEN__}','',$content); } } private function buildToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5($_SERVER['REQUEST_URI']); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>'; return $token; } } class WriteHtmlCacheBehavior extends Behavior { public function run(&$content){ if(C('HTML_CACHE_ON') && defined('HTML_FILE_NAME')) { if(!is_dir(dirname(HTML_FILE_NAME))) mkdir(dirname(HTML_FILE_NAME),0755,true); if( false === file_put_contents( HTML_FILE_NAME , $content )) throw_exception(L('_CACHE_WRITE_ERROR_').':'.HTML_FILE_NAME); } } } class ShowRuntimeBehavior extends Behavior { protected $options = array( 'SHOW_RUN_TIME' => false, 'SHOW_ADV_TIME' => false, 'SHOW_DB_TIMES' => false, 'SHOW_CACHE_TIMES' => false, 'SHOW_USE_MEM' => false, 'SHOW_LOAD_FILE' => false, 'SHOW_FUN_TIMES' => false , ); public function run(&$content){ if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024).' kb'; } if(C('SHOW_LOAD_FILE')) { $showTime .= ' | LoadFile:'.count(get_included_files()); } if(C('SHOW_FUN_TIMES')) { $fun = get_defined_functions(); $showTime .= ' | CallFun:'.count($fun['user']).','.count($fun['internal']); } return $showTime; } } class ShowPageTraceBehavior extends Behavior { protected $options = array( 'SHOW_PAGE_TRACE' => false, 'TRACE_PAGE_TABS' => array('BASE'=>'基本','FILE'=>'文件','INFO'=>'流程','ERR|NOTIC'=>'错误','SQL'=>'SQL','DEBUG'=>'调试'), 'PAGE_TRACE_SAVE' => false, ); public function run(&$params){ if(!IS_AJAX && C('SHOW_PAGE_TRACE')) { echo $this->showTrace(); } } private function showTrace() { $files = get_included_files(); $info = array(); foreach ($files as $key=>$file){ $info[] = $file.' ( '.number_format(filesize($file)\/1024,2).' KB )'; } $trace = array(); $base = array( '请求信息' => date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']).' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_METHOD'].' : '.__SELF__, '运行时间' => $this->showTime(), '吞吐率' => number_format(1\/G('beginTime','viewEndTime'),2).'req\/s', '内存开销' => MEMORY_LIMIT_ON?number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024,2).' kb':'不支持', '查询信息' => N('db_query').' queries '.N('db_write').' writes ', '文件加载' => count(get_included_files()), '缓存信息' => N('cache_read').' gets '.N('cache_write').' writes ', '配置加载' => count(c()), '会话信息' => 'SESSION_ID='.session_id(), ); $traceFile = CONF_PATH.'trace.php'; if(is_file($traceFile)) { $base = array_merge($base,include $traceFile); } $debug = trace(); $tabs = C('TRACE_PAGE_TABS'); foreach ($tabs as $name=>$title){ switch(strtoupper($name)) { case 'BASE': $trace[$title] = $base; break; case 'FILE': $trace[$title] = $info; break; default: $name = strtoupper($name); if(strpos($name,'|')) { $array = explode('|',$name); $result = array(); foreach($array as $name){ $result += isset($debug[$name])?$debug[$name]:array(); } $trace[$title] = $result; }else{ $trace[$title] = isset($debug[$name])?$debug[$name]:''; } } } if($save = C('PAGE_TRACE_SAVE')) { if(is_array($save)) { $tabs = C('TRACE_PAGE_TABS'); $array = array(); foreach ($save as $tab){ $array[] = $tabs[$tab]; } } $content = date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n"; foreach ($trace as $key=>$val){ if(!isset($array) || in_array($key,$array)) { $content .= '[ '.$key." ]\\r\\n"; if(is_array($val)) { foreach ($val as $k=>$v){ $content .= (!is_numeric($k)?$k.':':'').print_r($v,true)."\\r\\n"; } }else{ $content .= print_r($val,true)."\\r\\n"; } $content .= "\\r\\n"; } } error_log(str_replace('<br\/>',"\\r\\n",$content), Log::FILE,LOG_PATH.date('y_m_d').'_trace.log'); } unset($files,$info,$base); ob_start(); include C('TMPL_TRACE_FILE')?C('TMPL_TRACE_FILE'):THINK_PATH.'Tpl\/page_trace.tpl'; return ob_get_clean(); } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); return G('beginTime','viewEndTime').'s ( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } }alias_import(array ( 'Model' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Model.class.php', 'Db' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Db.class.php', 'Log' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Log.class.php', 'ThinkTemplate' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/ThinkTemplate.class.php', 'TagLib' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/TagLib.class.php', 'Cache' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Cache.class.php', 'Widget' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Widget.class.php', 'TagLibCx' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Driver\/TagLib\/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type='ThinkException', $code=0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _404($msg='',$url='') { APP_DEBUG && throw_exception($msg); if($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if(empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if($url) { redirect($url); }else{ send_http_status(404); exit; } } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if(false === strpos($key,'*') && 0=== strpos($url,$rule[0])) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule[0])); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); if($url) { if(0=== strpos($url,'\/')) { $route = true; $url = substr($url,1); if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } }else{ if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $var[C('VAR_ACTION')] = !empty($path)?array_pop($path):ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path)?array_pop($path):MODULE_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if($action = array_search(strtolower($var[C('VAR_ACTION')]),$maps)){ $var[C('VAR_ACTION')] = $action; } } } if($maps = C('URL_MODULE_MAP')) { if($module = array_search(strtolower($var[C('VAR_MODULE')]),$maps)){ $var[C('VAR_MODULE')] = $module; } } if(C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if(!C('APP_SUB_DOMAIN_DEPLOY') && C('APP_GROUP_LIST')) { if(!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; }else{ if(GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')]= GROUP_NAME; } } if(C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.http_build_query(array_reverse($var)); if(!empty($vars)) { $vars = urldecode(http_build_query($vars)); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'\/'.rtrim($url,$depr); }else{ $url = __APP__.'\/'.implode($depr,array_reverse($var)); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '\/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url; } if($redirect) redirect($url); else return $url; } function W($name, $data=array(), $return=false,$path='') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget\/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter\/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\\n", "\\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function cache($name,$value='',$options=null){ return S($name,$value,$options); } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name,'*')?array_map("unlink", glob($filename)):unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir,0755,true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\\"{$value}\\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "<\/{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\\"{$key}\\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "<\/{$key}>"; } return $xml; } function session($name,$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $class = 'Session'. ucwords(strtolower(C('SESSION_TYPE'))); if(require_cache(EXTEND_PATH.'Driver\/Session\/'.$class.'.class.php')) { $hander = new $class(); $hander->execute(); }else { throw_exception(L('_CLASS_NOT_EXIST_').': ' . $class); } } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if(C('LOAD_EXT_FILE')) { $files = explode(',',C('LOAD_EXT_FILE')); foreach ($files as $file){ $file = COMMON_PATH.$file.'.php'; if(is_file($file)) include $file; } } if(C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = CONF_PATH.$config.'.php'; if(is_file($file)) { is_numeric($key)?C(include $file):C($key,include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP\/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\\r\\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n".implode('',self::$log)."\\r\\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\\r\\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if(isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '\/' || $url == '\\\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; }else{ $subDomain = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.'))); define('SUB_DOMAIN',$subDomain); if($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*'])){ if('www' != $subDomain && !in_array($subDomain,C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if(!empty($rule)) { $array = explode('\/',$rule[0]); $module = array_pop($array); if(!empty($module)) { $_GET[C('VAR_MODULE')] = $module; $domainModule = true; } if(!empty($array)) { $_GET[C('VAR_GROUP')] = array_pop($array); $domainGroup = true; } if(isset($rule[1])) { parse_str($rule[1],$parms); $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if(!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension'])?strtolower($part['extension']):''); if(__EXT__){ if(C('URL_DENY_SUFFIX') && preg_match('\/\\.('.trim(C('URL_DENY_SUFFIX'),'.').')$\/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } if(C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('\/\\.('.trim(C('URL_HTML_SUFFIX'),'.').')$\/i', '', $_SERVER['PATH_INFO']); }else{ $_SERVER['PATH_INFO'] = preg_replace('\/.'.__EXT__.'$\/i','',$_SERVER['PATH_INFO']); } } if(!self::routerCheck()){ $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/')); if(C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])){ $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]),explode(',',strtolower(C('APP_GROUP_LIST'))))? array_shift($paths) : ''; if(C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]),explode(',',strtolower(C('APP_GROUP_DENY'))))) { exit; } } if(!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[\\'\\\\1\\']=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); $_GET = array_merge($var,$_GET); } define('__INFO__',$_SERVER['PATH_INFO']); }else{ define('__INFO__',''); } define('__SELF__',strip_tags($_SERVER['REQUEST_URI'])); define('__APP__',strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH); if(defined('GROUP_NAME')) { C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'\/'); if(1 == C('APP_GROUP_MODE')){ $config_path = BASE_LIB_PATH.'Conf\/'; $common_path = BASE_LIB_PATH.'Common\/'; }else{ $config_path = CONF_PATH.GROUP_NAME.'\/'; $common_path = COMMON_PATH.GROUP_NAME.'\/'; } if(is_file($config_path.'config.php')) C(include $config_path.'config.php'); if(is_file($config_path.'alias.php')) alias_import(include $config_path.'alias.php'); if(is_file($config_path.'tags.php')) C('tags', include $config_path.'tags.php'); if(is_file($common_path.'function.php')) include $common_path.'function.php'; }else{ C('CACHE_PATH',CACHE_PATH); } define('MODULE_NAME',self::getModule(C('VAR_MODULE'))); define('ACTION_NAME',self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME; if(defined('GROUP_NAME')) { define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); }else{ define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static public function routerCheck() { $return = false; tag('route_check',$return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return $maps[MODULE_ALIAS]; }elseif(array_search(strtolower($module),$maps)){ return ''; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module,1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); return $maps[ACTION_ALIAS]; }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE')?strtolower($action):$action); } static private function getGroup($var) { $group = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ?ucfirst(strtolower($group)):$group); } } class App { static public function init() { if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if(C('VAR_FILTERS')) { $filters = explode(',',C('VAR_FILTERS')); foreach($filters as $filter){ array_walk_recursive($_POST,$filter); array_walk_recursive($_GET,$filter); } } C('LOG_PATH',realpath(LOG_PATH).'\/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('\/^[A-Za-z](\\w)*$\/',MODULE_NAME)){ $module = false; }else{ $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : ''; $module = A($group.MODULE_NAME); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == MODULE_NAME) { header("Content-type:image\/png"); exit(base64_decode(App::logo())); } if(function_exists('__hack_module')) { $module = __hack_module(); if(!is_object($module)) { return ; } }else{ $module = A($group.'Empty'); if(!$module){ _404(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } } } $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME; $action .= C('ACTION_SUFFIX'); try{ if(!preg_match('\/^[A-Za-z](\\w)*$\/',$action)){ throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if($method->isPublic()) { $class = new ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if(C('URL_PARAMS_BIND') && $method->getNumberOfParameters()>0){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param){ $name = $param->getName(); if(isset($vars[$name])) { $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ throw_exception(L('_PARAM_ERROR_').':'.$name); } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw\/eHBhY2tldCBiZWdpbj0i77u\/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw\/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk\/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7\/v\/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+\/OEQ4+obQn5D+4Ubb22+YOGsWi\/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9\/W4H3iNSQqIe09O196dLKX7d1O39OViP\/wthtkND62if\/wj\/DbMpph8BY\/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy\/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z\/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB\/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc\/AOuXiwH07VCS3w5+UQMAuF\/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5\/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8\/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR\/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5\/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v\/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ\/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh\/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE\/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC\/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm\/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr\/XKm0ZofKSI2Q\/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0\/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W\/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc\/i3jJSAwhgfFlp20laMLOku\/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi\/MubUA\/mCT4Fhf038PC8XplhWnCmnK\/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2\/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9\/y5i\/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0\/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk\/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p\/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru\/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl\/tFILYwGPjXWO3zOfSq\/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t\/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX\/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay\/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV\/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1\/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v\/8jG\/fZX\/IW5MKPKtjSYlt0ellxh+\/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL\/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5\/1H3gaNmMpn8Fz0GpYFp6Zw615H\/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc\/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn\/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C\/P\/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq\/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs\/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk\/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS\/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh\/eMDzHEzGYu0Lg8gJ7oS\/tFCwoic44fyUtix0n\/46vP4bf+\/\/BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application\/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text\/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application\/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text\/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } return $template; } $template = str_replace(':', '\/', $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '\/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($template, '\/')){ $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '\/':''; } } L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => false, 'app_autoload_path' => '', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => '', 'app_group_mode' => 0, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '\/', 'cookie_prefix' => '', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => '', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => '', 'db_prefix' => 'think_', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '.\/Runtime\/Temp\/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '页面错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => false, 'trace_exception' => false, 'log_record' => false, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text\/html', 'tmpl_action_error' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_action_success' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_exception_file' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_file_depr' => '\/', 'url_case_insensitive' => false, 'url_model' => 1, 'url_pathinfo_depr' => '\/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => 'html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'extends' => array ( 'app_init' => array ( ), 'app_begin' => array ( 0 => 'ReadHtmlCache', ), 'route_check' => array ( 0 => 'CheckRoute', ), 'app_end' => array ( ), 'path_info' => array ( ), 'action_begin' => array ( ), 'action_end' => array ( ), 'view_begin' => array ( ), 'view_parse' => array ( 0 => 'ParseTemplate', ), 'view_filter' => array ( 0 => 'ContentReplace', 1 => 'TokenBuild', 2 => 'WriteHtmlCache', 3 => 'ShowRuntime', ), 'view_end' => array ( 0 => 'ShowPageTrace', ), ), ));G('loadTime');Think::Start();/;"	d
APP_NAME	ThinkPHP/Common/runtime.php	/^defined('APP_NAME') or define('APP_NAME', basename(dirname($_SERVER['SCRIPT_FILENAME'])));$/;"	d
APP_NAME	index.php	/^define('APP_NAME', 'Webim');$/;"	d
APP_PATH	ThinkPHP/ThinkPHP.php	/^defined('APP_PATH') 	or define('APP_PATH', dirname($_SERVER['SCRIPT_FILENAME']).'\/');$/;"	d
APP_PATH	index.php	/^define('APP_PATH', '.\/');$/;"	d
APP_TMPL_PATH	ThinkPHP/Lib/Core/View.class.php	/^                define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme);$/;"	d
APP_TMPL_PATH	ThinkPHP/Lib/Core/View.class.php	/^                define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme);$/;"	d
APP_TMPL_PATH	ThinkPHP/Lib/Core/View.class.php	/^            define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme);$/;"	d
APP_TMPL_PATH	ThinkPHP/Lib/Core/View.class.php	/^            define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme);$/;"	d
Action	ThinkPHP/Lib/Core/Action.class.php	/^abstract class Action {$/;"	c
App	ThinkPHP/Lib/Core/App.class.php	/^class App {$/;"	c
B	ThinkPHP/Common/common.php	/^function B($name, &$params=NULL) {$/;"	f
BASE_LIB_PATH	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH);$/;"	d
Behavior	ThinkPHP/Lib/Core/Behavior.class.php	/^abstract class Behavior {$/;"	c
C	ThinkPHP/Common/common.php	/^function C($name=null, $value=null) {$/;"	f
CACHE_PATH	ThinkPHP/Common/runtime.php	/^defined('CACHE_PATH')   or define('CACHE_PATH',     RUNTIME_PATH.'Cache\/'); \/\/ 项目模板缓存目录$/;"	d
COMMON_PATH	ThinkPHP/Common/runtime.php	/^defined('COMMON_PATH')  or define('COMMON_PATH',    APP_PATH.'Common\/'); \/\/ 项目公共目录$/;"	d
CONF_PATH	ThinkPHP/Common/runtime.php	/^defined('CONF_PATH')    or define('CONF_PATH',      APP_PATH.'Conf\/'); \/\/ 项目配置目录$/;"	d
CORE_PATH	ThinkPHP/Common/runtime.php	/^defined('CORE_PATH')    or define('CORE_PATH',      THINK_PATH.'Lib\/'); \/\/ 系统核心类库目录$/;"	d
Cache	ThinkPHP/Lib/Core/Cache.class.php	/^class Cache {$/;"	c
CacheFile	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^class CacheFile extends Cache {$/;"	c
CheckRouteBehavior	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^class CheckRouteBehavior extends Behavior {$/;"	c
ContentReplaceBehavior	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^class ContentReplaceBehavior extends Behavior {$/;"	c
D	ThinkPHP/Common/common.php	/^function D($name='',$layer='') {$/;"	f
DATA_PATH	ThinkPHP/Common/runtime.php	/^defined('DATA_PATH')    or define('DATA_PATH',      RUNTIME_PATH.'Data\/'); \/\/ 项目数据目录$/;"	d
DIR_SECURE_CONTENT	ThinkPHP/Common/runtime.php	/^        defined('DIR_SECURE_CONTENT')   or define('DIR_SECURE_CONTENT',     ' ');$/;"	d
DIR_SECURE_FILENAME	ThinkPHP/Common/runtime.php	/^        defined('DIR_SECURE_FILENAME')  or define('DIR_SECURE_FILENAME',    'index.html');$/;"	d
Db	ThinkPHP/Lib/Core/Db.class.php	/^class Db {$/;"	c
DbMysql	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^class DbMysql extends Db{$/;"	c
DbMysqli	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^class DbMysqli extends Db{$/;"	c
Dispatcher	ThinkPHP/Lib/Core/Dispatcher.class.php	/^class Dispatcher {$/;"	c
ENGINE_PATH	ThinkPHP/Common/runtime.php	/^defined('ENGINE_PATH')  or define('ENGINE_PATH',    EXTEND_PATH.'Engine\/'); \/\/ 引擎扩展目录$/;"	d
ENGINE_PATH	ThinkPHP/ThinkPHP.php	/^    defined('ENGINE_PATH') or define('ENGINE_PATH',THINK_PATH.'Extend\/Engine\/');$/;"	d
EXTEND_PATH	ThinkPHP/Common/runtime.php	/^defined('EXTEND_PATH')  or define('EXTEND_PATH',    THINK_PATH.'Extend\/'); \/\/ 系统扩展目录$/;"	d
F	ThinkPHP/Common/functions.php	/^function F($name, $value='', $path=DATA_PATH) {$/;"	f
G	ThinkPHP/Common/common.php	/^function G($start,$end='',$dec=4) {$/;"	f
GROUP_NAME	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('GROUP_NAME', self::getGroup(C('VAR_GROUP')));$/;"	d
HTML_FILE_NAME	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX'));$/;"	d
HTML_PATH	ThinkPHP/Common/runtime.php	/^defined('HTML_PATH')    or define('HTML_PATH',      APP_PATH.'Html\/'); \/\/ 项目静态目录$/;"	d
I	ThinkPHP/Common/common.php	/^function I($name,$default='',$filter=null) {$/;"	f
IS_AJAX	ThinkPHP/Lib/Core/App.class.php	/^        define('IS_AJAX',       ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false);$/;"	d
IS_CGI	ThinkPHP/Common/runtime.php	/^define('IS_CGI',substr(PHP_SAPI, 0,3)=='cgi' ? 1 : 0 );$/;"	d
IS_CLI	ThinkPHP/Common/runtime.php	/^define('IS_CLI',PHP_SAPI=='cli'? 1   :   0);$/;"	d
IS_DELETE	ThinkPHP/Lib/Core/App.class.php	/^        define('IS_DELETE',     REQUEST_METHOD =='DELETE' ? true : false);$/;"	d
IS_GET	ThinkPHP/Lib/Core/App.class.php	/^        define('IS_GET',        REQUEST_METHOD =='GET' ? true : false);$/;"	d
IS_POST	ThinkPHP/Lib/Core/App.class.php	/^        define('IS_POST',       REQUEST_METHOD =='POST' ? true : false);$/;"	d
IS_PUT	ThinkPHP/Lib/Core/App.class.php	/^        define('IS_PUT',        REQUEST_METHOD =='PUT' ? true : false);$/;"	d
IS_WIN	ThinkPHP/Common/runtime.php	/^define('IS_WIN',strstr(PHP_OS, 'WIN') ? 1 : 0 );$/;"	d
IndexAction	Lib/Action/IndexAction.class.php	/^class IndexAction extends Action {$/;"	c
IndexAction	ThinkPHP/Tpl/default_index.tpl	/^class IndexAction extends Action {$/;"	c
L	ThinkPHP/Common/common.php	/^function L($name=null, $value=null) {$/;"	f
LANG_PATH	ThinkPHP/Common/runtime.php	/^defined('LANG_PATH')    or define('LANG_PATH',      APP_PATH.'Lang\/'); \/\/ 项目语言包目录$/;"	d
LIBRARY_PATH	ThinkPHP/Common/runtime.php	/^defined('LIBRARY_PATH') or define('LIBRARY_PATH',   EXTEND_PATH.'Library\/'); \/\/ 扩展类库目录$/;"	d
LIB_PATH	ThinkPHP/Common/runtime.php	/^defined('LIB_PATH')     or define('LIB_PATH',       APP_PATH.'Lib\/'); \/\/ 项目类库目录$/;"	d
LOG_PATH	ThinkPHP/Common/runtime.php	/^defined('LOG_PATH')     or define('LOG_PATH',       RUNTIME_PATH.'Logs\/'); \/\/ 项目日志目录$/;"	d
Log	ThinkPHP/Lib/Core/Log.class.php	/^class Log {$/;"	c
M	ThinkPHP/Common/common.php	/^function M($name='', $tablePrefix='',$connection='') {$/;"	f
MAGIC_QUOTES_GPC	ThinkPHP/Common/runtime.php	/^    define('MAGIC_QUOTES_GPC',false);$/;"	d
MAGIC_QUOTES_GPC	ThinkPHP/Common/runtime.php	/^    define('MAGIC_QUOTES_GPC',get_magic_quotes_gpc()?True:False);$/;"	d
MEMORY_LIMIT_ON	ThinkPHP/ThinkPHP.php	/^define('MEMORY_LIMIT_ON',function_exists('memory_get_usage'));$/;"	d
MODE_PATH	ThinkPHP/Common/runtime.php	/^defined('MODE_PATH')    or define('MODE_PATH',      EXTEND_PATH.'Mode\/'); \/\/ 模式扩展目录$/;"	d
MODULE_ALIAS	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                define('MODULE_ALIAS',strtolower($module));$/;"	d
MODULE_NAME	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('MODULE_NAME',self::getModule(C('VAR_MODULE')));$/;"	d
Model	ThinkPHP/Lib/Core/Model.class.php	/^class Model {$/;"	c
N	ThinkPHP/Common/common.php	/^function N($key, $step=0,$save=false) {$/;"	f
NOW_TIME	ThinkPHP/Lib/Core/App.class.php	/^        define('NOW_TIME',      $_SERVER['REQUEST_TIME']);$/;"	d
PHP_FILE	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('PHP_FILE',$url);$/;"	d
PHP_FILE	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('PHP_FILE',_PHP_FILE_);$/;"	d
PHP_FILE	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'=');$/;"	d
ParseTemplateBehavior	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^class ParseTemplateBehavior extends Behavior {$/;"	c
R	ThinkPHP/Common/common.php	/^function R($url,$vars=array(),$layer='') {$/;"	f
REQUEST_METHOD	ThinkPHP/Lib/Core/App.class.php	/^        define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']);$/;"	d
RUNTIME_FILE	ThinkPHP/ThinkPHP.php	/^	defined('RUNTIME_FILE') or define('RUNTIME_FILE',RUNTIME_PATH.$runtime);$/;"	d
RUNTIME_PATH	ThinkPHP/ThinkPHP.php	/^    defined('RUNTIME_PATH') or define('RUNTIME_PATH',APP_PATH.'Runtime\/');$/;"	d
ReadHtmlCacheBehavior	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^class ReadHtmlCacheBehavior extends Behavior {$/;"	c
S	ThinkPHP/Common/functions.php	/^function S($name,$value='',$options=null) {$/;"	f
SUB_DOMAIN	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                define('SUB_DOMAIN',$subDomain); \/\/ 二级域名定义$/;"	d
ShowPageTraceBehavior	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^class ShowPageTraceBehavior extends Behavior {$/;"	c
ShowRuntimeBehavior	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^class ShowRuntimeBehavior extends Behavior {$/;"	c
T	Runtime/~runtime.php	/^<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_NAME') or define('APP_NAME','Webim'); defined('APP_PATH') or define('APP_PATH','.\/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/'); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('RUNTIME_PATH') or define('RUNTIME_PATH','.\/Runtime\/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','.\/Runtime\/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','\/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/'); defined('EXTEND_PATH') or define('EXTEND_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/'); defined('MODE_PATH') or define('MODE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Mode\/'); defined('ENGINE_PATH') or define('ENGINE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Engine\/'); defined('VENDOR_PATH') or define('VENDOR_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Vendor\/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Library\/'); defined('COMMON_PATH') or define('COMMON_PATH','.\/Common\/'); defined('LIB_PATH') or define('LIB_PATH','.\/Lib\/'); defined('CONF_PATH') or define('CONF_PATH','.\/Conf\/'); defined('LANG_PATH') or define('LANG_PATH','.\/Lang\/'); defined('TMPL_PATH') or define('TMPL_PATH','.\/Tpl\/'); defined('HTML_PATH') or define('HTML_PATH','.\/Html\/'); defined('LOG_PATH') or define('LOG_PATH','.\/Runtime\/Logs\/'); defined('TEMP_PATH') or define('TEMP_PATH','.\/Runtime\/Temp\/'); defined('DATA_PATH') or define('DATA_PATH','.\/Runtime\/Data\/'); defined('CACHE_PATH') or define('CACHE_PATH','.\/Runtime\/Cache\/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template='',$layer=''){ if(is_file($template)) { return $template; } if(false === strpos($template,':\/\/')){ $template = APP_NAME.':\/\/'.str_replace(':', '\/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $group = isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':''); $app = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); if(($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])){ $baseUrl = $list[$app].'\/'.$group.$layer.'\/'; }elseif(1==C('APP_GROUP_MODE')){ $baseUrl = dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/'; }else{ $baseUrl = TMPL_PATH.$group; } if('' == $file) { $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($file, '\/')){ $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file; } return $baseUrl.$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; default: return NULL; } if(C('VAR_FILTERS')) { $_filters = explode(',',C('VAR_FILTERS')); foreach($_filters as $_filter){ array_walk_recursive($input,$_filter); } } if(empty($name)) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $data = array_map($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])\/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("\/_([a-zA-Z])\/e", "strtoupper('\\\\1')", $name)); } else { return strtolower(trim(preg_replace("\/[A-Z]\/", "_\\\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array,$return=false){ foreach ($array as $file){ if (require_cache($file) && $return) return true; } if($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('\/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '\/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('\/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1); }elseif ('think' == strtolower($class_strut[0])){ $baseUrl = CORE_PATH; $class = substr($class,6); }elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; }else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('\/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@\/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if (is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); }elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } }elseif (is_array($alias)) { $_alias = array_merge($_alias,$alias); return; } return false; } function D($name='',$layer='') { if(empty($name)) return new Model; static $_model = array(); $layer = $layer?$layer:C('DEFAULT_M_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = C('DEFAULT_APP'); $name = $app.'\/'.$layer.'\/'.$name; } if(isset($_model[$name])) return $_model[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class)) { $model = new $class(basename($name)); }else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function A($name,$layer='',$common=false) { static $_action = array(); $layer = $layer?$layer:C('DEFAULT_C_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = '@'; $name = '@\/'.$layer.'\/'.$name; } if(isset($_action[$name])) return $_action[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif($common) { import(str_replace('@\/','',$name).$layer,LIB_PATH); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class,false)) { $action = new $class(); $_action[$name] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) { if(!empty($value) && $array = S('c_'.$value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name)); if(!empty($value)) { S('c_'.$value,$_config); } return; } return null; } function tag($tag, &$params=NULL) { $extends = C('extends.' . $tag); $tags = C('tags.' . $tag); if (!empty($tags)) { if(empty($tags['_overlay']) && !empty($extends)) { $tags = array_unique(array_merge($extends,$tags)); }elseif(isset($tags['_overlay'])){ unset($tags['_overlay']); } }elseif(!empty($extends)) { $tags = $extends; } if($tags) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach ($tags as $key=>$name) { if(!is_int($key)) { $name = $key; } B($name, $params); } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } }else{ return false; } } function add_tag_behavior($tag,$behavior,$path='') { $array = C('tags.'.$tag); if(!$array) { $array = array(); } if($path) { $array[$behavior] = $path; }else{ $array[] = $behavior; } C('tags.'.$tag,$array); } function B($name, &$params=NULL) { if(strpos($name,'\/')){ list($name,$method) = explode('\/',$name); }else{ $method = 'run'; } $class = $name.'Behavior'; if(APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if(APP_DEBUG) { G('behaviorEnd'); trace($name.' Behavior ::'.$method.' [ RunTime:'.G('behaviorStart','behaviorEnd',6).'s ]','','INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); if('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if(!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info,$level,$record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think','fatalError')); set_error_handler(array('Think','appError')); set_exception_handler(array('Think','appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return ; } public static function autoload($class) { if(alias_import($class)) return ; $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':''; $file = $class.'.class.php'; if(substr($class,-8)=='Behavior') { if(require_array(array( CORE_PATH.'Behavior\/'.$file, EXTEND_PATH.'Behavior\/'.$file, LIB_PATH.'Behavior\/'.$file, $libPath.'Behavior\/'.$file),true) || (defined('MODE_NAME') && require_cache(MODE_PATH.ucwords(MODE_NAME).'\/Behavior\/'.$file))) { return ; } }elseif(substr($class,-5)=='Model'){ if(require_array(array( LIB_PATH.'Model\/'.$group.$file, $libPath.'Model\/'.$file, EXTEND_PATH.'Model\/'.$file),true)) { return ; } }elseif(substr($class,-6)=='Action'){ if(require_array(array( LIB_PATH.'Action\/'.$group.$file, $libPath.'Action\/'.$file, EXTEND_PATH.'Action\/'.$file),true)) { return ; } }elseif(substr($class,0,5)=='Cache'){ if(require_array(array( EXTEND_PATH.'Driver\/Cache\/'.$file, CORE_PATH.'Driver\/Cache\/'.$file),true)){ return ; } }elseif(substr($class,0,2)=='Db'){ if(require_array(array( EXTEND_PATH.'Driver\/Db\/'.$file, CORE_PATH.'Driver\/Db\/'.$file),true)){ return ; } }elseif(substr($class,0,8)=='Template'){ if(require_array(array( EXTEND_PATH.'Driver\/Template\/'.$file, CORE_PATH.'Driver\/Template\/'.$file),true)){ return ; } }elseif(substr($class,0,6)=='TagLib'){ if(require_array(array( EXTEND_PATH.'Driver\/TagLib\/'.$file, CORE_PATH.'Driver\/TagLib\/'.$file),true)) { return ; } } $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'.'.$class)) return ; } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('throw_exception'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'],Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { if(C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt')?halt($e):exit('ERROR:'.$e['message']); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); public function __construct() { if(!empty($this->options)) { foreach ($this->options as $name=>$val){ if(NULL !== C($name)) { $this->options[$name] = C($name); }else{ C($name,$val); } } array_change_key_case($this->options); } } public function __get($name){ return $this->options[strtolower($name)]; } abstract public function run(&$params); } class ReadHtmlCacheBehavior extends Behavior { protected $options = array( 'HTML_CACHE_ON' => false, 'HTML_CACHE_TIME' => 60, 'HTML_CACHE_RULES' => array(), 'HTML_FILE_SUFFIX' => '.html', ); public function run(&$params){ if(C('HTML_CACHE_ON')) { $cacheTime = $this->requireHtmlCache(); if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { readfile(HTML_FILE_NAME); exit(); } } } static private function requireHtmlCache() { $htmls = C('HTML_CACHE_RULES'); if(!empty($htmls)) { $htmls = array_change_key_case($htmls); $moduleName = strtolower(MODULE_NAME); $actionName = strtolower(ACTION_NAME); if(isset($htmls[$moduleName.':'.$actionName])) { $html = $htmls[$moduleName.':'.$actionName]; }elseif(isset($htmls[$moduleName.':'])){ $html = $htmls[$moduleName.':']; }elseif(isset($htmls[$actionName])){ $html = $htmls[$actionName]; }elseif(isset($htmls['*'])){ $html = $htmls['*']; }elseif(isset($htmls['empty:index']) && !class_exists(MODULE_NAME.'Action')){ $html = $htmls['empty:index']; }elseif(isset($htmls[$moduleName.':_empty']) && $this->isEmptyAction(MODULE_NAME,ACTION_NAME)){ $html = $htmls[$moduleName.':_empty']; } if(!empty($html)) { $rule = $html[0]; $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule); $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule); $rule = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule); $rule = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule); $rule = str_ireplace( array('{:app}','{:module}','{:action}','{:group}'), array(APP_NAME,MODULE_NAME,ACTION_NAME,defined('GROUP_NAME')?GROUP_NAME:''), $rule); $rule = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule); if(!empty($html[2])) $rule = $html[2]($rule); $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX')); return $cacheTime; } } return false; } static public function checkHTMLCache($cacheFile='',$cacheTime='') { if(!is_file($cacheFile)){ return false; }elseif (filemtime(C('TEMPLATE_NAME')) > filemtime($cacheFile)) { return false; }elseif(!is_numeric($cacheTime) && function_exists($cacheTime)){ return $cacheTime($cacheFile); }elseif ($cacheTime != 0 && NOW_TIME > filemtime($cacheFile)+$cacheTime) { return false; } return true; } static private function isEmptyAction($module,$action) { $className = $module.'Action'; $class = new $className; return !method_exists($class,$action); } } class CheckRouteBehavior extends Behavior { protected $options = array( 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array(), ); public function run(&$return){ $regx = trim($_SERVER['PATH_INFO'],'\/'); if(empty($regx)) return $return = true; if(!C('URL_ROUTER_ON')) return $return = false; $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { $depr = C('URL_PATHINFO_DEPR'); $regx = str_replace($depr,'\/',$regx); foreach ($routes as $rule=>$route){ if(0===strpos($rule,'\/') && preg_match($rule,$regx,$matches)) { return $return = $this->parseRegex($matches,$route,$regx); }else{ $len1 = substr_count($regx,'\/'); $len2 = substr_count($rule,'\/'); if($len1>=$len2) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = $this->checkUrlMatch($regx,$rule); if($match) return $return = $this->parseRule($rule,$route,$regx); } } } } $return = false; } private function checkUrlMatch($regx,$rule) { $m1 = explode('\/',$regx); $m2 = explode('\/',$rule); $match = true; foreach ($m2 as $key=>$val){ if(':' == substr($val,0,1)) { if(strpos($val,'\\\\')) { $type = substr($val,-1); if('d'==$type && !is_numeric($m1[$key])) { $match = false; break; } }elseif(strpos($val,'^')){ $array = explode('|',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { $match = false; break; } } }elseif(0 !== strcasecmp($val,$m1[$key])){ $match = false; break; } } return $match; } private function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('\/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'\/')){ $path = explode('\/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_GROUP')] = array_pop($path); } } return $var; } private function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('\/',$regx); $matches = array(); $rule = explode('\/',$rule); foreach ($rule as $item){ if(0===strpos($item,':')) { if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if($paths) { preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url); if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace('@(\\w+)\\\/([^,\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', $regx); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } } class ParseTemplateBehavior extends Behavior { protected $options = array( 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', ); public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { extract($_data['var'], EXTR_OVERWRITE); include C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'); }else{ $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ $class = 'Template'.ucwords($engine); if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { throw_exception(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > filemtime($tmplCacheFile)) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(is_file(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } } class ContentReplaceBehavior extends Behavior { protected $options = array( 'TMPL_PARSE_STRING' => array(), ); public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '..\/Public' => APP_TMPL_PATH.'Public', '__PUBLIC__' => __ROOT__.'\/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } } class TokenBuildBehavior extends Behavior { protected $options = array( 'TOKEN_ON' => false, 'TOKEN_NAME' => '__hash__', 'TOKEN_TYPE' => 'md5', 'TOKEN_RESET' => true, ); public function run(&$content){ if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $content = str_replace('{__TOKEN__}',$this->buildToken(),$content); }elseif(preg_match('\/<\\\/form(\\s*)>\/is',$content,$match)) { $content = str_replace($match[0],$this->buildToken().$match[0],$content); } }else{ $content = str_replace('{__TOKEN__}','',$content); } } private function buildToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5($_SERVER['REQUEST_URI']); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>'; return $token; } } class WriteHtmlCacheBehavior extends Behavior { public function run(&$content){ if(C('HTML_CACHE_ON') && defined('HTML_FILE_NAME')) { if(!is_dir(dirname(HTML_FILE_NAME))) mkdir(dirname(HTML_FILE_NAME),0755,true); if( false === file_put_contents( HTML_FILE_NAME , $content )) throw_exception(L('_CACHE_WRITE_ERROR_').':'.HTML_FILE_NAME); } } } class ShowRuntimeBehavior extends Behavior { protected $options = array( 'SHOW_RUN_TIME' => false, 'SHOW_ADV_TIME' => false, 'SHOW_DB_TIMES' => false, 'SHOW_CACHE_TIMES' => false, 'SHOW_USE_MEM' => false, 'SHOW_LOAD_FILE' => false, 'SHOW_FUN_TIMES' => false , ); public function run(&$content){ if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024).' kb'; } if(C('SHOW_LOAD_FILE')) { $showTime .= ' | LoadFile:'.count(get_included_files()); } if(C('SHOW_FUN_TIMES')) { $fun = get_defined_functions(); $showTime .= ' | CallFun:'.count($fun['user']).','.count($fun['internal']); } return $showTime; } } class ShowPageTraceBehavior extends Behavior { protected $options = array( 'SHOW_PAGE_TRACE' => false, 'TRACE_PAGE_TABS' => array('BASE'=>'基本','FILE'=>'文件','INFO'=>'流程','ERR|NOTIC'=>'错误','SQL'=>'SQL','DEBUG'=>'调试'), 'PAGE_TRACE_SAVE' => false, ); public function run(&$params){ if(!IS_AJAX && C('SHOW_PAGE_TRACE')) { echo $this->showTrace(); } } private function showTrace() { $files = get_included_files(); $info = array(); foreach ($files as $key=>$file){ $info[] = $file.' ( '.number_format(filesize($file)\/1024,2).' KB )'; } $trace = array(); $base = array( '请求信息' => date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']).' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_METHOD'].' : '.__SELF__, '运行时间' => $this->showTime(), '吞吐率' => number_format(1\/G('beginTime','viewEndTime'),2).'req\/s', '内存开销' => MEMORY_LIMIT_ON?number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024,2).' kb':'不支持', '查询信息' => N('db_query').' queries '.N('db_write').' writes ', '文件加载' => count(get_included_files()), '缓存信息' => N('cache_read').' gets '.N('cache_write').' writes ', '配置加载' => count(c()), '会话信息' => 'SESSION_ID='.session_id(), ); $traceFile = CONF_PATH.'trace.php'; if(is_file($traceFile)) { $base = array_merge($base,include $traceFile); } $debug = trace(); $tabs = C('TRACE_PAGE_TABS'); foreach ($tabs as $name=>$title){ switch(strtoupper($name)) { case 'BASE': $trace[$title] = $base; break; case 'FILE': $trace[$title] = $info; break; default: $name = strtoupper($name); if(strpos($name,'|')) { $array = explode('|',$name); $result = array(); foreach($array as $name){ $result += isset($debug[$name])?$debug[$name]:array(); } $trace[$title] = $result; }else{ $trace[$title] = isset($debug[$name])?$debug[$name]:''; } } } if($save = C('PAGE_TRACE_SAVE')) { if(is_array($save)) { $tabs = C('TRACE_PAGE_TABS'); $array = array(); foreach ($save as $tab){ $array[] = $tabs[$tab]; } } $content = date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n"; foreach ($trace as $key=>$val){ if(!isset($array) || in_array($key,$array)) { $content .= '[ '.$key." ]\\r\\n"; if(is_array($val)) { foreach ($val as $k=>$v){ $content .= (!is_numeric($k)?$k.':':'').print_r($v,true)."\\r\\n"; } }else{ $content .= print_r($val,true)."\\r\\n"; } $content .= "\\r\\n"; } } error_log(str_replace('<br\/>',"\\r\\n",$content), Log::FILE,LOG_PATH.date('y_m_d').'_trace.log'); } unset($files,$info,$base); ob_start(); include C('TMPL_TRACE_FILE')?C('TMPL_TRACE_FILE'):THINK_PATH.'Tpl\/page_trace.tpl'; return ob_get_clean(); } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); return G('beginTime','viewEndTime').'s ( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } }alias_import(array ( 'Model' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Model.class.php', 'Db' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Db.class.php', 'Log' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Log.class.php', 'ThinkTemplate' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/ThinkTemplate.class.php', 'TagLib' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/TagLib.class.php', 'Cache' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Cache.class.php', 'Widget' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Widget.class.php', 'TagLibCx' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Driver\/TagLib\/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type='ThinkException', $code=0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _404($msg='',$url='') { APP_DEBUG && throw_exception($msg); if($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if(empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if($url) { redirect($url); }else{ send_http_status(404); exit; } } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if(false === strpos($key,'*') && 0=== strpos($url,$rule[0])) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule[0])); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); if($url) { if(0=== strpos($url,'\/')) { $route = true; $url = substr($url,1); if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } }else{ if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $var[C('VAR_ACTION')] = !empty($path)?array_pop($path):ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path)?array_pop($path):MODULE_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if($action = array_search(strtolower($var[C('VAR_ACTION')]),$maps)){ $var[C('VAR_ACTION')] = $action; } } } if($maps = C('URL_MODULE_MAP')) { if($module = array_search(strtolower($var[C('VAR_MODULE')]),$maps)){ $var[C('VAR_MODULE')] = $module; } } if(C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if(!C('APP_SUB_DOMAIN_DEPLOY') && C('APP_GROUP_LIST')) { if(!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; }else{ if(GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')]= GROUP_NAME; } } if(C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.http_build_query(array_reverse($var)); if(!empty($vars)) { $vars = urldecode(http_build_query($vars)); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'\/'.rtrim($url,$depr); }else{ $url = __APP__.'\/'.implode($depr,array_reverse($var)); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '\/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url; } if($redirect) redirect($url); else return $url; } function W($name, $data=array(), $return=false,$path='') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget\/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter\/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\\n", "\\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function cache($name,$value='',$options=null){ return S($name,$value,$options); } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name,'*')?array_map("unlink", glob($filename)):unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir,0755,true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\\"{$value}\\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "<\/{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\\"{$key}\\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "<\/{$key}>"; } return $xml; } function session($name,$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $class = 'Session'. ucwords(strtolower(C('SESSION_TYPE'))); if(require_cache(EXTEND_PATH.'Driver\/Session\/'.$class.'.class.php')) { $hander = new $class(); $hander->execute(); }else { throw_exception(L('_CLASS_NOT_EXIST_').': ' . $class); } } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if(C('LOAD_EXT_FILE')) { $files = explode(',',C('LOAD_EXT_FILE')); foreach ($files as $file){ $file = COMMON_PATH.$file.'.php'; if(is_file($file)) include $file; } } if(C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = CONF_PATH.$config.'.php'; if(is_file($file)) { is_numeric($key)?C(include $file):C($key,include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP\/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\\r\\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n".implode('',self::$log)."\\r\\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\\r\\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if(isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '\/' || $url == '\\\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; }else{ $subDomain = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.'))); define('SUB_DOMAIN',$subDomain); if($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*'])){ if('www' != $subDomain && !in_array($subDomain,C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if(!empty($rule)) { $array = explode('\/',$rule[0]); $module = array_pop($array); if(!empty($module)) { $_GET[C('VAR_MODULE')] = $module; $domainModule = true; } if(!empty($array)) { $_GET[C('VAR_GROUP')] = array_pop($array); $domainGroup = true; } if(isset($rule[1])) { parse_str($rule[1],$parms); $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if(!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension'])?strtolower($part['extension']):''); if(__EXT__){ if(C('URL_DENY_SUFFIX') && preg_match('\/\\.('.trim(C('URL_DENY_SUFFIX'),'.').')$\/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } if(C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('\/\\.('.trim(C('URL_HTML_SUFFIX'),'.').')$\/i', '', $_SERVER['PATH_INFO']); }else{ $_SERVER['PATH_INFO'] = preg_replace('\/.'.__EXT__.'$\/i','',$_SERVER['PATH_INFO']); } } if(!self::routerCheck()){ $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/')); if(C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])){ $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]),explode(',',strtolower(C('APP_GROUP_LIST'))))? array_shift($paths) : ''; if(C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]),explode(',',strtolower(C('APP_GROUP_DENY'))))) { exit; } } if(!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[\\'\\\\1\\']=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); $_GET = array_merge($var,$_GET); } define('__INFO__',$_SERVER['PATH_INFO']); }else{ define('__INFO__',''); } define('__SELF__',strip_tags($_SERVER['REQUEST_URI'])); define('__APP__',strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH); if(defined('GROUP_NAME')) { C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'\/'); if(1 == C('APP_GROUP_MODE')){ $config_path = BASE_LIB_PATH.'Conf\/'; $common_path = BASE_LIB_PATH.'Common\/'; }else{ $config_path = CONF_PATH.GROUP_NAME.'\/'; $common_path = COMMON_PATH.GROUP_NAME.'\/'; } if(is_file($config_path.'config.php')) C(include $config_path.'config.php'); if(is_file($config_path.'alias.php')) alias_import(include $config_path.'alias.php'); if(is_file($config_path.'tags.php')) C('tags', include $config_path.'tags.php'); if(is_file($common_path.'function.php')) include $common_path.'function.php'; }else{ C('CACHE_PATH',CACHE_PATH); } define('MODULE_NAME',self::getModule(C('VAR_MODULE'))); define('ACTION_NAME',self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME; if(defined('GROUP_NAME')) { define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); }else{ define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static public function routerCheck() { $return = false; tag('route_check',$return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return $maps[MODULE_ALIAS]; }elseif(array_search(strtolower($module),$maps)){ return ''; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module,1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); return $maps[ACTION_ALIAS]; }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE')?strtolower($action):$action); } static private function getGroup($var) { $group = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ?ucfirst(strtolower($group)):$group); } } class App { static public function init() { if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if(C('VAR_FILTERS')) { $filters = explode(',',C('VAR_FILTERS')); foreach($filters as $filter){ array_walk_recursive($_POST,$filter); array_walk_recursive($_GET,$filter); } } C('LOG_PATH',realpath(LOG_PATH).'\/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('\/^[A-Za-z](\\w)*$\/',MODULE_NAME)){ $module = false; }else{ $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : ''; $module = A($group.MODULE_NAME); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == MODULE_NAME) { header("Content-type:image\/png"); exit(base64_decode(App::logo())); } if(function_exists('__hack_module')) { $module = __hack_module(); if(!is_object($module)) { return ; } }else{ $module = A($group.'Empty'); if(!$module){ _404(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } } } $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME; $action .= C('ACTION_SUFFIX'); try{ if(!preg_match('\/^[A-Za-z](\\w)*$\/',$action)){ throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if($method->isPublic()) { $class = new ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if(C('URL_PARAMS_BIND') && $method->getNumberOfParameters()>0){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param){ $name = $param->getName(); if(isset($vars[$name])) { $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ throw_exception(L('_PARAM_ERROR_').':'.$name); } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw\/eHBhY2tldCBiZWdpbj0i77u\/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw\/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk\/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7\/v\/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+\/OEQ4+obQn5D+4Ubb22+YOGsWi\/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9\/W4H3iNSQqIe09O196dLKX7d1O39OViP\/wthtkND62if\/wj\/DbMpph8BY\/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy\/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z\/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB\/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc\/AOuXiwH07VCS3w5+UQMAuF\/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5\/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8\/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR\/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5\/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v\/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ\/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh\/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE\/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC\/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm\/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr\/XKm0ZofKSI2Q\/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0\/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W\/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc\/i3jJSAwhgfFlp20laMLOku\/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi\/MubUA\/mCT4Fhf038PC8XplhWnCmnK\/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2\/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9\/y5i\/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0\/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk\/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p\/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru\/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl\/tFILYwGPjXWO3zOfSq\/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t\/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX\/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay\/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV\/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1\/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v\/8jG\/fZX\/IW5MKPKtjSYlt0ellxh+\/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL\/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5\/1H3gaNmMpn8Fz0GpYFp6Zw615H\/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc\/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn\/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C\/P\/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq\/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs\/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk\/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS\/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh\/eMDzHEzGYu0Lg8gJ7oS\/tFCwoic44fyUtix0n\/46vP4bf+\/\/BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application\/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text\/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application\/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text\/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } return $template; } $template = str_replace(':', '\/', $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '\/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($template, '\/')){ $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '\/':''; } } L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => false, 'app_autoload_path' => '', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => '', 'app_group_mode' => 0, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '\/', 'cookie_prefix' => '', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => '', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => '', 'db_prefix' => 'think_', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '.\/Runtime\/Temp\/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '页面错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => false, 'trace_exception' => false, 'log_record' => false, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text\/html', 'tmpl_action_error' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_action_success' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_exception_file' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_file_depr' => '\/', 'url_case_insensitive' => false, 'url_model' => 1, 'url_pathinfo_depr' => '\/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => 'html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'extends' => array ( 'app_init' => array ( ), 'app_begin' => array ( 0 => 'ReadHtmlCache', ), 'route_check' => array ( 0 => 'CheckRoute', ), 'app_end' => array ( ), 'path_info' => array ( ), 'action_begin' => array ( ), 'action_end' => array ( ), 'view_begin' => array ( ), 'view_parse' => array ( 0 => 'ParseTemplate', ), 'view_filter' => array ( 0 => 'ContentReplace', 1 => 'TokenBuild', 2 => 'WriteHtmlCache', 3 => 'ShowRuntime', ), 'view_end' => array ( 0 => 'ShowPageTrace', ), ), ));G('loadTime');Think::Start();/;"	f
T	ThinkPHP/Common/common.php	/^function T($template='',$layer=''){$/;"	f
TEMP_PATH	ThinkPHP/Common/runtime.php	/^defined('TEMP_PATH')    or define('TEMP_PATH',      RUNTIME_PATH.'Temp\/'); \/\/ 项目缓存目录$/;"	d
THEME_NAME	ThinkPHP/Lib/Core/View.class.php	/^        define('THEME_NAME',   $theme);                  \/\/ 当前模板主题名称$/;"	d
THEME_PATH	ThinkPHP/Lib/Core/View.class.php	/^                define('THEME_PATH',   TMPL_PATH.$group.$theme);$/;"	d
THEME_PATH	ThinkPHP/Lib/Core/View.class.php	/^                define('THEME_PATH',   dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme);$/;"	d
THEME_PATH	ThinkPHP/Lib/Core/View.class.php	/^            define('THEME_PATH',   TMPL_PATH.$group.$theme);$/;"	d
THEME_PATH	ThinkPHP/Lib/Core/View.class.php	/^            define('THEME_PATH',   dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme);$/;"	d
THINK_PATH	ThinkPHP/ThinkPHP.php	/^defined('THINK_PATH') 	or define('THINK_PATH', dirname(__FILE__).'\/');$/;"	d
THINK_VERSION	ThinkPHP/Common/runtime.php	/^define('THINK_VERSION', '3.1.3');$/;"	d
TMPL_PATH	ThinkPHP/Common/runtime.php	/^defined('TMPL_PATH')    or define('TMPL_PATH',      APP_PATH.'Tpl\/'); \/\/ 项目模板目录$/;"	d
TagLib	ThinkPHP/Lib/Template/TagLib.class.php	/^class TagLib {$/;"	c
TagLibCx	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^class TagLibCx extends TagLib {$/;"	c
Think	Runtime/~runtime.php	/^<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_NAME') or define('APP_NAME','Webim'); defined('APP_PATH') or define('APP_PATH','.\/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/'); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('RUNTIME_PATH') or define('RUNTIME_PATH','.\/Runtime\/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','.\/Runtime\/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','\/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/'); defined('EXTEND_PATH') or define('EXTEND_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/'); defined('MODE_PATH') or define('MODE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Mode\/'); defined('ENGINE_PATH') or define('ENGINE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Engine\/'); defined('VENDOR_PATH') or define('VENDOR_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Vendor\/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Library\/'); defined('COMMON_PATH') or define('COMMON_PATH','.\/Common\/'); defined('LIB_PATH') or define('LIB_PATH','.\/Lib\/'); defined('CONF_PATH') or define('CONF_PATH','.\/Conf\/'); defined('LANG_PATH') or define('LANG_PATH','.\/Lang\/'); defined('TMPL_PATH') or define('TMPL_PATH','.\/Tpl\/'); defined('HTML_PATH') or define('HTML_PATH','.\/Html\/'); defined('LOG_PATH') or define('LOG_PATH','.\/Runtime\/Logs\/'); defined('TEMP_PATH') or define('TEMP_PATH','.\/Runtime\/Temp\/'); defined('DATA_PATH') or define('DATA_PATH','.\/Runtime\/Data\/'); defined('CACHE_PATH') or define('CACHE_PATH','.\/Runtime\/Cache\/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template='',$layer=''){ if(is_file($template)) { return $template; } if(false === strpos($template,':\/\/')){ $template = APP_NAME.':\/\/'.str_replace(':', '\/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $group = isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':''); $app = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); if(($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])){ $baseUrl = $list[$app].'\/'.$group.$layer.'\/'; }elseif(1==C('APP_GROUP_MODE')){ $baseUrl = dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/'; }else{ $baseUrl = TMPL_PATH.$group; } if('' == $file) { $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($file, '\/')){ $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file; } return $baseUrl.$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; default: return NULL; } if(C('VAR_FILTERS')) { $_filters = explode(',',C('VAR_FILTERS')); foreach($_filters as $_filter){ array_walk_recursive($input,$_filter); } } if(empty($name)) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $data = array_map($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])\/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("\/_([a-zA-Z])\/e", "strtoupper('\\\\1')", $name)); } else { return strtolower(trim(preg_replace("\/[A-Z]\/", "_\\\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array,$return=false){ foreach ($array as $file){ if (require_cache($file) && $return) return true; } if($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('\/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '\/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('\/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1); }elseif ('think' == strtolower($class_strut[0])){ $baseUrl = CORE_PATH; $class = substr($class,6); }elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; }else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('\/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@\/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if (is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); }elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } }elseif (is_array($alias)) { $_alias = array_merge($_alias,$alias); return; } return false; } function D($name='',$layer='') { if(empty($name)) return new Model; static $_model = array(); $layer = $layer?$layer:C('DEFAULT_M_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = C('DEFAULT_APP'); $name = $app.'\/'.$layer.'\/'.$name; } if(isset($_model[$name])) return $_model[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class)) { $model = new $class(basename($name)); }else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function A($name,$layer='',$common=false) { static $_action = array(); $layer = $layer?$layer:C('DEFAULT_C_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = '@'; $name = '@\/'.$layer.'\/'.$name; } if(isset($_action[$name])) return $_action[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif($common) { import(str_replace('@\/','',$name).$layer,LIB_PATH); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class,false)) { $action = new $class(); $_action[$name] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) { if(!empty($value) && $array = S('c_'.$value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name)); if(!empty($value)) { S('c_'.$value,$_config); } return; } return null; } function tag($tag, &$params=NULL) { $extends = C('extends.' . $tag); $tags = C('tags.' . $tag); if (!empty($tags)) { if(empty($tags['_overlay']) && !empty($extends)) { $tags = array_unique(array_merge($extends,$tags)); }elseif(isset($tags['_overlay'])){ unset($tags['_overlay']); } }elseif(!empty($extends)) { $tags = $extends; } if($tags) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach ($tags as $key=>$name) { if(!is_int($key)) { $name = $key; } B($name, $params); } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } }else{ return false; } } function add_tag_behavior($tag,$behavior,$path='') { $array = C('tags.'.$tag); if(!$array) { $array = array(); } if($path) { $array[$behavior] = $path; }else{ $array[] = $behavior; } C('tags.'.$tag,$array); } function B($name, &$params=NULL) { if(strpos($name,'\/')){ list($name,$method) = explode('\/',$name); }else{ $method = 'run'; } $class = $name.'Behavior'; if(APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if(APP_DEBUG) { G('behaviorEnd'); trace($name.' Behavior ::'.$method.' [ RunTime:'.G('behaviorStart','behaviorEnd',6).'s ]','','INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); if('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if(!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info,$level,$record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think','fatalError')); set_error_handler(array('Think','appError')); set_exception_handler(array('Think','appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return ; } public static function autoload($class) { if(alias_import($class)) return ; $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':''; $file = $class.'.class.php'; if(substr($class,-8)=='Behavior') { if(require_array(array( CORE_PATH.'Behavior\/'.$file, EXTEND_PATH.'Behavior\/'.$file, LIB_PATH.'Behavior\/'.$file, $libPath.'Behavior\/'.$file),true) || (defined('MODE_NAME') && require_cache(MODE_PATH.ucwords(MODE_NAME).'\/Behavior\/'.$file))) { return ; } }elseif(substr($class,-5)=='Model'){ if(require_array(array( LIB_PATH.'Model\/'.$group.$file, $libPath.'Model\/'.$file, EXTEND_PATH.'Model\/'.$file),true)) { return ; } }elseif(substr($class,-6)=='Action'){ if(require_array(array( LIB_PATH.'Action\/'.$group.$file, $libPath.'Action\/'.$file, EXTEND_PATH.'Action\/'.$file),true)) { return ; } }elseif(substr($class,0,5)=='Cache'){ if(require_array(array( EXTEND_PATH.'Driver\/Cache\/'.$file, CORE_PATH.'Driver\/Cache\/'.$file),true)){ return ; } }elseif(substr($class,0,2)=='Db'){ if(require_array(array( EXTEND_PATH.'Driver\/Db\/'.$file, CORE_PATH.'Driver\/Db\/'.$file),true)){ return ; } }elseif(substr($class,0,8)=='Template'){ if(require_array(array( EXTEND_PATH.'Driver\/Template\/'.$file, CORE_PATH.'Driver\/Template\/'.$file),true)){ return ; } }elseif(substr($class,0,6)=='TagLib'){ if(require_array(array( EXTEND_PATH.'Driver\/TagLib\/'.$file, CORE_PATH.'Driver\/TagLib\/'.$file),true)) { return ; } } $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'.'.$class)) return ; } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('throw_exception'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'],Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { if(C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt')?halt($e):exit('ERROR:'.$e['message']); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); public function __construct() { if(!empty($this->options)) { foreach ($this->options as $name=>$val){ if(NULL !== C($name)) { $this->options[$name] = C($name); }else{ C($name,$val); } } array_change_key_case($this->options); } } public function __get($name){ return $this->options[strtolower($name)]; } abstract public function run(&$params); } class ReadHtmlCacheBehavior extends Behavior { protected $options = array( 'HTML_CACHE_ON' => false, 'HTML_CACHE_TIME' => 60, 'HTML_CACHE_RULES' => array(), 'HTML_FILE_SUFFIX' => '.html', ); public function run(&$params){ if(C('HTML_CACHE_ON')) { $cacheTime = $this->requireHtmlCache(); if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { readfile(HTML_FILE_NAME); exit(); } } } static private function requireHtmlCache() { $htmls = C('HTML_CACHE_RULES'); if(!empty($htmls)) { $htmls = array_change_key_case($htmls); $moduleName = strtolower(MODULE_NAME); $actionName = strtolower(ACTION_NAME); if(isset($htmls[$moduleName.':'.$actionName])) { $html = $htmls[$moduleName.':'.$actionName]; }elseif(isset($htmls[$moduleName.':'])){ $html = $htmls[$moduleName.':']; }elseif(isset($htmls[$actionName])){ $html = $htmls[$actionName]; }elseif(isset($htmls['*'])){ $html = $htmls['*']; }elseif(isset($htmls['empty:index']) && !class_exists(MODULE_NAME.'Action')){ $html = $htmls['empty:index']; }elseif(isset($htmls[$moduleName.':_empty']) && $this->isEmptyAction(MODULE_NAME,ACTION_NAME)){ $html = $htmls[$moduleName.':_empty']; } if(!empty($html)) { $rule = $html[0]; $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule); $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule); $rule = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule); $rule = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule); $rule = str_ireplace( array('{:app}','{:module}','{:action}','{:group}'), array(APP_NAME,MODULE_NAME,ACTION_NAME,defined('GROUP_NAME')?GROUP_NAME:''), $rule); $rule = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule); if(!empty($html[2])) $rule = $html[2]($rule); $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX')); return $cacheTime; } } return false; } static public function checkHTMLCache($cacheFile='',$cacheTime='') { if(!is_file($cacheFile)){ return false; }elseif (filemtime(C('TEMPLATE_NAME')) > filemtime($cacheFile)) { return false; }elseif(!is_numeric($cacheTime) && function_exists($cacheTime)){ return $cacheTime($cacheFile); }elseif ($cacheTime != 0 && NOW_TIME > filemtime($cacheFile)+$cacheTime) { return false; } return true; } static private function isEmptyAction($module,$action) { $className = $module.'Action'; $class = new $className; return !method_exists($class,$action); } } class CheckRouteBehavior extends Behavior { protected $options = array( 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array(), ); public function run(&$return){ $regx = trim($_SERVER['PATH_INFO'],'\/'); if(empty($regx)) return $return = true; if(!C('URL_ROUTER_ON')) return $return = false; $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { $depr = C('URL_PATHINFO_DEPR'); $regx = str_replace($depr,'\/',$regx); foreach ($routes as $rule=>$route){ if(0===strpos($rule,'\/') && preg_match($rule,$regx,$matches)) { return $return = $this->parseRegex($matches,$route,$regx); }else{ $len1 = substr_count($regx,'\/'); $len2 = substr_count($rule,'\/'); if($len1>=$len2) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = $this->checkUrlMatch($regx,$rule); if($match) return $return = $this->parseRule($rule,$route,$regx); } } } } $return = false; } private function checkUrlMatch($regx,$rule) { $m1 = explode('\/',$regx); $m2 = explode('\/',$rule); $match = true; foreach ($m2 as $key=>$val){ if(':' == substr($val,0,1)) { if(strpos($val,'\\\\')) { $type = substr($val,-1); if('d'==$type && !is_numeric($m1[$key])) { $match = false; break; } }elseif(strpos($val,'^')){ $array = explode('|',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { $match = false; break; } } }elseif(0 !== strcasecmp($val,$m1[$key])){ $match = false; break; } } return $match; } private function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('\/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'\/')){ $path = explode('\/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_GROUP')] = array_pop($path); } } return $var; } private function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('\/',$regx); $matches = array(); $rule = explode('\/',$rule); foreach ($rule as $item){ if(0===strpos($item,':')) { if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if($paths) { preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url); if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace('@(\\w+)\\\/([^,\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', $regx); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } } class ParseTemplateBehavior extends Behavior { protected $options = array( 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', ); public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { extract($_data['var'], EXTR_OVERWRITE); include C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'); }else{ $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ $class = 'Template'.ucwords($engine); if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { throw_exception(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > filemtime($tmplCacheFile)) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(is_file(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } } class ContentReplaceBehavior extends Behavior { protected $options = array( 'TMPL_PARSE_STRING' => array(), ); public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '..\/Public' => APP_TMPL_PATH.'Public', '__PUBLIC__' => __ROOT__.'\/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } } class TokenBuildBehavior extends Behavior { protected $options = array( 'TOKEN_ON' => false, 'TOKEN_NAME' => '__hash__', 'TOKEN_TYPE' => 'md5', 'TOKEN_RESET' => true, ); public function run(&$content){ if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $content = str_replace('{__TOKEN__}',$this->buildToken(),$content); }elseif(preg_match('\/<\\\/form(\\s*)>\/is',$content,$match)) { $content = str_replace($match[0],$this->buildToken().$match[0],$content); } }else{ $content = str_replace('{__TOKEN__}','',$content); } } private function buildToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5($_SERVER['REQUEST_URI']); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>'; return $token; } } class WriteHtmlCacheBehavior extends Behavior { public function run(&$content){ if(C('HTML_CACHE_ON') && defined('HTML_FILE_NAME')) { if(!is_dir(dirname(HTML_FILE_NAME))) mkdir(dirname(HTML_FILE_NAME),0755,true); if( false === file_put_contents( HTML_FILE_NAME , $content )) throw_exception(L('_CACHE_WRITE_ERROR_').':'.HTML_FILE_NAME); } } } class ShowRuntimeBehavior extends Behavior { protected $options = array( 'SHOW_RUN_TIME' => false, 'SHOW_ADV_TIME' => false, 'SHOW_DB_TIMES' => false, 'SHOW_CACHE_TIMES' => false, 'SHOW_USE_MEM' => false, 'SHOW_LOAD_FILE' => false, 'SHOW_FUN_TIMES' => false , ); public function run(&$content){ if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024).' kb'; } if(C('SHOW_LOAD_FILE')) { $showTime .= ' | LoadFile:'.count(get_included_files()); } if(C('SHOW_FUN_TIMES')) { $fun = get_defined_functions(); $showTime .= ' | CallFun:'.count($fun['user']).','.count($fun['internal']); } return $showTime; } } class ShowPageTraceBehavior extends Behavior { protected $options = array( 'SHOW_PAGE_TRACE' => false, 'TRACE_PAGE_TABS' => array('BASE'=>'基本','FILE'=>'文件','INFO'=>'流程','ERR|NOTIC'=>'错误','SQL'=>'SQL','DEBUG'=>'调试'), 'PAGE_TRACE_SAVE' => false, ); public function run(&$params){ if(!IS_AJAX && C('SHOW_PAGE_TRACE')) { echo $this->showTrace(); } } private function showTrace() { $files = get_included_files(); $info = array(); foreach ($files as $key=>$file){ $info[] = $file.' ( '.number_format(filesize($file)\/1024,2).' KB )'; } $trace = array(); $base = array( '请求信息' => date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']).' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_METHOD'].' : '.__SELF__, '运行时间' => $this->showTime(), '吞吐率' => number_format(1\/G('beginTime','viewEndTime'),2).'req\/s', '内存开销' => MEMORY_LIMIT_ON?number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024,2).' kb':'不支持', '查询信息' => N('db_query').' queries '.N('db_write').' writes ', '文件加载' => count(get_included_files()), '缓存信息' => N('cache_read').' gets '.N('cache_write').' writes ', '配置加载' => count(c()), '会话信息' => 'SESSION_ID='.session_id(), ); $traceFile = CONF_PATH.'trace.php'; if(is_file($traceFile)) { $base = array_merge($base,include $traceFile); } $debug = trace(); $tabs = C('TRACE_PAGE_TABS'); foreach ($tabs as $name=>$title){ switch(strtoupper($name)) { case 'BASE': $trace[$title] = $base; break; case 'FILE': $trace[$title] = $info; break; default: $name = strtoupper($name); if(strpos($name,'|')) { $array = explode('|',$name); $result = array(); foreach($array as $name){ $result += isset($debug[$name])?$debug[$name]:array(); } $trace[$title] = $result; }else{ $trace[$title] = isset($debug[$name])?$debug[$name]:''; } } } if($save = C('PAGE_TRACE_SAVE')) { if(is_array($save)) { $tabs = C('TRACE_PAGE_TABS'); $array = array(); foreach ($save as $tab){ $array[] = $tabs[$tab]; } } $content = date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n"; foreach ($trace as $key=>$val){ if(!isset($array) || in_array($key,$array)) { $content .= '[ '.$key." ]\\r\\n"; if(is_array($val)) { foreach ($val as $k=>$v){ $content .= (!is_numeric($k)?$k.':':'').print_r($v,true)."\\r\\n"; } }else{ $content .= print_r($val,true)."\\r\\n"; } $content .= "\\r\\n"; } } error_log(str_replace('<br\/>',"\\r\\n",$content), Log::FILE,LOG_PATH.date('y_m_d').'_trace.log'); } unset($files,$info,$base); ob_start(); include C('TMPL_TRACE_FILE')?C('TMPL_TRACE_FILE'):THINK_PATH.'Tpl\/page_trace.tpl'; return ob_get_clean(); } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); return G('beginTime','viewEndTime').'s ( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } }alias_import(array ( 'Model' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Model.class.php', 'Db' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Db.class.php', 'Log' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Log.class.php', 'ThinkTemplate' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/ThinkTemplate.class.php', 'TagLib' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/TagLib.class.php', 'Cache' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Cache.class.php', 'Widget' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Widget.class.php', 'TagLibCx' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Driver\/TagLib\/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type='ThinkException', $code=0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _404($msg='',$url='') { APP_DEBUG && throw_exception($msg); if($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if(empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if($url) { redirect($url); }else{ send_http_status(404); exit; } } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if(false === strpos($key,'*') && 0=== strpos($url,$rule[0])) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule[0])); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); if($url) { if(0=== strpos($url,'\/')) { $route = true; $url = substr($url,1); if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } }else{ if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $var[C('VAR_ACTION')] = !empty($path)?array_pop($path):ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path)?array_pop($path):MODULE_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if($action = array_search(strtolower($var[C('VAR_ACTION')]),$maps)){ $var[C('VAR_ACTION')] = $action; } } } if($maps = C('URL_MODULE_MAP')) { if($module = array_search(strtolower($var[C('VAR_MODULE')]),$maps)){ $var[C('VAR_MODULE')] = $module; } } if(C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if(!C('APP_SUB_DOMAIN_DEPLOY') && C('APP_GROUP_LIST')) { if(!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; }else{ if(GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')]= GROUP_NAME; } } if(C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.http_build_query(array_reverse($var)); if(!empty($vars)) { $vars = urldecode(http_build_query($vars)); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'\/'.rtrim($url,$depr); }else{ $url = __APP__.'\/'.implode($depr,array_reverse($var)); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '\/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url; } if($redirect) redirect($url); else return $url; } function W($name, $data=array(), $return=false,$path='') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget\/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter\/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\\n", "\\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function cache($name,$value='',$options=null){ return S($name,$value,$options); } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name,'*')?array_map("unlink", glob($filename)):unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir,0755,true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\\"{$value}\\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "<\/{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\\"{$key}\\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "<\/{$key}>"; } return $xml; } function session($name,$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $class = 'Session'. ucwords(strtolower(C('SESSION_TYPE'))); if(require_cache(EXTEND_PATH.'Driver\/Session\/'.$class.'.class.php')) { $hander = new $class(); $hander->execute(); }else { throw_exception(L('_CLASS_NOT_EXIST_').': ' . $class); } } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if(C('LOAD_EXT_FILE')) { $files = explode(',',C('LOAD_EXT_FILE')); foreach ($files as $file){ $file = COMMON_PATH.$file.'.php'; if(is_file($file)) include $file; } } if(C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = CONF_PATH.$config.'.php'; if(is_file($file)) { is_numeric($key)?C(include $file):C($key,include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP\/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\\r\\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n".implode('',self::$log)."\\r\\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\\r\\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if(isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '\/' || $url == '\\\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; }else{ $subDomain = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.'))); define('SUB_DOMAIN',$subDomain); if($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*'])){ if('www' != $subDomain && !in_array($subDomain,C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if(!empty($rule)) { $array = explode('\/',$rule[0]); $module = array_pop($array); if(!empty($module)) { $_GET[C('VAR_MODULE')] = $module; $domainModule = true; } if(!empty($array)) { $_GET[C('VAR_GROUP')] = array_pop($array); $domainGroup = true; } if(isset($rule[1])) { parse_str($rule[1],$parms); $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if(!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension'])?strtolower($part['extension']):''); if(__EXT__){ if(C('URL_DENY_SUFFIX') && preg_match('\/\\.('.trim(C('URL_DENY_SUFFIX'),'.').')$\/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } if(C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('\/\\.('.trim(C('URL_HTML_SUFFIX'),'.').')$\/i', '', $_SERVER['PATH_INFO']); }else{ $_SERVER['PATH_INFO'] = preg_replace('\/.'.__EXT__.'$\/i','',$_SERVER['PATH_INFO']); } } if(!self::routerCheck()){ $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/')); if(C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])){ $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]),explode(',',strtolower(C('APP_GROUP_LIST'))))? array_shift($paths) : ''; if(C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]),explode(',',strtolower(C('APP_GROUP_DENY'))))) { exit; } } if(!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[\\'\\\\1\\']=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); $_GET = array_merge($var,$_GET); } define('__INFO__',$_SERVER['PATH_INFO']); }else{ define('__INFO__',''); } define('__SELF__',strip_tags($_SERVER['REQUEST_URI'])); define('__APP__',strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH); if(defined('GROUP_NAME')) { C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'\/'); if(1 == C('APP_GROUP_MODE')){ $config_path = BASE_LIB_PATH.'Conf\/'; $common_path = BASE_LIB_PATH.'Common\/'; }else{ $config_path = CONF_PATH.GROUP_NAME.'\/'; $common_path = COMMON_PATH.GROUP_NAME.'\/'; } if(is_file($config_path.'config.php')) C(include $config_path.'config.php'); if(is_file($config_path.'alias.php')) alias_import(include $config_path.'alias.php'); if(is_file($config_path.'tags.php')) C('tags', include $config_path.'tags.php'); if(is_file($common_path.'function.php')) include $common_path.'function.php'; }else{ C('CACHE_PATH',CACHE_PATH); } define('MODULE_NAME',self::getModule(C('VAR_MODULE'))); define('ACTION_NAME',self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME; if(defined('GROUP_NAME')) { define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); }else{ define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static public function routerCheck() { $return = false; tag('route_check',$return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return $maps[MODULE_ALIAS]; }elseif(array_search(strtolower($module),$maps)){ return ''; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module,1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); return $maps[ACTION_ALIAS]; }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE')?strtolower($action):$action); } static private function getGroup($var) { $group = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ?ucfirst(strtolower($group)):$group); } } class App { static public function init() { if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if(C('VAR_FILTERS')) { $filters = explode(',',C('VAR_FILTERS')); foreach($filters as $filter){ array_walk_recursive($_POST,$filter); array_walk_recursive($_GET,$filter); } } C('LOG_PATH',realpath(LOG_PATH).'\/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('\/^[A-Za-z](\\w)*$\/',MODULE_NAME)){ $module = false; }else{ $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : ''; $module = A($group.MODULE_NAME); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == MODULE_NAME) { header("Content-type:image\/png"); exit(base64_decode(App::logo())); } if(function_exists('__hack_module')) { $module = __hack_module(); if(!is_object($module)) { return ; } }else{ $module = A($group.'Empty'); if(!$module){ _404(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } } } $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME; $action .= C('ACTION_SUFFIX'); try{ if(!preg_match('\/^[A-Za-z](\\w)*$\/',$action)){ throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if($method->isPublic()) { $class = new ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if(C('URL_PARAMS_BIND') && $method->getNumberOfParameters()>0){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param){ $name = $param->getName(); if(isset($vars[$name])) { $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ throw_exception(L('_PARAM_ERROR_').':'.$name); } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw\/eHBhY2tldCBiZWdpbj0i77u\/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw\/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk\/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7\/v\/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+\/OEQ4+obQn5D+4Ubb22+YOGsWi\/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9\/W4H3iNSQqIe09O196dLKX7d1O39OViP\/wthtkND62if\/wj\/DbMpph8BY\/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy\/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z\/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB\/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc\/AOuXiwH07VCS3w5+UQMAuF\/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5\/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8\/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR\/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5\/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v\/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ\/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh\/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE\/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC\/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm\/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr\/XKm0ZofKSI2Q\/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0\/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W\/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc\/i3jJSAwhgfFlp20laMLOku\/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi\/MubUA\/mCT4Fhf038PC8XplhWnCmnK\/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2\/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9\/y5i\/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0\/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk\/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p\/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru\/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl\/tFILYwGPjXWO3zOfSq\/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t\/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX\/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay\/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV\/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1\/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v\/8jG\/fZX\/IW5MKPKtjSYlt0ellxh+\/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL\/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5\/1H3gaNmMpn8Fz0GpYFp6Zw615H\/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc\/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn\/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C\/P\/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq\/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs\/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk\/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS\/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh\/eMDzHEzGYu0Lg8gJ7oS\/tFCwoic44fyUtix0n\/46vP4bf+\/\/BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application\/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text\/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application\/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text\/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } return $template; } $template = str_replace(':', '\/', $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '\/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($template, '\/')){ $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '\/':''; } } L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => false, 'app_autoload_path' => '', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => '', 'app_group_mode' => 0, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '\/', 'cookie_prefix' => '', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => '', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => '', 'db_prefix' => 'think_', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '.\/Runtime\/Temp\/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '页面错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => false, 'trace_exception' => false, 'log_record' => false, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text\/html', 'tmpl_action_error' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_action_success' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_exception_file' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_file_depr' => '\/', 'url_case_insensitive' => false, 'url_model' => 1, 'url_pathinfo_depr' => '\/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => 'html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'extends' => array ( 'app_init' => array ( ), 'app_begin' => array ( 0 => 'ReadHtmlCache', ), 'route_check' => array ( 0 => 'CheckRoute', ), 'app_end' => array ( ), 'path_info' => array ( ), 'action_begin' => array ( ), 'action_end' => array ( ), 'view_begin' => array ( ), 'view_parse' => array ( 0 => 'ParseTemplate', ), 'view_filter' => array ( 0 => 'ContentReplace', 1 => 'TokenBuild', 2 => 'WriteHtmlCache', 3 => 'ShowRuntime', ), 'view_end' => array ( 0 => 'ShowPageTrace', ), ), ));G('loadTime');Think::Start();/;"	c
Think	ThinkPHP/Lib/Core/Think.class.php	/^class Think {$/;"	c
ThinkException	ThinkPHP/Lib/Core/ThinkException.class.php	/^class ThinkException extends Exception {$/;"	c
ThinkTemplate	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^class  ThinkTemplate {$/;"	c
TokenBuildBehavior	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^class TokenBuildBehavior extends Behavior {$/;"	c
U	ThinkPHP/Common/functions.php	/^function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) {$/;"	f
URL_COMMON	ThinkPHP/Common/runtime.php	/^    define('URL_COMMON',      0);   \/\/普通模式$/;"	d
URL_COMPAT	ThinkPHP/Common/runtime.php	/^    define('URL_COMPAT',      3);   \/\/ 兼容模式$/;"	d
URL_PATHINFO	ThinkPHP/Common/runtime.php	/^    define('URL_PATHINFO',    1);   \/\/PATHINFO模式$/;"	d
URL_REWRITE	ThinkPHP/Common/runtime.php	/^    define('URL_REWRITE',     2);   \/\/REWRITE模式$/;"	d
VENDOR_PATH	ThinkPHP/Common/runtime.php	/^defined('VENDOR_PATH')  or define('VENDOR_PATH',    EXTEND_PATH.'Vendor\/'); \/\/ 第三方类库目录$/;"	d
View	ThinkPHP/Lib/Core/View.class.php	/^class View {$/;"	c
W	ThinkPHP/Common/functions.php	/^function W($name, $data=array(), $return=false,$path='') {$/;"	f
WebimAction	Lib/Action/WebimAction.class.php	/^class WebimAction extends Action {$/;"	c
Widget	ThinkPHP/Lib/Core/Widget.class.php	/^abstract class Widget {$/;"	c
WriteHtmlCacheBehavior	ThinkPHP/Lib/Behavior/WriteHtmlCacheBehavior.class.php	/^class WriteHtmlCacheBehavior extends Behavior {$/;"	c
_404	ThinkPHP/Common/functions.php	/^function _404($msg='',$url='') {$/;"	f
_GET	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $_GET   =  array_merge($var,$_GET);$/;"	v
_GET	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                    $_GET   =  array_merge($_GET,$parms);$/;"	v
_GET	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $_GET   =  array_merge($var,$_GET);$/;"	v
_PHP_FILE_	ThinkPHP/Common/runtime.php	/^            define('_PHP_FILE_',    rtrim($_SERVER['SCRIPT_NAME'],'\/'));$/;"	d
_PHP_FILE_	ThinkPHP/Common/runtime.php	/^            define('_PHP_FILE_',    rtrim(str_replace($_SERVER['HTTP_HOST'],'',$_temp[0].'.php'),'\/'));$/;"	d
_REQUEST	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $_REQUEST = array_merge($_POST,$_GET);$/;"	v
_SESSION	ThinkPHP/Common/functions.php	/^                $_SESSION =  array();$/;"	v
_SESSION	ThinkPHP/Common/functions.php	/^                $_SESSION = array();$/;"	v
__ACTION__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME));$/;"	d
__APP__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('__APP__',strip_tags(PHP_FILE));$/;"	d
__EXT__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__EXT__', isset($part['extension'])?strtolower($part['extension']):'');$/;"	d
__GROUP__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME));$/;"	d
__INFO__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__INFO__',$_SERVER['PATH_INFO']);$/;"	d
__INFO__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__INFO__','');$/;"	d
__LIST__	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^			$parseStr  .= ' $__LIST__ = array_slice('.$name.','.$tag['offset'].','.$tag['length'].',true);';$/;"	v
__LIST__	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $parseStr  .= ' $__LIST__ = array_slice('.$name.','.$tag['offset'].',null,true);';$/;"	v
__LIST__	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $parseStr .= ' $__LIST__ = '.$name.';';$/;"	v
__ROOT__	ThinkPHP/Common/runtime.php	/^        define('__ROOT__',   (($_root=='\/' || $_root=='\\\\')?'':$_root));$/;"	d
__SELF__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        define('__SELF__',strip_tags($_SERVER['REQUEST_URI']));$/;"	d
__URL__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) );$/;"	d
__URL__	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) );$/;"	d
__call	ThinkPHP/Lib/Core/Action.class.php	/^    public function __call($method,$args) {$/;"	f
__call	ThinkPHP/Lib/Core/Cache.class.php	/^    public function __call($method,$args){$/;"	f
__call	ThinkPHP/Lib/Core/Model.class.php	/^    public function __call($method,$args) {$/;"	f
__construct	ThinkPHP/Lib/Core/Action.class.php	/^    public function __construct() {$/;"	f
__construct	ThinkPHP/Lib/Core/Behavior.class.php	/^    public function __construct() {$/;"	f
__construct	ThinkPHP/Lib/Core/Model.class.php	/^    public function __construct($name='',$tablePrefix='',$connection='') {$/;"	f
__construct	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    public function __construct($options=array()) {$/;"	f
__construct	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function __construct($config=''){$/;"	f
__construct	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function __construct($config=''){$/;"	f
__construct	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function __construct() {$/;"	f
__construct	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function __construct(){$/;"	f
__destruct	ThinkPHP/Lib/Core/Action.class.php	/^    public function __destruct() {$/;"	f
__destruct	ThinkPHP/Lib/Core/Db.class.php	/^    public function __destruct() {$/;"	f
__get	ThinkPHP/Lib/Core/Action.class.php	/^    public function __get($name) {$/;"	f
__get	ThinkPHP/Lib/Core/Behavior.class.php	/^    public function __get($name){$/;"	f
__get	ThinkPHP/Lib/Core/Cache.class.php	/^    public function __get($name) {$/;"	f
__get	ThinkPHP/Lib/Core/Model.class.php	/^    public function __get($name) {$/;"	f
__isset	ThinkPHP/Lib/Core/Action.class.php	/^    public function __isset($name) {$/;"	f
__isset	ThinkPHP/Lib/Core/Model.class.php	/^    public function __isset($name) {$/;"	f
__set	ThinkPHP/Lib/Core/Action.class.php	/^    public function __set($name,$value) {$/;"	f
__set	ThinkPHP/Lib/Core/Cache.class.php	/^    public function __set($name,$value) {$/;"	f
__set	ThinkPHP/Lib/Core/Model.class.php	/^    public function __set($name,$value) {$/;"	f
__unset	ThinkPHP/Lib/Core/Cache.class.php	/^    public function __unset($name) {$/;"	f
__unset	ThinkPHP/Lib/Core/Model.class.php	/^    public function __unset($name) {$/;"	f
_action	ThinkPHP/Common/common.php	/^    static $_action = array();$/;"	v
_after_db	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_db() {}$/;"	f
_after_delete	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_delete($data,$options) {}$/;"	f
_after_find	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_find(&$result,$options) {}$/;"	f
_after_insert	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_insert($data,$options) {}$/;"	f
_after_select	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_select(&$resultSet,$options) {}$/;"	f
_after_update	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _after_update($data,$options) {}$/;"	f
_alias	ThinkPHP/Common/common.php	/^        $_alias   =  array_merge($_alias,$alias);$/;"	v
_alias	ThinkPHP/Common/common.php	/^    static $_alias = array();$/;"	v
_assign	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _assign($attr,$content) {$/;"	f
_attr	ThinkPHP/Common/functions.php	/^        $_attr = array();$/;"	v
_auto	ThinkPHP/Lib/Core/Model.class.php	/^            $_auto   =   $this->_auto;$/;"	v
_auto	ThinkPHP/Lib/Core/Model.class.php	/^            $_auto   =   $this->options['auto'];$/;"	v
_auto	ThinkPHP/Lib/Core/Model.class.php	/^    protected $_auto            =   array();  \/\/ 自动完成定义$/;"	v
_before_insert	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _before_insert(&$data,$options) {}$/;"	f
_before_update	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _before_update(&$data,$options) {}$/;"	f
_before_write	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _before_write(&$data) {}$/;"	f
_between	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _between($attr,$content){$/;"	f
_cache	ThinkPHP/Common/functions.php	/^    static $_cache  = array();$/;"	v
_case	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _case($attr,$content) {$/;"	f
_checkTableInfo	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _checkTableInfo() {$/;"	f
_compare	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _compare($attr,$content,$type='eq') {$/;"	f
_config	ThinkPHP/Common/common.php	/^            $_config = array_merge($_config, array_change_key_case($array));$/;"	v
_config	ThinkPHP/Common/common.php	/^        $_config = array_merge($_config, array_change_key_case($name));$/;"	v
_config	ThinkPHP/Common/common.php	/^    static $_config = array();$/;"	v
_config	ThinkPHP/Lib/Core/Db.class.php	/^        static $_config = array();$/;"	v
_content	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^        $_content           =   empty($_data['content'])?$_data['file']:$_data['content'];$/;"	v
_css	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _css($attr,$content) {$/;"	f
_db	ThinkPHP/Lib/Core/Model.class.php	/^        static $_db = array();$/;"	v
_default	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _default($attr) {$/;"	f
_define	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _define($attr,$content) {$/;"	f
_defined	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _defined($attr,$content) {$/;"	f
_egt	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _egt($attr,$content) {$/;"	f
_else	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _else($attr) {$/;"	f
_elseif	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _elseif($attr,$content) {$/;"	f
_elt	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _elt($attr,$content) {$/;"	f
_empty	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _empty($attr,$content) {$/;"	f
_eq	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _eq($attr,$content) {$/;"	f
_equal	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _equal($attr,$content) {$/;"	f
_extModel	ThinkPHP/Lib/Core/Model.class.php	/^        $this->_extModel   = new $class($this->name);$/;"	v
_extModel	ThinkPHP/Lib/Core/Model.class.php	/^    private   $_extModel        =   null;$/;"	v
_facade	ThinkPHP/Lib/Core/Model.class.php	/^     protected function _facade($data) {$/;"	f
_field	ThinkPHP/Lib/Core/Model.class.php	/^                $_field         =   explode(',', $field);$/;"	v
_file	ThinkPHP/Common/common.php	/^    static $_file = array();$/;"	v
_filters	ThinkPHP/Common/common.php	/^        $_filters    =   explode(',',C('VAR_FILTERS'));$/;"	v
_for	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _for($attr, $content){$/;"	f
_foreach	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _foreach($attr,$content) {$/;"	f
_getDsnType	ThinkPHP/Lib/Core/Db.class.php	/^    protected function _getDsnType($dsn) {$/;"	f
_gt	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _gt($attr,$content) {$/;"	f
_handler	ThinkPHP/Lib/Core/Cache.class.php	/^        static $_handler = array($/;"	v
_heq	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _heq($attr,$content) {$/;"	f
_if	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _if($attr,$content) {$/;"	f
_import	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _import($attr,$content,$isFile=false,$type='') {$/;"	f
_importFiles	ThinkPHP/Common/common.php	/^    static $_importFiles = array();$/;"	v
_in	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _in($attr,$content) {$/;"	f
_info	Runtime/~runtime.php	/^<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_NAME') or define('APP_NAME','Webim'); defined('APP_PATH') or define('APP_PATH','.\/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/'); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('RUNTIME_PATH') or define('RUNTIME_PATH','.\/Runtime\/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','.\/Runtime\/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','\/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/'); defined('EXTEND_PATH') or define('EXTEND_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/'); defined('MODE_PATH') or define('MODE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Mode\/'); defined('ENGINE_PATH') or define('ENGINE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Engine\/'); defined('VENDOR_PATH') or define('VENDOR_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Vendor\/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Library\/'); defined('COMMON_PATH') or define('COMMON_PATH','.\/Common\/'); defined('LIB_PATH') or define('LIB_PATH','.\/Lib\/'); defined('CONF_PATH') or define('CONF_PATH','.\/Conf\/'); defined('LANG_PATH') or define('LANG_PATH','.\/Lang\/'); defined('TMPL_PATH') or define('TMPL_PATH','.\/Tpl\/'); defined('HTML_PATH') or define('HTML_PATH','.\/Html\/'); defined('LOG_PATH') or define('LOG_PATH','.\/Runtime\/Logs\/'); defined('TEMP_PATH') or define('TEMP_PATH','.\/Runtime\/Temp\/'); defined('DATA_PATH') or define('DATA_PATH','.\/Runtime\/Data\/'); defined('CACHE_PATH') or define('CACHE_PATH','.\/Runtime\/Cache\/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template='',$layer=''){ if(is_file($template)) { return $template; } if(false === strpos($template,':\/\/')){ $template = APP_NAME.':\/\/'.str_replace(':', '\/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $group = isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':''); $app = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); if(($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])){ $baseUrl = $list[$app].'\/'.$group.$layer.'\/'; }elseif(1==C('APP_GROUP_MODE')){ $baseUrl = dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/'; }else{ $baseUrl = TMPL_PATH.$group; } if('' == $file) { $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($file, '\/')){ $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file; } return $baseUrl.$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; default: return NULL; } if(C('VAR_FILTERS')) { $_filters = explode(',',C('VAR_FILTERS')); foreach($_filters as $_filter){ array_walk_recursive($input,$_filter); } } if(empty($name)) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $data = array_map($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])\/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("\/_([a-zA-Z])\/e", "strtoupper('\\\\1')", $name)); } else { return strtolower(trim(preg_replace("\/[A-Z]\/", "_\\\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array,$return=false){ foreach ($array as $file){ if (require_cache($file) && $return) return true; } if($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('\/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '\/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('\/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1); }elseif ('think' == strtolower($class_strut[0])){ $baseUrl = CORE_PATH; $class = substr($class,6); }elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; }else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('\/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@\/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if (is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); }elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } }elseif (is_array($alias)) { $_alias = array_merge($_alias,$alias); return; } return false; } function D($name='',$layer='') { if(empty($name)) return new Model; static $_model = array(); $layer = $layer?$layer:C('DEFAULT_M_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = C('DEFAULT_APP'); $name = $app.'\/'.$layer.'\/'.$name; } if(isset($_model[$name])) return $_model[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class)) { $model = new $class(basename($name)); }else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function A($name,$layer='',$common=false) { static $_action = array(); $layer = $layer?$layer:C('DEFAULT_C_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = '@'; $name = '@\/'.$layer.'\/'.$name; } if(isset($_action[$name])) return $_action[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif($common) { import(str_replace('@\/','',$name).$layer,LIB_PATH); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class,false)) { $action = new $class(); $_action[$name] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) { if(!empty($value) && $array = S('c_'.$value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name)); if(!empty($value)) { S('c_'.$value,$_config); } return; } return null; } function tag($tag, &$params=NULL) { $extends = C('extends.' . $tag); $tags = C('tags.' . $tag); if (!empty($tags)) { if(empty($tags['_overlay']) && !empty($extends)) { $tags = array_unique(array_merge($extends,$tags)); }elseif(isset($tags['_overlay'])){ unset($tags['_overlay']); } }elseif(!empty($extends)) { $tags = $extends; } if($tags) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach ($tags as $key=>$name) { if(!is_int($key)) { $name = $key; } B($name, $params); } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } }else{ return false; } } function add_tag_behavior($tag,$behavior,$path='') { $array = C('tags.'.$tag); if(!$array) { $array = array(); } if($path) { $array[$behavior] = $path; }else{ $array[] = $behavior; } C('tags.'.$tag,$array); } function B($name, &$params=NULL) { if(strpos($name,'\/')){ list($name,$method) = explode('\/',$name); }else{ $method = 'run'; } $class = $name.'Behavior'; if(APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if(APP_DEBUG) { G('behaviorEnd'); trace($name.' Behavior ::'.$method.' [ RunTime:'.G('behaviorStart','behaviorEnd',6).'s ]','','INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); if('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if(!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info,$level,$record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think','fatalError')); set_error_handler(array('Think','appError')); set_exception_handler(array('Think','appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return ; } public static function autoload($class) { if(alias_import($class)) return ; $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':''; $file = $class.'.class.php'; if(substr($class,-8)=='Behavior') { if(require_array(array( CORE_PATH.'Behavior\/'.$file, EXTEND_PATH.'Behavior\/'.$file, LIB_PATH.'Behavior\/'.$file, $libPath.'Behavior\/'.$file),true) || (defined('MODE_NAME') && require_cache(MODE_PATH.ucwords(MODE_NAME).'\/Behavior\/'.$file))) { return ; } }elseif(substr($class,-5)=='Model'){ if(require_array(array( LIB_PATH.'Model\/'.$group.$file, $libPath.'Model\/'.$file, EXTEND_PATH.'Model\/'.$file),true)) { return ; } }elseif(substr($class,-6)=='Action'){ if(require_array(array( LIB_PATH.'Action\/'.$group.$file, $libPath.'Action\/'.$file, EXTEND_PATH.'Action\/'.$file),true)) { return ; } }elseif(substr($class,0,5)=='Cache'){ if(require_array(array( EXTEND_PATH.'Driver\/Cache\/'.$file, CORE_PATH.'Driver\/Cache\/'.$file),true)){ return ; } }elseif(substr($class,0,2)=='Db'){ if(require_array(array( EXTEND_PATH.'Driver\/Db\/'.$file, CORE_PATH.'Driver\/Db\/'.$file),true)){ return ; } }elseif(substr($class,0,8)=='Template'){ if(require_array(array( EXTEND_PATH.'Driver\/Template\/'.$file, CORE_PATH.'Driver\/Template\/'.$file),true)){ return ; } }elseif(substr($class,0,6)=='TagLib'){ if(require_array(array( EXTEND_PATH.'Driver\/TagLib\/'.$file, CORE_PATH.'Driver\/TagLib\/'.$file),true)) { return ; } } $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'.'.$class)) return ; } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('throw_exception'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'],Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { if(C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt')?halt($e):exit('ERROR:'.$e['message']); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); public function __construct() { if(!empty($this->options)) { foreach ($this->options as $name=>$val){ if(NULL !== C($name)) { $this->options[$name] = C($name); }else{ C($name,$val); } } array_change_key_case($this->options); } } public function __get($name){ return $this->options[strtolower($name)]; } abstract public function run(&$params); } class ReadHtmlCacheBehavior extends Behavior { protected $options = array( 'HTML_CACHE_ON' => false, 'HTML_CACHE_TIME' => 60, 'HTML_CACHE_RULES' => array(), 'HTML_FILE_SUFFIX' => '.html', ); public function run(&$params){ if(C('HTML_CACHE_ON')) { $cacheTime = $this->requireHtmlCache(); if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { readfile(HTML_FILE_NAME); exit(); } } } static private function requireHtmlCache() { $htmls = C('HTML_CACHE_RULES'); if(!empty($htmls)) { $htmls = array_change_key_case($htmls); $moduleName = strtolower(MODULE_NAME); $actionName = strtolower(ACTION_NAME); if(isset($htmls[$moduleName.':'.$actionName])) { $html = $htmls[$moduleName.':'.$actionName]; }elseif(isset($htmls[$moduleName.':'])){ $html = $htmls[$moduleName.':']; }elseif(isset($htmls[$actionName])){ $html = $htmls[$actionName]; }elseif(isset($htmls['*'])){ $html = $htmls['*']; }elseif(isset($htmls['empty:index']) && !class_exists(MODULE_NAME.'Action')){ $html = $htmls['empty:index']; }elseif(isset($htmls[$moduleName.':_empty']) && $this->isEmptyAction(MODULE_NAME,ACTION_NAME)){ $html = $htmls[$moduleName.':_empty']; } if(!empty($html)) { $rule = $html[0]; $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule); $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule); $rule = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule); $rule = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule); $rule = str_ireplace( array('{:app}','{:module}','{:action}','{:group}'), array(APP_NAME,MODULE_NAME,ACTION_NAME,defined('GROUP_NAME')?GROUP_NAME:''), $rule); $rule = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule); if(!empty($html[2])) $rule = $html[2]($rule); $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX')); return $cacheTime; } } return false; } static public function checkHTMLCache($cacheFile='',$cacheTime='') { if(!is_file($cacheFile)){ return false; }elseif (filemtime(C('TEMPLATE_NAME')) > filemtime($cacheFile)) { return false; }elseif(!is_numeric($cacheTime) && function_exists($cacheTime)){ return $cacheTime($cacheFile); }elseif ($cacheTime != 0 && NOW_TIME > filemtime($cacheFile)+$cacheTime) { return false; } return true; } static private function isEmptyAction($module,$action) { $className = $module.'Action'; $class = new $className; return !method_exists($class,$action); } } class CheckRouteBehavior extends Behavior { protected $options = array( 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array(), ); public function run(&$return){ $regx = trim($_SERVER['PATH_INFO'],'\/'); if(empty($regx)) return $return = true; if(!C('URL_ROUTER_ON')) return $return = false; $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { $depr = C('URL_PATHINFO_DEPR'); $regx = str_replace($depr,'\/',$regx); foreach ($routes as $rule=>$route){ if(0===strpos($rule,'\/') && preg_match($rule,$regx,$matches)) { return $return = $this->parseRegex($matches,$route,$regx); }else{ $len1 = substr_count($regx,'\/'); $len2 = substr_count($rule,'\/'); if($len1>=$len2) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = $this->checkUrlMatch($regx,$rule); if($match) return $return = $this->parseRule($rule,$route,$regx); } } } } $return = false; } private function checkUrlMatch($regx,$rule) { $m1 = explode('\/',$regx); $m2 = explode('\/',$rule); $match = true; foreach ($m2 as $key=>$val){ if(':' == substr($val,0,1)) { if(strpos($val,'\\\\')) { $type = substr($val,-1); if('d'==$type && !is_numeric($m1[$key])) { $match = false; break; } }elseif(strpos($val,'^')){ $array = explode('|',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { $match = false; break; } } }elseif(0 !== strcasecmp($val,$m1[$key])){ $match = false; break; } } return $match; } private function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('\/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'\/')){ $path = explode('\/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_GROUP')] = array_pop($path); } } return $var; } private function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('\/',$regx); $matches = array(); $rule = explode('\/',$rule); foreach ($rule as $item){ if(0===strpos($item,':')) { if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if($paths) { preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url); if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace('@(\\w+)\\\/([^,\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', $regx); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } } class ParseTemplateBehavior extends Behavior { protected $options = array( 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', ); public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { extract($_data['var'], EXTR_OVERWRITE); include C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'); }else{ $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ $class = 'Template'.ucwords($engine); if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { throw_exception(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > filemtime($tmplCacheFile)) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(is_file(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } } class ContentReplaceBehavior extends Behavior { protected $options = array( 'TMPL_PARSE_STRING' => array(), ); public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '..\/Public' => APP_TMPL_PATH.'Public', '__PUBLIC__' => __ROOT__.'\/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } } class TokenBuildBehavior extends Behavior { protected $options = array( 'TOKEN_ON' => false, 'TOKEN_NAME' => '__hash__', 'TOKEN_TYPE' => 'md5', 'TOKEN_RESET' => true, ); public function run(&$content){ if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $content = str_replace('{__TOKEN__}',$this->buildToken(),$content); }elseif(preg_match('\/<\\\/form(\\s*)>\/is',$content,$match)) { $content = str_replace($match[0],$this->buildToken().$match[0],$content); } }else{ $content = str_replace('{__TOKEN__}','',$content); } } private function buildToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5($_SERVER['REQUEST_URI']); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>'; return $token; } } class WriteHtmlCacheBehavior extends Behavior { public function run(&$content){ if(C('HTML_CACHE_ON') && defined('HTML_FILE_NAME')) { if(!is_dir(dirname(HTML_FILE_NAME))) mkdir(dirname(HTML_FILE_NAME),0755,true); if( false === file_put_contents( HTML_FILE_NAME , $content )) throw_exception(L('_CACHE_WRITE_ERROR_').':'.HTML_FILE_NAME); } } } class ShowRuntimeBehavior extends Behavior { protected $options = array( 'SHOW_RUN_TIME' => false, 'SHOW_ADV_TIME' => false, 'SHOW_DB_TIMES' => false, 'SHOW_CACHE_TIMES' => false, 'SHOW_USE_MEM' => false, 'SHOW_LOAD_FILE' => false, 'SHOW_FUN_TIMES' => false , ); public function run(&$content){ if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024).' kb'; } if(C('SHOW_LOAD_FILE')) { $showTime .= ' | LoadFile:'.count(get_included_files()); } if(C('SHOW_FUN_TIMES')) { $fun = get_defined_functions(); $showTime .= ' | CallFun:'.count($fun['user']).','.count($fun['internal']); } return $showTime; } } class ShowPageTraceBehavior extends Behavior { protected $options = array( 'SHOW_PAGE_TRACE' => false, 'TRACE_PAGE_TABS' => array('BASE'=>'基本','FILE'=>'文件','INFO'=>'流程','ERR|NOTIC'=>'错误','SQL'=>'SQL','DEBUG'=>'调试'), 'PAGE_TRACE_SAVE' => false, ); public function run(&$params){ if(!IS_AJAX && C('SHOW_PAGE_TRACE')) { echo $this->showTrace(); } } private function showTrace() { $files = get_included_files(); $info = array(); foreach ($files as $key=>$file){ $info[] = $file.' ( '.number_format(filesize($file)\/1024,2).' KB )'; } $trace = array(); $base = array( '请求信息' => date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']).' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_METHOD'].' : '.__SELF__, '运行时间' => $this->showTime(), '吞吐率' => number_format(1\/G('beginTime','viewEndTime'),2).'req\/s', '内存开销' => MEMORY_LIMIT_ON?number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024,2).' kb':'不支持', '查询信息' => N('db_query').' queries '.N('db_write').' writes ', '文件加载' => count(get_included_files()), '缓存信息' => N('cache_read').' gets '.N('cache_write').' writes ', '配置加载' => count(c()), '会话信息' => 'SESSION_ID='.session_id(), ); $traceFile = CONF_PATH.'trace.php'; if(is_file($traceFile)) { $base = array_merge($base,include $traceFile); } $debug = trace(); $tabs = C('TRACE_PAGE_TABS'); foreach ($tabs as $name=>$title){ switch(strtoupper($name)) { case 'BASE': $trace[$title] = $base; break; case 'FILE': $trace[$title] = $info; break; default: $name = strtoupper($name); if(strpos($name,'|')) { $array = explode('|',$name); $result = array(); foreach($array as $name){ $result += isset($debug[$name])?$debug[$name]:array(); } $trace[$title] = $result; }else{ $trace[$title] = isset($debug[$name])?$debug[$name]:''; } } } if($save = C('PAGE_TRACE_SAVE')) { if(is_array($save)) { $tabs = C('TRACE_PAGE_TABS'); $array = array(); foreach ($save as $tab){ $array[] = $tabs[$tab]; } } $content = date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n"; foreach ($trace as $key=>$val){ if(!isset($array) || in_array($key,$array)) { $content .= '[ '.$key." ]\\r\\n"; if(is_array($val)) { foreach ($val as $k=>$v){ $content .= (!is_numeric($k)?$k.':':'').print_r($v,true)."\\r\\n"; } }else{ $content .= print_r($val,true)."\\r\\n"; } $content .= "\\r\\n"; } } error_log(str_replace('<br\/>',"\\r\\n",$content), Log::FILE,LOG_PATH.date('y_m_d').'_trace.log'); } unset($files,$info,$base); ob_start(); include C('TMPL_TRACE_FILE')?C('TMPL_TRACE_FILE'):THINK_PATH.'Tpl\/page_trace.tpl'; return ob_get_clean(); } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); return G('beginTime','viewEndTime').'s ( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } }alias_import(array ( 'Model' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Model.class.php', 'Db' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Db.class.php', 'Log' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Log.class.php', 'ThinkTemplate' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/ThinkTemplate.class.php', 'TagLib' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/TagLib.class.php', 'Cache' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Cache.class.php', 'Widget' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Widget.class.php', 'TagLibCx' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Driver\/TagLib\/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type='ThinkException', $code=0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _404($msg='',$url='') { APP_DEBUG && throw_exception($msg); if($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if(empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if($url) { redirect($url); }else{ send_http_status(404); exit; } } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if(false === strpos($key,'*') && 0=== strpos($url,$rule[0])) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule[0])); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); if($url) { if(0=== strpos($url,'\/')) { $route = true; $url = substr($url,1); if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } }else{ if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $var[C('VAR_ACTION')] = !empty($path)?array_pop($path):ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path)?array_pop($path):MODULE_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if($action = array_search(strtolower($var[C('VAR_ACTION')]),$maps)){ $var[C('VAR_ACTION')] = $action; } } } if($maps = C('URL_MODULE_MAP')) { if($module = array_search(strtolower($var[C('VAR_MODULE')]),$maps)){ $var[C('VAR_MODULE')] = $module; } } if(C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if(!C('APP_SUB_DOMAIN_DEPLOY') && C('APP_GROUP_LIST')) { if(!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; }else{ if(GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')]= GROUP_NAME; } } if(C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.http_build_query(array_reverse($var)); if(!empty($vars)) { $vars = urldecode(http_build_query($vars)); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'\/'.rtrim($url,$depr); }else{ $url = __APP__.'\/'.implode($depr,array_reverse($var)); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '\/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url; } if($redirect) redirect($url); else return $url; } function W($name, $data=array(), $return=false,$path='') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget\/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter\/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\\n", "\\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function cache($name,$value='',$options=null){ return S($name,$value,$options); } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name,'*')?array_map("unlink", glob($filename)):unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir,0755,true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\\"{$value}\\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "<\/{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\\"{$key}\\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "<\/{$key}>"; } return $xml; } function session($name,$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $class = 'Session'. ucwords(strtolower(C('SESSION_TYPE'))); if(require_cache(EXTEND_PATH.'Driver\/Session\/'.$class.'.class.php')) { $hander = new $class(); $hander->execute(); }else { throw_exception(L('_CLASS_NOT_EXIST_').': ' . $class); } } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if(C('LOAD_EXT_FILE')) { $files = explode(',',C('LOAD_EXT_FILE')); foreach ($files as $file){ $file = COMMON_PATH.$file.'.php'; if(is_file($file)) include $file; } } if(C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = CONF_PATH.$config.'.php'; if(is_file($file)) { is_numeric($key)?C(include $file):C($key,include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP\/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\\r\\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n".implode('',self::$log)."\\r\\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\\r\\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if(isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '\/' || $url == '\\\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; }else{ $subDomain = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.'))); define('SUB_DOMAIN',$subDomain); if($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*'])){ if('www' != $subDomain && !in_array($subDomain,C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if(!empty($rule)) { $array = explode('\/',$rule[0]); $module = array_pop($array); if(!empty($module)) { $_GET[C('VAR_MODULE')] = $module; $domainModule = true; } if(!empty($array)) { $_GET[C('VAR_GROUP')] = array_pop($array); $domainGroup = true; } if(isset($rule[1])) { parse_str($rule[1],$parms); $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if(!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension'])?strtolower($part['extension']):''); if(__EXT__){ if(C('URL_DENY_SUFFIX') && preg_match('\/\\.('.trim(C('URL_DENY_SUFFIX'),'.').')$\/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } if(C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('\/\\.('.trim(C('URL_HTML_SUFFIX'),'.').')$\/i', '', $_SERVER['PATH_INFO']); }else{ $_SERVER['PATH_INFO'] = preg_replace('\/.'.__EXT__.'$\/i','',$_SERVER['PATH_INFO']); } } if(!self::routerCheck()){ $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/')); if(C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])){ $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]),explode(',',strtolower(C('APP_GROUP_LIST'))))? array_shift($paths) : ''; if(C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]),explode(',',strtolower(C('APP_GROUP_DENY'))))) { exit; } } if(!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[\\'\\\\1\\']=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); $_GET = array_merge($var,$_GET); } define('__INFO__',$_SERVER['PATH_INFO']); }else{ define('__INFO__',''); } define('__SELF__',strip_tags($_SERVER['REQUEST_URI'])); define('__APP__',strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH); if(defined('GROUP_NAME')) { C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'\/'); if(1 == C('APP_GROUP_MODE')){ $config_path = BASE_LIB_PATH.'Conf\/'; $common_path = BASE_LIB_PATH.'Common\/'; }else{ $config_path = CONF_PATH.GROUP_NAME.'\/'; $common_path = COMMON_PATH.GROUP_NAME.'\/'; } if(is_file($config_path.'config.php')) C(include $config_path.'config.php'); if(is_file($config_path.'alias.php')) alias_import(include $config_path.'alias.php'); if(is_file($config_path.'tags.php')) C('tags', include $config_path.'tags.php'); if(is_file($common_path.'function.php')) include $common_path.'function.php'; }else{ C('CACHE_PATH',CACHE_PATH); } define('MODULE_NAME',self::getModule(C('VAR_MODULE'))); define('ACTION_NAME',self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME; if(defined('GROUP_NAME')) { define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); }else{ define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static public function routerCheck() { $return = false; tag('route_check',$return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return $maps[MODULE_ALIAS]; }elseif(array_search(strtolower($module),$maps)){ return ''; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module,1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); return $maps[ACTION_ALIAS]; }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE')?strtolower($action):$action); } static private function getGroup($var) { $group = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ?ucfirst(strtolower($group)):$group); } } class App { static public function init() { if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if(C('VAR_FILTERS')) { $filters = explode(',',C('VAR_FILTERS')); foreach($filters as $filter){ array_walk_recursive($_POST,$filter); array_walk_recursive($_GET,$filter); } } C('LOG_PATH',realpath(LOG_PATH).'\/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('\/^[A-Za-z](\\w)*$\/',MODULE_NAME)){ $module = false; }else{ $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : ''; $module = A($group.MODULE_NAME); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == MODULE_NAME) { header("Content-type:image\/png"); exit(base64_decode(App::logo())); } if(function_exists('__hack_module')) { $module = __hack_module(); if(!is_object($module)) { return ; } }else{ $module = A($group.'Empty'); if(!$module){ _404(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } } } $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME; $action .= C('ACTION_SUFFIX'); try{ if(!preg_match('\/^[A-Za-z](\\w)*$\/',$action)){ throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if($method->isPublic()) { $class = new ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if(C('URL_PARAMS_BIND') && $method->getNumberOfParameters()>0){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param){ $name = $param->getName(); if(isset($vars[$name])) { $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ throw_exception(L('_PARAM_ERROR_').':'.$name); } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw\/eHBhY2tldCBiZWdpbj0i77u\/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw\/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk\/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7\/v\/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+\/OEQ4+obQn5D+4Ubb22+YOGsWi\/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9\/W4H3iNSQqIe09O196dLKX7d1O39OViP\/wthtkND62if\/wj\/DbMpph8BY\/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy\/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z\/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB\/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc\/AOuXiwH07VCS3w5+UQMAuF\/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5\/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8\/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR\/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5\/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v\/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ\/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh\/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE\/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC\/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm\/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr\/XKm0ZofKSI2Q\/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0\/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W\/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc\/i3jJSAwhgfFlp20laMLOku\/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi\/MubUA\/mCT4Fhf038PC8XplhWnCmnK\/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2\/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9\/y5i\/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0\/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk\/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p\/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru\/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl\/tFILYwGPjXWO3zOfSq\/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t\/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX\/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay\/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV\/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1\/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v\/8jG\/fZX\/IW5MKPKtjSYlt0ellxh+\/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL\/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5\/1H3gaNmMpn8Fz0GpYFp6Zw615H\/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc\/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn\/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C\/P\/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq\/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs\/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk\/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS\/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh\/eMDzHEzGYu0Lg8gJ7oS\/tFCwoic44fyUtix0n\/46vP4bf+\/\/BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application\/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text\/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application\/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text\/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } return $template; } $template = str_replace(':', '\/', $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '\/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($template, '\/')){ $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '\/':''; } } L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => false, 'app_autoload_path' => '', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => '', 'app_group_mode' => 0, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '\/', 'cookie_prefix' => '', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => '', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => '', 'db_prefix' => 'think_', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '.\/Runtime\/Temp\/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '页面错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => false, 'trace_exception' => false, 'log_record' => false, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text\/html', 'tmpl_action_error' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_action_success' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_exception_file' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_file_depr' => '\/', 'url_case_insensitive' => false, 'url_model' => 1, 'url_pathinfo_depr' => '\/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => 'html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'extends' => array ( 'app_init' => array ( ), 'app_begin' => array ( 0 => 'ReadHtmlCache', ), 'route_check' => array ( 0 => 'CheckRoute', ), 'app_end' => array ( ), 'path_info' => array ( ), 'action_begin' => array ( ), 'action_end' => array ( ), 'view_begin' => array ( ), 'view_parse' => array ( 0 => 'ParseTemplate', ), 'view_filter' => array ( 0 => 'ContentReplace', 1 => 'TokenBuild', 2 => 'WriteHtmlCache', 3 => 'ShowRuntime', ), 'view_end' => array ( 0 => 'ShowPageTrace', ), ), ));G('loadTime');Think::Start();/;"	v
_info	ThinkPHP/Common/common.php	/^    static $_info       =   array();$/;"	v
_initialize	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _initialize() {}$/;"	f
_instance	ThinkPHP/Common/functions.php	/^    static $_instance = array();$/;"	v
_instance	ThinkPHP/Lib/Core/Think.class.php	/^    private static $_instance = array();$/;"	v
_iterateParseCache	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        static $_iterateParseCache = array();$/;"	v
_js	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _js($attr,$content) {$/;"	f
_lang	ThinkPHP/Common/common.php	/^        $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER));$/;"	v
_lang	ThinkPHP/Common/common.php	/^    static $_lang = array();$/;"	v
_linkID	ThinkPHP/Lib/Core/Db.class.php	/^            $this->_linkID = $this->multiConnect($master);$/;"	v
_linkID	ThinkPHP/Lib/Core/Db.class.php	/^            if ( !$this->connected ) $this->_linkID = $this->connect();$/;"	v
_linkID	ThinkPHP/Lib/Core/Db.class.php	/^    protected $_linkID    = null;$/;"	v
_linkID	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $this->_linkID = null;$/;"	v
_linkID	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $this->_linkID = null;$/;"	v
_linkNum	ThinkPHP/Lib/Core/Model.class.php	/^        static $_linkNum    =   array();$/;"	v
_load	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _load($attr,$content) {$/;"	f
_lt	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _lt($attr,$content) {$/;"	f
_map	ThinkPHP/Lib/Core/Model.class.php	/^    protected $_map             =   array();  \/\/ 字段映射定义$/;"	v
_mem	ThinkPHP/Common/common.php	/^    static $_mem        =   array();$/;"	v
_model	ThinkPHP/Common/common.php	/^    static $_model  =   array();$/;"	v
_model	ThinkPHP/Common/common.php	/^    static $_model  = array();$/;"	v
_neq	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _neq($attr,$content) {$/;"	f
_nheq	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _nheq($attr,$content) {$/;"	f
_notbetween	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notbetween($attr,$content){$/;"	f
_notdefined	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notdefined($attr,$content) {$/;"	f
_notempty	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notempty($attr,$content) {$/;"	f
_notequal	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notequal($attr,$content) {$/;"	f
_notin	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notin($attr,$content) {$/;"	f
_notpresent	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _notpresent($attr,$content) {$/;"	f
_num	ThinkPHP/Common/common.php	/^    static $_num    = array();$/;"	v
_options_filter	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _options_filter(&$options) {}$/;"	f
_parseOptions	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _parseOptions($options=array()) {$/;"	f
_parseType	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _parseType(&$data,$key) {$/;"	f
_php	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _php($attr,$content) {$/;"	f
_present	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _present($attr,$content) {$/;"	f
_range	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _range($attr,$content,$type='in') {$/;"	f
_root	ThinkPHP/Common/runtime.php	/^            $_root = dirname(_PHP_FILE_);$/;"	v
_root	ThinkPHP/Common/runtime.php	/^            $_root = dirname(dirname(_PHP_FILE_));$/;"	v
_root	ThinkPHP/Common/runtime.php	/^        define('__ROOT__',   (($_root=='\/' || $_root=='\\\\')?'':$_root));$/;"	v
_scope	ThinkPHP/Lib/Core/Model.class.php	/^    protected $_scope           =   array();  \/\/ 命名范围定义$/;"	v
_sql	ThinkPHP/Lib/Core/Model.class.php	/^    public function _sql(){$/;"	f
_status	ThinkPHP/Common/functions.php	/^    static $_status = array($/;"	v
_switch	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _switch($attr,$content) {$/;"	f
_temp	ThinkPHP/Common/runtime.php	/^            $_temp  = explode('.php',$_SERVER['PHP_SELF']);$/;"	v
_trace	ThinkPHP/Common/common.php	/^    static $_trace =  array();$/;"	v
_validate	ThinkPHP/Lib/Core/Model.class.php	/^            $_validate   =   $this->_validate;$/;"	v
_validate	ThinkPHP/Lib/Core/Model.class.php	/^            $_validate   =   $this->options['validate'];$/;"	v
_validate	ThinkPHP/Lib/Core/Model.class.php	/^    protected $_validate        =   array();  \/\/ 自动验证定义$/;"	v
_validationField	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _validationField($data,$val) {$/;"	f
_validationFieldItem	ThinkPHP/Lib/Core/Model.class.php	/^    protected function _validationFieldItem($data,$val) {$/;"	f
_varParseList	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        static $_varParseList = array();$/;"	v
_volist	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    public function _volist($attr,$content) {$/;"	f
action	ThinkPHP/Common/common.php	/^        $action             =   new $class();$/;"	v
action	ThinkPHP/Common/common.php	/^    $action =   $info['basename'];$/;"	v
action	ThinkPHP/Lib/Core/App.class.php	/^        $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME;$/;"	v
action	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $action   = !empty($_POST[$var]) ?$/;"	v
action	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $action =   array_pop($path);$/;"	v
actionName	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^            $actionName = strtolower(ACTION_NAME);$/;"	v
add	ThinkPHP/Lib/Core/Model.class.php	/^    public function add($data='',$options=array(),$replace=false) {$/;"	f
addAll	ThinkPHP/Lib/Core/Model.class.php	/^    public function addAll($dataList,$options=array(),$replace=false){$/;"	f
add_tag_behavior	ThinkPHP/Common/common.php	/^function add_tag_behavior($tag,$behavior,$path='') {$/;"	f
after	ThinkPHP/Lib/Core/App.class.php	/^                    $after =   $class->getMethod('_after_'.$action);$/;"	v
ajaxReturn	ThinkPHP/Lib/Core/Action.class.php	/^    protected function ajaxReturn($data,$type='') {$/;"	f
alias	ThinkPHP/Common/runtime.php	/^    $alias      = include THINK_PATH.'Conf\/alias.php';$/;"	v
alias	ThinkPHP/Lib/Core/Think.class.php	/^            $alias = include CONF_PATH.'alias.php';$/;"	v
alias	ThinkPHP/Lib/Core/Think.class.php	/^            $alias = is_array($mode['alias'])?$mode['alias']:include $mode['alias'];$/;"	v
alias_import	ThinkPHP/Common/common.php	/^function alias_import($alias, $classfile='') {$/;"	f
anchor	ThinkPHP/Common/functions.php	/^        $anchor =   $info['fragment'];$/;"	v
app	ThinkPHP/Common/common.php	/^        $app        =   C('DEFAULT_APP');$/;"	v
app	ThinkPHP/Common/common.php	/^        $app    =   $info['scheme'];$/;"	v
app	ThinkPHP/Common/common.php	/^        $app    =   '@';$/;"	v
appError	ThinkPHP/Lib/Core/Think.class.php	/^    static public function appError($errno, $errstr, $errfile, $errline) {$/;"	f
appException	ThinkPHP/Lib/Core/Think.class.php	/^    static public function appException($e) {$/;"	f
args	ThinkPHP/Lib/Core/Action.class.php	/^            $args           =   func_get_args();$/;"	v
args	ThinkPHP/Lib/Core/Db.class.php	/^        $args = func_get_args();$/;"	v
args	ThinkPHP/Lib/Core/Model.class.php	/^                            $args = isset($auto[4])?(array)$auto[4]:array();$/;"	v
args	ThinkPHP/Lib/Core/Model.class.php	/^                $args = isset($val[6])?(array)$val[6]:array();$/;"	v
args	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $args = explode('=',$varArray[$i],2);$/;"	v
arr	ThinkPHP/Common/functions.php	/^        $arr    =   explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);$/;"	v
array	ThinkPHP/Common/common.php	/^        $array  =  array();$/;"	v
array	ThinkPHP/Common/common.php	/^        if(!empty($value) && $array = S('c_'.$value)) {$/;"	v
array	ThinkPHP/Common/common.php	/^    $array      =  C('tags.'.$tag);$/;"	v
array	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $array   =  explode('|',substr(strstr($val,'^'),1));$/;"	v
array	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                        $array  =   explode('|',$name);$/;"	v
array	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                $array  =   array();$/;"	v
array	ThinkPHP/Lib/Core/Db.class.php	/^                        $array =  explode('&',$key);$/;"	v
array	ThinkPHP/Lib/Core/Db.class.php	/^                        $array =  explode('|',$key);$/;"	v
array	ThinkPHP/Lib/Core/Db.class.php	/^                $array   =  array();$/;"	v
array	ThinkPHP/Lib/Core/Db.class.php	/^            $array   =  array();$/;"	v
array	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $array  =   explode('\/',$rule[0]);$/;"	v
array	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $array      =   explode(',',$file);$/;"	v
array	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $array =  explode(',',$file);$/;"	v
array	ThinkPHP/Lib/Template/TagLib.class.php	/^        $array  =   array_change_key_case($xml['@attributes']);$/;"	v
array	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $array      =   $this->parseXmlAttrs($include);$/;"	v
array	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $array          =   $this->parseXmlAttrs($matches[1]);$/;"	v
array	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $array      =   $this->parseXmlAttrs($matches[1]);$/;"	v
array	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $array      =   array_change_key_case($xml['@attributes']);$/;"	v
array	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $array  =   explode(',',$templateName);$/;"	v
array_define	ThinkPHP/Common/common.php	/^function array_define($array,$check=true) {$/;"	f
assign	ThinkPHP/Lib/Core/Action.class.php	/^    protected function assign($name,$value='') {$/;"	f
assign	ThinkPHP/Lib/Core/View.class.php	/^    public function assign($name,$value=''){$/;"	f
attr	ThinkPHP/Common/functions.php	/^            $id && $attr = " {$id}=\\"{$key}\\"";$/;"	v
attr	ThinkPHP/Common/functions.php	/^        $attr = implode(' ', $_attr);$/;"	v
attr	ThinkPHP/Common/functions.php	/^    $attr   = empty($attr) ? '' : " {$attr}";$/;"	v
attr	ThinkPHP/Common/functions.php	/^    $attr   = trim($attr);$/;"	v
attr	ThinkPHP/Lib/Template/TagLib.class.php	/^        $attr   =   str_replace('&','___', $attr);$/;"	v
attr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $attr   =  str_replace('\\"','\\'',$attr);$/;"	v
attr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $attr   = stripslashes($attr);$/;"	v
attrs	ThinkPHP/Lib/Template/TagLib.class.php	/^            $attrs  = explode(',',$this->tags[strtolower($tag)]['attr']);$/;"	v
autoBuildVar	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function autoBuildVar($name) {$/;"	f
autoCheckFields	ThinkPHP/Lib/Core/Model.class.php	/^    protected $autoCheckFields  =   true;$/;"	v
autoCheckToken	ThinkPHP/Lib/Core/Model.class.php	/^    public function autoCheckToken($data) {$/;"	f
autoFree	ThinkPHP/Lib/Core/Db.class.php	/^    protected $autoFree   = false;$/;"	v
autoOperation	ThinkPHP/Lib/Core/Model.class.php	/^    private function autoOperation(&$data,$type) {$/;"	f
autoValidation	ThinkPHP/Lib/Core/Model.class.php	/^    protected function autoValidation($data,$type) {$/;"	f
autoload	ThinkPHP/Lib/Core/Think.class.php	/^    public static function autoload($class) {$/;"	f
base	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^            $base   =   array_merge($base,include $traceFile);$/;"	v
base	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $base   =   array($/;"	v
basePath	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^	                      $basePath   =   TMPL_PATH.'\/'.$group.'\/'.(THEME_NAME?THEME_NAME.'\/':'');$/;"	v
basePath	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^	                      $basePath   =   dirname(BASE_LIB_PATH).'\/'.$group.'\/'.basename(TMPL_PATH).'\/'.(THEME_NAME?THEME_NAME.'\/':'');$/;"	v
basePath	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $basePath   =   THEME_PATH;$/;"	v
basePath	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $basePath = dirname($basePath).'\/'.array_pop($path).'\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl    =   $list[$app].'\/'.$group.$layer.'\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl    =   TMPL_PATH.$group;$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl    =   dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl    = COMMON_PATH;$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl    = EXTEND_PATH . 'Function\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl = CORE_PATH;$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl = LIBRARY_PATH;$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^            $baseUrl = dirname($libPath);$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^        $baseUrl    =   $list[$app];$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^        $baseUrl    =   $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/';$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^        $baseUrl = VENDOR_PATH;$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^function import($class, $baseUrl = '', $ext='.class.php') {$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^function load($name, $baseUrl='', $ext='.php') {$/;"	v
baseUrl	ThinkPHP/Common/common.php	/^function vendor($class, $baseUrl = '', $ext='.php') {$/;"	v
basepath	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $basepath   =   !empty($tag['basepath'])?$tag['basepath']:__ROOT__.'\/Public';$/;"	v
before	ThinkPHP/Lib/Core/App.class.php	/^                    $before =   $class->getMethod('_before_'.$action);$/;"	v
begin	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $begin      =   $this->config['taglib_begin'];$/;"	v
behavior	ThinkPHP/Common/common.php	/^    $behavior   = new $class();$/;"	v
bind	ThinkPHP/Lib/Core/Db.class.php	/^        $bind           =   array_merge($this->bind,$bind);$/;"	v
bind	ThinkPHP/Lib/Core/Db.class.php	/^        $this->bind     =   array();$/;"	v
bind	ThinkPHP/Lib/Core/Db.class.php	/^    protected $bind       = array();$/;"	v
bindParam	ThinkPHP/Lib/Core/Db.class.php	/^    protected function bindParam($name,$value){$/;"	f
block	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private     $block           =   array();$/;"	v
buildApp	ThinkPHP/Lib/Core/Think.class.php	/^    static private function buildApp() {$/;"	f
buildHtml	ThinkPHP/Lib/Core/Action.class.php	/^    protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') {$/;"	f
buildSelectSql	ThinkPHP/Lib/Core/Db.class.php	/^    public function buildSelectSql($options=array()) {$/;"	f
buildSql	ThinkPHP/Lib/Core/Model.class.php	/^    public function buildSql($options=array()) {$/;"	f
buildToken	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^    private function buildToken() {$/;"	f
build_app_dir	ThinkPHP/Common/runtime.php	/^function build_app_dir() {$/;"	f
build_dir_secure	ThinkPHP/Common/runtime.php	/^function build_dir_secure($dirs='') {$/;"	f
build_first_action	ThinkPHP/Common/runtime.php	/^function build_first_action() {$/;"	f
build_runtime_cache	ThinkPHP/Common/runtime.php	/^function build_runtime_cache($append='') {$/;"	f
build_tags_cache	ThinkPHP/Common/runtime.php	/^function build_tags_cache() {$/;"	f
cache	ThinkPHP/Common/functions.php	/^        $cache      =   Cache::getInstance($type,$name);$/;"	v
cache	ThinkPHP/Common/functions.php	/^        $cache      =   Cache::getInstance($type,$options);$/;"	v
cache	ThinkPHP/Common/functions.php	/^        $cache      =   Cache::getInstance();$/;"	v
cache	ThinkPHP/Common/functions.php	/^    static $cache   =   '';$/;"	v
cache	ThinkPHP/Common/functions.php	/^function cache($name,$value='',$options=null){$/;"	f
cache	ThinkPHP/Lib/Core/Cache.class.php	/^            $cache = new $class($options);$/;"	v
cache	ThinkPHP/Lib/Core/Db.class.php	/^        $cache  =  isset($options['cache'])?$options['cache']:false;$/;"	v
cache	ThinkPHP/Lib/Core/Model.class.php	/^    public function cache($key=true,$expire=null,$type=''){$/;"	f
cacheIterateId	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $cacheIterateId = md5($attr.$content);$/;"	v
cacheTime	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); \/\/ 缓存有效期$/;"	v
cacheTime	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^            $cacheTime = $this->requireHtmlCache();$/;"	v
charset	ThinkPHP/Lib/Core/View.class.php	/^        if(empty($charset))  $charset = C('DEFAULT_CHARSET');$/;"	v
check	ThinkPHP/Lib/Core/Model.class.php	/^    public function check($value,$rule,$type='regex'){$/;"	f
check	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^                $check  =  substr($content,20, 32);$/;"	v
check	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $check  =  '';$/;"	v
check	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $check  =  md5($data);$/;"	v
checkCache	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^    protected function checkCache($tmplTemplateFile,$prefix='') {$/;"	f
checkCache	ThinkPHP/Lib/Core/Widget.class.php	/^    protected function checkCache($tmplTemplateFile) {$/;"	f
checkContentCache	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^    protected function checkContentCache($tmplContent,$prefix='') {$/;"	f
checkHTMLCache	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^    static public function checkHTMLCache($cacheFile='',$cacheTime='') {$/;"	f
checkUrlMatch	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    private function checkUrlMatch($regx,$rule) {$/;"	f
check_runtime	ThinkPHP/Common/runtime.php	/^function check_runtime() {$/;"	f
class	ThinkPHP/Common/common.php	/^            $class   = substr($class,6);$/;"	v
class	ThinkPHP/Common/common.php	/^            $class   = substr_replace($class, '', 0, strlen($class_strut[0]) + 1);$/;"	v
class	ThinkPHP/Common/common.php	/^            $class   = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1);$/;"	v
class	ThinkPHP/Common/common.php	/^        $class      =   'Model';$/;"	v
class	ThinkPHP/Common/common.php	/^    $class          =   basename($name.$layer);$/;"	v
class	ThinkPHP/Common/common.php	/^    $class      =   basename($name.$layer);$/;"	v
class	ThinkPHP/Common/common.php	/^    $class      = $name.'Behavior';$/;"	v
class	ThinkPHP/Common/common.php	/^    $class  =   A($module,$layer);$/;"	v
class	ThinkPHP/Common/common.php	/^    $class = str_replace(array('.', '#'), array('\/', '.'), $class);$/;"	v
class	ThinkPHP/Common/functions.php	/^            $class      = 'Session'. ucwords(strtolower(C('SESSION_TYPE')));$/;"	v
class	ThinkPHP/Common/functions.php	/^    $class      =   $name . 'Filter';$/;"	v
class	ThinkPHP/Common/functions.php	/^    $class      =   $name . 'Widget';$/;"	v
class	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^            $class   = 'Template'.ucwords($engine);$/;"	v
class	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^        $class      =   new $className;$/;"	v
class	ThinkPHP/Lib/Core/App.class.php	/^                $class  =   new ReflectionClass($module);$/;"	v
class	ThinkPHP/Lib/Core/Cache.class.php	/^        $class = 'Cache'.ucwords($type);$/;"	v
class	ThinkPHP/Lib/Core/Db.class.php	/^        $class = 'Db'. $this->dbType;$/;"	v
class	ThinkPHP/Lib/Core/Model.class.php	/^        $class = ucwords(strtolower($type)).'Model';$/;"	v
class	ThinkPHP/Lib/Core/Widget.class.php	/^            $class   = 'Template'.ucwords($template);$/;"	v
className	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^        $className  =   $module.'Action';$/;"	v
className	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $className  =   'TagLib'.ucwords($tagLib);$/;"	v
class_strut	ThinkPHP/Common/common.php	/^    $class_strut     = explode('\/', $class);$/;"	v
classfile	ThinkPHP/Common/common.php	/^    $classfile       = $baseUrl . $class . $ext;$/;"	v
classfile	ThinkPHP/Common/common.php	/^function alias_import($alias, $classfile='') {$/;"	v
clear	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    public function clear() {$/;"	f
close	ThinkPHP/Lib/Core/Db.class.php	/^    public function close(){}$/;"	f
close	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function close() {$/;"	f
close	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function close() {$/;"	f
close.onclick	ThinkPHP/Tpl/page_trace.tpl	/^close.onclick = function(){$/;"	j
closeTag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $closeTag   =   isset($val['close'])?$val['close']:true;$/;"	v
cols	ThinkPHP/Lib/Core/Model.class.php	/^                $cols           =   array();$/;"	v
comment	ThinkPHP/Lib/Core/Model.class.php	/^    public function comment($comment){$/;"	f
commit	ThinkPHP/Lib/Core/Model.class.php	/^    public function commit() {$/;"	f
commit	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function commit() {$/;"	f
commit	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function commit() {$/;"	f
common_path	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $common_path    =   BASE_LIB_PATH.'Common\/';$/;"	v
common_path	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $common_path    =   COMMON_PATH.GROUP_NAME.'\/';             $/;"	v
comparison	ThinkPHP/Lib/Core/Db.class.php	/^    protected $comparison = array('eq'=>'=','neq'=>'<>','gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<=','notlike'=>'NOT LIKE','like'=>'LIKE','in'=>'IN','notin'=>'NOT IN');$/;"	v
comparison	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $comparison = $value; break;$/;"	v
comparison	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $comparison = 'lt';$/;"	v
comparison	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $comparison = array(' nheq '=>' !== ',' heq '=>' === ',' neq '=>' != ',' eq '=>' == ',' egt '=>' >= ',' gt '=>' > ',' elt '=>' <= ',' lt '=>' < ');$/;"	v
compile	ThinkPHP/Common/common.php	/^function compile($filename) {$/;"	f
compile	ThinkPHP/Lib/Core/Think.class.php	/^        $compile   = '';$/;"	v
compiler	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected function compiler($tmplContent) {$/;"	f
condition	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $condition  =   $this->parseCondition($tag['condition']);$/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^                $condition  =   preg_replace('\/\\$(\\w+)\\.(\\w+)\\s\/is','$\\\\1->\\\\2 ',$condition);$/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^                $condition  =   preg_replace('\/\\$(\\w+)\\.(\\w+)\\s\/is','$\\\\1["\\\\2"] ',$condition);$/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^                $condition  =   preg_replace('\/\\$(\\w+)\\.(\\w+)\\s\/is','(is_array($\\\\1)?$\\\\1["\\\\2"]:$\\\\1->\\\\2) ',$condition);$/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^            $condition      =   preg_replace('\/(\\$Think.*?)\\s\/ies',"\\$this->parseThinkVar('\\\\1');" , $condition);        $/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^        $condition = preg_replace('\/\\$(\\w+):(\\w+)\\s\/is','$\\\\1->\\\\2 ',$condition);$/;"	v
condition	ThinkPHP/Lib/Template/TagLib.class.php	/^        $condition = str_ireplace(array_keys($this->comparison),array_values($this->comparison),$condition);$/;"	v
config	ThinkPHP/Common/functions.php	/^        $config     = array_merge($config, array_change_key_case($option));$/;"	v
config	ThinkPHP/Common/functions.php	/^    $config = array($/;"	v
config	ThinkPHP/Lib/Core/Action.class.php	/^    protected $config   =   array();$/;"	v
config	ThinkPHP/Lib/Core/Db.class.php	/^    protected $config     = '';$/;"	v
config	ThinkPHP/Lib/Core/Model.class.php	/^                $config  =  C($config);$/;"	v
config	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->config   =   $config;$/;"	v
config	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            if(empty($config))  $config =   $this->config;$/;"	v
config	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->config   =   $config;$/;"	v
config	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            if(empty($config))  $config =   $this->config;$/;"	v
config	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public      $config          =   array();$/;"	v
config_path	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $config_path    =   BASE_LIB_PATH.'Conf\/';$/;"	v
config_path	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $config_path    =   CONF_PATH.GROUP_NAME.'\/';$/;"	v
configs	ThinkPHP/Common/functions.php	/^        $configs    =  C('LOAD_EXT_CONFIG');$/;"	v
configs	ThinkPHP/Common/functions.php	/^        if(is_string($configs)) $configs =  explode(',',$configs);$/;"	v
connect	ThinkPHP/Lib/Core/Cache.class.php	/^    public function connect($type='',$options=array()) {$/;"	f
connect	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function connect($config='',$linkNum=0,$force=false) {$/;"	f
connect	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function connect($config='',$linkNum=0) {$/;"	f
connected	ThinkPHP/Lib/Core/Db.class.php	/^    protected $connected  = false;$/;"	v
connected	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->connected    =   false;$/;"	v
connected	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->connected    =   true;$/;"	v
connected	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->connected    =   true;$/;"	v
connection	ThinkPHP/Lib/Core/Model.class.php	/^    protected $connection       =   '';$/;"	v
content	ThinkPHP/Common/common.php	/^        $content    = substr($content, 0, -2);$/;"	v
content	ThinkPHP/Common/common.php	/^    $content        = file_get_contents($filename);$/;"	v
content	ThinkPHP/Common/common.php	/^    $content        = preg_replace('\/\\\/\\\/\\[RUNTIME\\](.*?)\\\/\\\/\\[\\\/RUNTIME\\]\/s', '', $content);$/;"	v
content	ThinkPHP/Common/common.php	/^    $content        = substr(trim($content), 5);$/;"	v
content	ThinkPHP/Common/common.php	/^    $content = "\\n";$/;"	v
content	ThinkPHP/Common/functions.php	/^    $content    =   $filter->run($content);$/;"	v
content	ThinkPHP/Common/functions.php	/^    $content    =   $widget->render($data);$/;"	v
content	ThinkPHP/Common/runtime.php	/^        $content = DIR_SECURE_CONTENT;$/;"	v
content	ThinkPHP/Common/runtime.php	/^    $content        =  '$GLOBALS[\\'_beginTime\\'] = microtime(TRUE);';$/;"	v
content	ThinkPHP/Common/runtime.php	/^    $content = '';$/;"	v
content	ThinkPHP/Common/runtime.php	/^    $content = file_get_contents(THINK_PATH.'Tpl\/default_index.tpl');$/;"	v
content	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^        $content = $this->templateContentReplace($content);$/;"	v
content	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^        $content = str_replace(array_keys($replace),array_values($replace),$content);$/;"	v
content	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^            $content    =   date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n";$/;"	v
content	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^                     $content   =  str_replace('{__RUNTIME__}',$runtime,$content);$/;"	v
content	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^                $content   =  str_replace('{__NORUNTIME__}','',$content);$/;"	v
content	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^            $content   =  str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content);$/;"	v
content	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^                $content = str_replace($match[0],$this->buildToken().$match[0],$content);$/;"	v
content	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^                $content = str_replace('{__TOKEN__}',$this->buildToken(),$content);$/;"	v
content	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^            $content = str_replace('{__TOKEN__}','',$content);$/;"	v
content	ThinkPHP/Lib/Core/Action.class.php	/^        $content = $this->fetch($templateFile);$/;"	v
content	ThinkPHP/Lib/Core/View.class.php	/^        $content = $this->fetch($templateFile,$content,$prefix);$/;"	v
content	ThinkPHP/Lib/Core/View.class.php	/^        $content = ob_get_clean();$/;"	v
content	ThinkPHP/Lib/Core/Widget.class.php	/^        $content = ob_get_clean();$/;"	v
content	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            	$content   =  substr($content,20, -3);$/;"	v
content	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^                $content   =   gzuncompress($content);$/;"	v
content	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^                $content   =  substr($content,52, -3);$/;"	v
content	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $content    =   unserialize($content);$/;"	v
content	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $content    =   file_get_contents($filename);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $content=preg_replace($patterns,$replacement,$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $content        = preg_replace($patterns, $replacement,$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $content    =   str_replace($matches[0][$i],$this->parseIncludeItem($file,$array),$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $content    =   str_replace($replace,$content,file_get_contents($layoutFile));$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content        = str_replace($matches[0],'',$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content    =   $this->parseTemplateName($array['name']);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content    =   preg_replace('\/'.$begin.'block\\sname=(.+?)\\s*?'.$end.'(.*?)'.$begin.'\\\/block'.$end.'\/eis',"\\$this->replaceBlock('\\\\1','\\\\2')",$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content    =   preg_replace('\/'.$begin.'block\\sname=(.+?)\\s*?'.$end.'(.*?)'.$begin.'\\\/block'.$end.'\/eis',"stripslashes('\\\\2')",$content);            $/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content    =   str_replace($matches[0],'',$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content = preg_replace('\/(<\\?(?!php|=|$))\/i', '<?php echo \\'\\\\1\\'; ?>'."\\n", $content );$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content = str_replace('{__NOLAYOUT__}','',$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $content= stripslashes($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content            =   stripslashes($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    =   $this->parseExtend($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    =   $this->parseInclude($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    =   $this->parseLayout($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    =   $this->parsePhp($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    =   preg_replace('\/'.$begin.'literal'.$end.'(.*?)'.$begin.'\\\/literal'.$end.'\/eis',"\\$this->parseLiteral('\\\\1')",$content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content    = trim($content);$/;"	v
content	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $content = preg_replace('\/('.$this->config['tmpl_begin'].')([^\\d\\s'.$this->config['tmpl_begin'].$this->config['tmpl_end'].'].+?)('.$this->config['tmpl_end'].')\/eis',"\\$this->parseTag('\\\\2')",$content);$/;"	v
contentType	ThinkPHP/Lib/Core/View.class.php	/^        if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE');$/;"	v
cookie	ThinkPHP/Common/functions.php	/^function cookie($name, $value='', $option=null) {$/;"	f
count	ThinkPHP/Lib/Core/Db.class.php	/^                    $count  = $count -1;$/;"	v
count	ThinkPHP/Lib/Core/Db.class.php	/^                $count = count($val);$/;"	v
count	ThinkPHP/Lib/Core/Model.class.php	/^                $count          =   count($_field);$/;"	v
create	ThinkPHP/Lib/Core/Model.class.php	/^     public function create($data='',$type='') {$/;"	f
data	ThinkPHP/Common/common.php	/^                    $data   =   filter_var($data,is_int($filter)?$filter:filter_id($filter));$/;"	v
data	ThinkPHP/Common/common.php	/^                    $data   =   is_array($data)?array_map($filter,$data):$filter($data); \/\/ 参数过滤$/;"	v
data	ThinkPHP/Common/common.php	/^                $data   =   array_map($filter,$data); \/\/ 参数过滤$/;"	v
data	ThinkPHP/Common/common.php	/^        $data       =	 isset($default)?$default:NULL;$/;"	v
data	ThinkPHP/Common/common.php	/^        $data       =	$input[$name];$/;"	v
data	ThinkPHP/Common/common.php	/^        $data       =   $input; $/;"	v
data	ThinkPHP/Common/functions.php	/^function W($name, $data=array(), $return=false,$path='') {$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^                            $data   =   is_array($data)?array_map($filter,$data):$filter($data); \/\/ 参数过滤$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^                $data       =	 isset($args[2])?$args[2]:NULL;$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^                $data       =	$input[$args[0]];$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^                $data       =   $input; \/\/ 由VAR_FILTERS配置进行过滤$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^            $data           =   $info;$/;"	v
data	ThinkPHP/Lib/Core/Action.class.php	/^            $data           =   is_array($ajax)?$ajax:array();$/;"	v
data	ThinkPHP/Lib/Core/Db.class.php	/^                    $data = is_array($val[$i])?$val[$i][1]:$val[$i];$/;"	v
data	ThinkPHP/Lib/Core/Db.class.php	/^                    $data = is_string($val[1])? explode(',',$val[1]):$val[1];$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^                $data           =   $this->data;$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^                $this->data     =   array();$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^                $this->data     = array();$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^            $data           =   $field;$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^            $data   =   $_POST;$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^            $data   =   get_object_vars($data);$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^            $data = array();$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^            $data = array_map($this->options['filter'],$data);$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^        $data       =   $this->_facade($data);$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^        $data = $this->parseFieldsMap($data,0);$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^        $this->data         =   $resultSet[0];$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^        $this->data =   $data;$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^        $this->data = $data;$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^    protected $data             =   array();$/;"	v
data	ThinkPHP/Lib/Core/Model.class.php	/^    public function data($data=''){$/;"	f
data	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $data   =   gzcompress($data,3);$/;"	v
data	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $data    = "<?php\\n\/\/".sprintf('%012d',$expire).$check.$data."\\n?>";$/;"	v
data	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $data   =   serialize($value);$/;"	v
data_to_xml	ThinkPHP/Common/functions.php	/^function data_to_xml($data, $item='item', $id='id') {$/;"	f
db	ThinkPHP/Lib/Core/Db.class.php	/^            $db = new $class($db_config);$/;"	v
db	ThinkPHP/Lib/Core/Model.class.php	/^                $db   =  $this->dbName?$this->dbName:C('DB_NAME');$/;"	v
db	ThinkPHP/Lib/Core/Model.class.php	/^            $db   =  $this->dbName?$this->dbName:C('DB_NAME');$/;"	v
db	ThinkPHP/Lib/Core/Model.class.php	/^        $this->db   =    $_db[$linkNum];$/;"	v
db	ThinkPHP/Lib/Core/Model.class.php	/^    protected $db               =   null;$/;"	v
db	ThinkPHP/Lib/Core/Model.class.php	/^    public function db($linkNum='',$config='',$params=array()){$/;"	f
dbName	ThinkPHP/Lib/Core/Model.class.php	/^    protected $dbName           =   '';$/;"	v
dbType	ThinkPHP/Lib/Core/Db.class.php	/^        $dbType = strtoupper(trim($match[0]));$/;"	v
dbType	ThinkPHP/Lib/Core/Db.class.php	/^        $this->dbType = ucwords(strtolower($db_config['dbms']));$/;"	v
dbType	ThinkPHP/Lib/Core/Db.class.php	/^    protected $dbType     = null;$/;"	v
dbVersion	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $dbVersion = mysql_get_server_info($this->linkID[$linkNum]);$/;"	v
dbVersion	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $dbVersion = $this->linkID[$linkNum]->server_version;$/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^                $db_config =  $this->parseDSN(C('DB_DSN'));$/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^                $db_config = array ($/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^             $db_config =   array_change_key_case($db_config);$/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^             $db_config = array($/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^            $db_config = $this->parseDSN($db_config);$/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^        $db_config = $this->parseConfig($db_config);$/;"	v
db_config	ThinkPHP/Lib/Core/Db.class.php	/^        $db_config = array($/;"	v
debug	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $debug  =   trace();$/;"	v
debug	ThinkPHP/Lib/Core/Db.class.php	/^    protected function debug() {$/;"	f
dec	ThinkPHP/Common/common.php	/^        if(MEMORY_LIMIT_ON && $dec=='m'){$/;"	v
defs	ThinkPHP/Common/runtime.php	/^    $defs           = get_defined_constants(TRUE);$/;"	v
delete	ThinkPHP/Lib/Core/Db.class.php	/^    public function delete($options=array()) {$/;"	f
delete	ThinkPHP/Lib/Core/Model.class.php	/^    public function delete($options=array()) {$/;"	f
depr	ThinkPHP/Common/functions.php	/^    $depr = C('URL_PATHINFO_DEPR');$/;"	v
depr	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $depr = C('URL_PATHINFO_DEPR');$/;"	v
depr	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $depr = C('URL_PATHINFO_DEPR');$/;"	v
destination	ThinkPHP/Lib/Core/Log.class.php	/^                $destination = C('LOG_PATH').date('y_m_d').'.log';$/;"	v
destination	ThinkPHP/Lib/Core/Log.class.php	/^            $destination   =   $destination?$destination:C('LOG_DEST');$/;"	v
dir	ThinkPHP/Common/functions.php	/^            $dir            =   dirname($filename);$/;"	v
dir	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $dir   ='';$/;"	v
dir	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $dir         =  dirname($tmplCacheFile);$/;"	v
dirs	ThinkPHP/Common/runtime.php	/^        $dirs  = array($/;"	v
dispatch	ThinkPHP/Lib/Core/Dispatcher.class.php	/^    static public function dispatch() {$/;"	f
dispatchJump	ThinkPHP/Lib/Core/Action.class.php	/^    private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) {$/;"	f
display	ThinkPHP/Lib/Core/Action.class.php	/^    protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') {$/;"	f
display	ThinkPHP/Lib/Core/View.class.php	/^    public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') {$/;"	f
does	ThinkPHP/Lang/en-us.php	/^	'_CLASS_NOT_EXIST_'		=>	'Instantiating a class does not exist！',$/;"	c
domain	ThinkPHP/Common/functions.php	/^                    $domain = $key.strstr($domain,'.'); \/\/ 生成对应子域名$/;"	v
domain	ThinkPHP/Common/functions.php	/^            $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.');$/;"	v
domain	ThinkPHP/Common/functions.php	/^        $domain = $_SERVER['HTTP_HOST'];$/;"	v
domain	ThinkPHP/Common/functions.php	/^        $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.'));$/;"	v
domainGroup	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                    $domainGroup            =   true;$/;"	v
domainModule	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                    $domainModule           =   true;$/;"	v
dsn	ThinkPHP/Lib/Core/Db.class.php	/^            $dsn = array ($/;"	v
dsn	ThinkPHP/Lib/Core/Db.class.php	/^            $dsn = array($/;"	v
dump	ThinkPHP/Common/functions.php	/^function dump($var, $echo=true, $label=null, $strict=true) {$/;"	f
e	ThinkPHP/Common/functions.php	/^            $e              = $error;$/;"	v
e	ThinkPHP/Common/functions.php	/^    $e = array();$/;"	v
echo	ThinkPHP/Common/functions.php	/^function dump($var, $echo=true, $label=null, $strict=true) {$/;"	v
empty	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $empty =    isset($tag['empty'])?$tag['empty']:'';$/;"	v
end	ThinkPHP/Lib/Core/Model.class.php	/^                if(!is_numeric($end)) $end   =  strtotime($end);$/;"	v
end	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $end        = $value; break;$/;"	v
end	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $end   		= 0;$/;"	v
end	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $end        =   $this->config['taglib_end'];        $/;"	v
end	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $end        =   $this->config['taglib_end'];$/;"	v
endStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $endStr    =    '<?php endif; ?>';$/;"	v
endStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $endStr     =   '';$/;"	v
engine	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^        $engine             =   strtolower(C('TMPL_ENGINE_TYPE'));$/;"	v
error	ThinkPHP/Lib/Core/Action.class.php	/^    protected function error($message='',$jumpUrl='',$ajax=false) {$/;"	f
error	ThinkPHP/Lib/Core/Db.class.php	/^    protected $error      = '';$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^                $this->error            =   $val[2];$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^                $this->error        =   L('_OPERATION_WRONG_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^                $this->error    =   L('_DATA_TYPE_INVALID_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^                $this->error    = L('_DATA_TYPE_INVALID_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^                $this->error = array();$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^            $this->error = L('_DATA_TYPE_INVALID_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^            $this->error = L('_OPERATION_WRONG_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^            $this->error = L('_TOKEN_ERROR_');$/;"	v
error	ThinkPHP/Lib/Core/Model.class.php	/^    protected $error            =   '';$/;"	v
error	ThinkPHP/Lib/Core/Think.class.php	/^        $error = array();$/;"	v
error	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $this->error = mysql_errno().':'.mysql_error($this->_linkID);$/;"	v
error	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function error() {$/;"	f
error	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $this->error = $this->_linkID->errno.':'.$this->_linkID->error;$/;"	v
error	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function error() {$/;"	f
errorStr	ThinkPHP/Lib/Core/Think.class.php	/^            $errorStr = "$errstr ".$errfile." 第 $errline 行.";$/;"	v
errorStr	ThinkPHP/Lib/Core/Think.class.php	/^            $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行.";$/;"	v
error_page	ThinkPHP/Common/functions.php	/^        $error_page         = C('ERROR_PAGE');$/;"	v
escapeString	ThinkPHP/Lib/Core/Db.class.php	/^    public function escapeString($str) {$/;"	f
escapeString	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function escapeString($str) {$/;"	f
escapeString	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function escapeString($str) {$/;"	f
exec	ThinkPHP/Lib/Core/App.class.php	/^    static public function exec() {$/;"	f
execute	ThinkPHP/Lib/Core/Model.class.php	/^    public function execute($sql,$parse=false) {$/;"	f
execute	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function execute($str) {$/;"	f
execute	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function execute($str) {$/;"	f
expire	ThinkPHP/Common/functions.php	/^            $expire     =   is_numeric($options)?$options:NULL;$/;"	v
expire	ThinkPHP/Common/functions.php	/^            $expire     =   isset($options['expire'])?$options['expire']:NULL;$/;"	v
expire	ThinkPHP/Common/functions.php	/^            $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0;$/;"	v
expire	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $expire  =  (int)substr($content,8, 12);$/;"	v
expire	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $expire =  $this->options['expire'];$/;"	v
extends	ThinkPHP/Common/common.php	/^    $extends    = C('extends.' . $tag);$/;"	v
extra	ThinkPHP/Lib/Core/Log.class.php	/^            $extra   =  $extra?$extra:C('LOG_EXTRA');$/;"	v
factory	ThinkPHP/Lib/Core/Db.class.php	/^    public function factory($db_config='') {$/;"	f
fatalError	ThinkPHP/Lib/Core/Think.class.php	/^    static public function fatalError() {$/;"	f
fetch	ThinkPHP/Lib/Core/Action.class.php	/^    protected function fetch($templateFile='',$content='',$prefix='') {$/;"	f
fetch	ThinkPHP/Lib/Core/View.class.php	/^    public function fetch($templateFile='',$content='',$prefix='') {$/;"	f
fetch	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function fetch($templateFile,$templateVar,$prefix='') {$/;"	f
field	ThinkPHP/Lib/Core/Db.class.php	/^                foreach ($where as $field=>$data)$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^                $field          =   array_keys($resultSet[0]);$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^                $field  =  explode(',',$field);$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^            $field      =  $fields?$fields:'*';$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^            $field      =  $fields?array_diff($fields,$field):$field;$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^            $field   =   parse_name(substr($method,5));$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^            $field =  isset($args[0])?$args[0]:'*';$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^        $field                  =   trim($field);$/;"	v
field	ThinkPHP/Lib/Core/Model.class.php	/^    public function field($field,$except=false){$/;"	f
fieldType	ThinkPHP/Lib/Core/Model.class.php	/^            $fieldType = strtolower($this->fields['_type'][$key]);$/;"	v
fields	ThinkPHP/Lib/Core/Db.class.php	/^            $fields    = explode(',',$fields);$/;"	v
fields	ThinkPHP/Lib/Core/Db.class.php	/^        if(is_string($fields))   $fields    = explode(',',$fields);$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^                        $this->fields   =   $fields;$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^                $fields =   explode(',',$fields);$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^                $fields = F('_fields\/'.strtolower($db.'.'.$this->name));$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields             =   $this->fields;$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields             =   $this->getDbFields();$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields     =   $this->db->getFields($this->options['table']);$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields     =  $this->fields;$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields     =  $this->getDbFields();$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields =   $this->getDbFields();$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields =   $this->insertFields;$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields =   $this->options['field'];$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^            $fields =   $this->updateFields;$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^        $fields =   $this->db->getFields($this->getTableName());$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^        $this->fields   =   array_keys($fields);$/;"	v
fields	ThinkPHP/Lib/Core/Model.class.php	/^    protected $fields           =   array();$/;"	v
fields	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $fields = array_keys($datas[0]);$/;"	v
fields	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $fields = array_keys($datas[0]);$/;"	v
fieldsStr	ThinkPHP/Lib/Core/Db.class.php	/^            $fieldsStr = $this->parseKey($fields);$/;"	v
fieldsStr	ThinkPHP/Lib/Core/Db.class.php	/^            $fieldsStr = '*';$/;"	v
fieldsStr	ThinkPHP/Lib/Core/Db.class.php	/^            $fieldsStr = implode(',', $array);$/;"	v
file	ThinkPHP/Common/common.php	/^            $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file;$/;"	v
file	ThinkPHP/Common/common.php	/^            $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME;$/;"	v
file	ThinkPHP/Common/common.php	/^        $file   =   $info['host'].(isset($info['path'])?$info['path']:'');$/;"	v
file	ThinkPHP/Common/functions.php	/^            $file   = COMMON_PATH.$file.'.php';$/;"	v
file	ThinkPHP/Common/functions.php	/^            $file   = CONF_PATH.$config.'.php';$/;"	v
file	ThinkPHP/Lib/Core/Think.class.php	/^        $file       =   $class.'.class.php';$/;"	v
file	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $file       =   isset($tag['file'])?$tag['file']:$tag['href'];$/;"	v
file	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $file       =   $array['file'];$/;"	v
file_exists_case	ThinkPHP/Common/common.php	/^function file_exists_case($filename) {$/;"	f
filename	ThinkPHP/Common/functions.php	/^    $filename       = $path . $name . '.php';$/;"	v
filename	ThinkPHP/Lib/Core/Widget.class.php	/^            $filename   =  empty($templateFile)?$name:$templateFile;$/;"	v
filename	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $filename	=	$dir.$this->options['prefix'].$name.'.php';$/;"	v
filename	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $filename	=	$this->options['prefix'].$name.'.php';$/;"	v
filename	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $filename   =   $this->filename($name);$/;"	v
filename	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    private function filename($name) {$/;"	f
files	ThinkPHP/Common/functions.php	/^        $files      =  explode(',',C('LOAD_EXT_FILE'));$/;"	v
files	ThinkPHP/Common/runtime.php	/^        $files = explode(',', DIR_SECURE_FILENAME);$/;"	v
files	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $files  =  get_included_files();$/;"	v
files	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $files  =   scandir($path);$/;"	v
filter	ThinkPHP/Common/functions.php	/^    $filter     =   new $class();$/;"	v
filter	ThinkPHP/Common/functions.php	/^function filter($name, &$content) {$/;"	f
filter_exp	ThinkPHP/Common/functions.php	/^function filter_exp(&$value){$/;"	f
filters	ThinkPHP/Common/common.php	/^            $filters    =   explode(',',$filters);$/;"	v
filters	ThinkPHP/Common/common.php	/^        $filters    =   isset($filter)?$filter:C('DEFAULT_FILTER');$/;"	v
filters	ThinkPHP/Lib/Core/Action.class.php	/^                    $filters    =   explode(',',$filters);$/;"	v
filters	ThinkPHP/Lib/Core/Action.class.php	/^                $filters    =   isset($args[1])?$args[1]:C('DEFAULT_FILTER');$/;"	v
filters	ThinkPHP/Lib/Core/App.class.php	/^            $filters    =   explode(',',C('VAR_FILTERS'));$/;"	v
find	ThinkPHP/Lib/Core/Model.class.php	/^    public function find($options=array()) {$/;"	f
find	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $find           = array('~>\\s+<~','~>(\\s+\\n|\\r)~');$/;"	v
find	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $find       =   preg_match('\/'.$begin.'extend\\s(.+?)\\s*?\\\/'.$end.'\/is',$content,$matches);$/;"	v
find	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $find       =   preg_match_all('\/'.$this->config['taglib_begin'].'include\\s(.+?)\\s*?\\\/'.$this->config['taglib_end'].'\/is',$content,$matches);$/;"	v
find	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $find = preg_match('\/'.$this->config['taglib_begin'].'layout\\s(.+?)\\s*?\\\/'.$this->config['taglib_end'].'\/is',$content,$matches);$/;"	v
find	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $find = preg_match('\/'.$this->config['taglib_begin'].'taglib\\s(.+?)(\\s*?)\\\/'.$this->config['taglib_end'].'\\W\/is',$content,$matches);$/;"	v
flag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $flag   =  substr($tagStr,0,1);$/;"	v
flag2	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $flag2  =  substr($tagStr,1,1);$/;"	v
flush	ThinkPHP/Lib/Core/Model.class.php	/^    public function flush() {$/;"	f
format	ThinkPHP/Lib/Core/Log.class.php	/^    static $format  =  '[ c ]';$/;"	v
free	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function free() {$/;"	f
free	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function free() {$/;"	f
fun	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^            $fun  =  get_defined_functions();$/;"	v
fun	ThinkPHP/Lib/Core/Cache.class.php	/^        $fun    =  isset($_handler[$queue])?$_handler[$queue]:$_handler['file'];$/;"	v
fun	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $fun        =  ($type == 'in')? 'in_array'    :   '!in_array';$/;"	v
fun	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $fun = strtolower(trim($args[0]));$/;"	v
get	ThinkPHP/Lib/Core/Action.class.php	/^    public function get($name='') {$/;"	f
get	ThinkPHP/Lib/Core/View.class.php	/^    public function get($name=''){$/;"	f
get	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    public function get($name) {$/;"	f
get	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function get($name) {$/;"	f
getAction	ThinkPHP/Lib/Core/Dispatcher.class.php	/^    static private function getAction($var) {$/;"	f
getActionName	ThinkPHP/Lib/Core/Action.class.php	/^    protected function getActionName() {$/;"	f
getAll	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    private function getAll() {$/;"	f
getAll	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    private function getAll() {$/;"	f
getDbError	ThinkPHP/Lib/Core/Model.class.php	/^    public function getDbError() {$/;"	f
getDbFields	ThinkPHP/Lib/Core/Model.class.php	/^    public function getDbFields(){$/;"	f
getError	ThinkPHP/Lib/Core/Db.class.php	/^    public function getError() {$/;"	f
getError	ThinkPHP/Lib/Core/Model.class.php	/^    public function getError(){$/;"	f
getField	ThinkPHP/Lib/Core/Model.class.php	/^    public function getField($field,$sepa=null) {$/;"	f
getFields	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function getFields($tableName) {$/;"	f
getFields	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function getFields($tableName) {$/;"	f
getGroup	ThinkPHP/Lib/Core/Dispatcher.class.php	/^    static private function getGroup($var) {$/;"	f
getIncludeTagLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function getIncludeTagLib(& $content) {$/;"	f
getInstance	ThinkPHP/Lib/Core/Cache.class.php	/^    static function getInstance() {$/;"	f
getInstance	ThinkPHP/Lib/Core/Db.class.php	/^    public static function getInstance() {$/;"	f
getLastInsID	ThinkPHP/Lib/Core/Db.class.php	/^    public function getLastInsID() {$/;"	f
getLastInsID	ThinkPHP/Lib/Core/Model.class.php	/^    public function getLastInsID() {$/;"	f
getLastSql	ThinkPHP/Lib/Core/Db.class.php	/^    public function getLastSql($model='') {$/;"	f
getLastSql	ThinkPHP/Lib/Core/Model.class.php	/^    public function getLastSql() {$/;"	f
getModelName	ThinkPHP/Lib/Core/Model.class.php	/^    public function getModelName() {$/;"	f
getModule	ThinkPHP/Lib/Core/Dispatcher.class.php	/^    static private function getModule($var) {$/;"	f
getOptions	ThinkPHP/Lib/Core/Cache.class.php	/^    public function getOptions($name) {$/;"	f
getPk	ThinkPHP/Lib/Core/Model.class.php	/^    public function getPk() {$/;"	f
getTableName	ThinkPHP/Lib/Core/Model.class.php	/^    public function getTableName() {$/;"	f
getTables	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function getTables($dbName='') {$/;"	f
getTables	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function getTables($dbName='') {$/;"	f
getTags	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function getTags(){$/;"	f
getTemplateTheme	ThinkPHP/Lib/Core/View.class.php	/^    private function getTemplateTheme() {$/;"	f
get_client_ip	ThinkPHP/Common/functions.php	/^function get_client_ip($type = 0) {$/;"	f
get_instance_of	ThinkPHP/Common/functions.php	/^function get_instance_of($name, $method='', $args=array()) {$/;"	f
group	ThinkPHP/Common/common.php	/^        $group  =   isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':'');$/;"	v
group	ThinkPHP/Common/functions.php	/^                    $group                  =   array_pop($path);$/;"	v
group	ThinkPHP/Lib/Core/App.class.php	/^            $group   =  defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : '';$/;"	v
group	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $group   = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP'));$/;"	v
group	ThinkPHP/Lib/Core/Think.class.php	/^        $group      =   defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':'';$/;"	v
group	ThinkPHP/Lib/Core/View.class.php	/^            $group  =  defined('GROUP_NAME')?GROUP_NAME.'\/':'';$/;"	v
group	ThinkPHP/Lib/Core/View.class.php	/^        $group   =  defined('GROUP_NAME')?GROUP_NAME.'\/':'';$/;"	v
guid	ThinkPHP/Common/common.php	/^    $guid           =   $tablePrefix . $name . '_' . $class;$/;"	v
halt	ThinkPHP/Common/functions.php	/^function halt($error) {$/;"	f
hander	ThinkPHP/Common/functions.php	/^                $hander = new $class();$/;"	v
handler	ThinkPHP/Lib/Core/Action.class.php	/^                $handler  =   isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER');$/;"	v
handler	ThinkPHP/Lib/Core/Cache.class.php	/^    protected $handler    ;$/;"	v
host	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $host = $config['hostname'].($config['hostport']?":{$config['hostport']}":'');$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =    $htmls[$moduleName.':_empty']; \/\/ 空操作静态规则$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =    $htmls['empty:index']; \/\/ 空模块静态规则$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =   $htmls[$actionName]; \/\/ 所有操作的静态规则$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =   $htmls[$moduleName.':'.$actionName];   \/\/ 某个模块的操作的静态规则$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =   $htmls[$moduleName.':'];$/;"	v
html	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $html   =   $htmls['*']; \/\/ 全局静态规则$/;"	v
htmlfile	ThinkPHP/Lib/Core/Action.class.php	/^        $htmlfile =  $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX');$/;"	v
htmlpath	ThinkPHP/Lib/Core/Action.class.php	/^        $htmlpath   = !empty($htmlpath)?$htmlpath:HTML_PATH;$/;"	v
htmls	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^            $htmls = array_change_key_case($htmls);$/;"	v
htmls	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^         $htmls = C('HTML_CACHE_RULES'); \/\/ 读取静态规则$/;"	v
i	ThinkPHP/Common/common.php	/^                            $i = $k;$/;"	v
i	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $i                  =   count($this->literal);$/;"	v
id	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $id    =    $tag['id'];$/;"	v
identify	ThinkPHP/Common/functions.php	/^    $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args);$/;"	v
identify	ThinkPHP/Lib/Core/Think.class.php	/^        $identify   =   $class.$method;$/;"	v
import	ThinkPHP/Common/common.php	/^function import($class, $baseUrl = '', $ext='.class.php') {$/;"	f
include	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $include    =   $matches[1][$i];$/;"	v
index	Lib/Action/IndexAction.class.php	/^    public function index(){$/;"	f
index	ThinkPHP/Tpl/default_index.tpl	/^    public function index(){$/;"	f
index	php.tags	/^index	Lib\/Action\/IndexAction.class.php	\/^    public function index(){$\/;"	f$/;"	f
info	ThinkPHP/Common/common.php	/^        $info   =   ($label?$label.':':'').print_r($value,true);$/;"	v
info	ThinkPHP/Common/common.php	/^        $info   =   parse_url($template);$/;"	v
info	ThinkPHP/Common/common.php	/^    $info   =   pathinfo($url);$/;"	v
info	ThinkPHP/Common/functions.php	/^    $info   =  parse_url($url);$/;"	v
info	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $info   =  parse_url($url);$/;"	v
info	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $info   =   array();$/;"	v
info	ThinkPHP/Lib/Core/Action.class.php	/^            $info           =   array();$/;"	v
info	ThinkPHP/Lib/Core/Db.class.php	/^        $info = parse_url($dsnStr);$/;"	v
info	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $info   =   array();$/;"	v
info	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $info   =   array();$/;"	v
init	ThinkPHP/Lib/Core/App.class.php	/^    static public function init() {$/;"	f
init	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    private function init() {$/;"	f
initConnect	ThinkPHP/Lib/Core/Db.class.php	/^    protected function initConnect($master=true) {$/;"	f
input	ThinkPHP/Common/common.php	/^                    $input  =  $_GET;$/;"	v
input	ThinkPHP/Common/common.php	/^                    $input  =  $_POST;$/;"	v
input	ThinkPHP/Common/common.php	/^                $input  =   array_merge($input,$_GET[C('VAR_URL_PARAMS')]);$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'cookie'  :   $input =& $_COOKIE;    break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'get'     :   $input =& $_GET;break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'globals' :   $input =& $GLOBALS;    break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'post'    :   $input =& $_POST;break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'request' :   $input =& $_REQUEST;   break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'server'  :   $input =& $_SERVER;    break;$/;"	v
input	ThinkPHP/Common/common.php	/^        case 'session' :   $input =& $_SESSION;   break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                            $input  =  $_GET;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                            $input  =  $_POST;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                        $input  =   array_merge($input,$_GET[C('VAR_URL_PARAMS')]);$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_cookie'  :   $input =& $_COOKIE;    break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_get'     :   $input =& $_GET;break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_globals' :   $input =& $GLOBALS;    break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_post'    :   $input =& $_POST;break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_request' :   $input =& $_REQUEST;   break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_server'  :   $input =& $_SERVER;    break;$/;"	v
input	ThinkPHP/Lib/Core/Action.class.php	/^                case '_session' :   $input =& $_SESSION;   break;$/;"	v
insert	ThinkPHP/Lib/Core/Db.class.php	/^    public function insert($data,$options=array(),$replace=false) {$/;"	f
insertAll	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function insertAll($datas,$options=array(),$replace=false) {$/;"	f
insertAll	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function insertAll($datas,$options=array(),$replace=false) {$/;"	f
insertId	ThinkPHP/Lib/Core/Model.class.php	/^            $insertId   =   $this->getLastInsID();$/;"	v
instance	ThinkPHP/Lib/Core/Think.class.php	/^    static public function instance($class,$method='') {$/;"	f
ip	ThinkPHP/Common/functions.php	/^        $ip     =   $_SERVER['HTTP_CLIENT_IP'];$/;"	v
ip	ThinkPHP/Common/functions.php	/^        $ip     =   $_SERVER['REMOTE_ADDR'];$/;"	v
ip	ThinkPHP/Common/functions.php	/^        $ip     =   trim($arr[0]);$/;"	v
ip	ThinkPHP/Common/functions.php	/^    $ip   = $long ? array($ip, $long) : array('0.0.0.0', 0);$/;"	v
ip	ThinkPHP/Common/functions.php	/^    static $ip  =   NULL;$/;"	v
isAjax	ThinkPHP/Lib/Core/Action.class.php	/^    protected function isAjax() {$/;"	f
isBreak	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $isBreak  = isset($tag['break']) ? $tag['break'] : '';$/;"	v
isEmptyAction	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^    static private function isEmptyAction($module,$action) {$/;"	f
is_ssl	ThinkPHP/Common/functions.php	/^function is_ssl() {$/;"	f
item	ThinkPHP/Common/functions.php	/^function data_to_xml($data, $item='item', $id='id') {$/;"	v
item	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $item       =   $tag['item'];$/;"	v
j	ThinkPHP/Common/common.php	/^    for ($i = 0, $j = count($tokens); $i < $j; $i++) {$/;"	v
join	ThinkPHP/Lib/Core/Model.class.php	/^    public function join($join) {$/;"	f
joinStr	ThinkPHP/Lib/Core/Db.class.php	/^		$joinStr = preg_replace("\/__([A-Z_-]+)__\/esU",C("DB_PREFIX").".strtolower('$1')",$joinStr);$/;"	v
joinStr	ThinkPHP/Lib/Core/Db.class.php	/^        $joinStr = '';$/;"	v
k	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                        foreach ($val as $k=>$v){$/;"	v
k	ThinkPHP/Tpl/page_trace.tpl	/^		foreach ($info as $k=>$val){$/;"	v
key	ThinkPHP/Common/common.php	/^        $key = strtoupper($key);$/;"	v
key	ThinkPHP/Common/common.php	/^        foreach ($tags as $key=>$name) {$/;"	v
key	ThinkPHP/Common/common.php	/^    foreach ($array as $key => $val) {$/;"	v
key	ThinkPHP/Common/functions.php	/^            $key  = $item;$/;"	v
key	ThinkPHP/Common/functions.php	/^            foreach ($_COOKIE as $key => $val) {$/;"	v
key	ThinkPHP/Common/functions.php	/^            foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) {$/;"	v
key	ThinkPHP/Common/functions.php	/^        foreach ($attr as $key => $value) {$/;"	v
key	ThinkPHP/Common/functions.php	/^        foreach ($configs as $key=>$config){$/;"	v
key	ThinkPHP/Common/functions.php	/^    foreach ($data as $key => $val) {$/;"	v
key	ThinkPHP/Common/runtime.php	/^        foreach ($item as $key=>$name) {$/;"	v
key	ThinkPHP/Common/runtime.php	/^    foreach ($list as $key=>$file){$/;"	v
key	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            foreach ($var as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        foreach ($m2 as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^            foreach ($trace as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        foreach ($files as $key=>$file){$/;"	v
key	ThinkPHP/Lib/Core/Cache.class.php	/^            $key =  array_shift($value);$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^                    $key    = trim($key);$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^                    $key  = '_complex';$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^                foreach ($join as $key=>$_join){$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            $key    =  is_string($cache['key'])?$cache['key']:md5($sql);$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            $key    =  md5(serialize($options));$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            foreach ($fields as $key=>$field){$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            foreach ($order as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            foreach ($this->config as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^            foreach ($where as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Db.class.php	/^        foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^                $key            =   array_shift($field);$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^                $key            =   trim($key);$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^            foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^            foreach ($options['where'] as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^            foreach ($this->_map as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^            foreach($_validate as $key=>$val) {$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^        foreach ($dataList as $key=>$data){$/;"	v
key	ThinkPHP/Lib/Core/Model.class.php	/^        foreach ($fields as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            foreach ($result as $key => $val) {$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^           $key = '`'.$key.'`';$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $key   =  trim($key);$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        foreach ($result as $key => $val) {$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            foreach ($result as $key => $val) {$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^           $key = '`'.$key.'`';$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $key   =  trim($key);$/;"	v
key	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        foreach ($data as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $key        =   !empty($tag['key'])?$tag['key']:'key';$/;"	v
key	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $key   =    !empty($tag['key'])?$tag['key']:'i';$/;"	v
key	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr .= 'foreach($__LIST__ as $key=>$'.$id.'): ';$/;"	v
key	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        foreach ($this->parseXmlAttr($attr, 'for') as $key => $value){$/;"	v
key	ThinkPHP/Lib/Template/TagLib.class.php	/^                    foreach ($vars as $key=>$val)$/;"	v
key	ThinkPHP/Lib/Template/TagLib.class.php	/^                    foreach ($vars as $key=>$val){$/;"	v
key	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        foreach ($vars as $key=>$val)$/;"	v
key	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        foreach ($vars as $key=>$val) {$/;"	v
key	ThinkPHP/Tpl/page_trace.tpl	/^	<?php foreach($trace as $key => $value){ ?>$/;"	v
key2	ThinkPHP/Lib/Core/Model.class.php	/^                $key2           =   array_shift($field);$/;"	v
label	ThinkPHP/Common/functions.php	/^    $label = ($label === null) ? '' : rtrim($label) . ' ';$/;"	v
lastInsID	ThinkPHP/Lib/Core/Db.class.php	/^    protected $lastInsID  = null;$/;"	v
lastInsID	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->lastInsID = mysql_insert_id($this->_linkID);$/;"	v
lastInsID	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->lastInsID = $this->_linkID->insert_id;$/;"	v
last_space	ThinkPHP/Common/common.php	/^                        $last_space = true;$/;"	v
last_space	ThinkPHP/Common/common.php	/^                    $last_space = false;$/;"	v
last_space	ThinkPHP/Common/common.php	/^            $last_space = false;$/;"	v
last_space	ThinkPHP/Common/common.php	/^    $last_space = false;$/;"	v
layer	ThinkPHP/Common/common.php	/^        $layer  =   $layer?$layer:C('DEFAULT_V_LAYER');$/;"	v
layer	ThinkPHP/Common/common.php	/^    $layer          =   $layer?$layer:C('DEFAULT_M_LAYER');$/;"	v
layer	ThinkPHP/Common/common.php	/^    $layer      =   $layer?$layer:C('DEFAULT_C_LAYER');$/;"	v
layout	ThinkPHP/Common/functions.php	/^function layout($layout) {$/;"	f
layoutFile	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^            $layoutFile  =  THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX');$/;"	v
layoutFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $layoutFile  =  THEME_PATH.C('LAYOUT_NAME').$this->config['template_suffix'];$/;"	v
layoutFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $layoutFile =   THEME_PATH.$array['name'].$this->config['template_suffix'];$/;"	v
len1	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $len1   =   substr_count($regx,'\/');$/;"	v
len2	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $len2   =   substr_count($rule,'\/');$/;"	v
length	ThinkPHP/Lib/Core/Model.class.php	/^                    return $length == $rule;$/;"	v
length	ThinkPHP/Lib/Core/Model.class.php	/^                $length  =  mb_strlen($value,'utf-8'); \/\/ 当前数据长度$/;"	v
length	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $length = count($varArray);$/;"	v
level	ThinkPHP/Common/common.php	/^        $level  =   strtoupper($level);$/;"	v
level	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $level      =   isset($val['level'])?$val['level']:1;$/;"	v
libPath	ThinkPHP/Common/common.php	/^        $libPath    =   defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH;$/;"	v
libPath	ThinkPHP/Lib/Core/Think.class.php	/^        $libPath    =   defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH;$/;"	v
like	ThinkPHP/Lib/Core/Db.class.php	/^                            $like       =   array();$/;"	v
likeLogic	ThinkPHP/Lib/Core/Db.class.php	/^                        $likeLogic  =   isset($val[2])?strtoupper($val[2]):'OR';$/;"	v
likeStr	ThinkPHP/Lib/Core/Db.class.php	/^                            $likeStr    =   $this->comparison[strtolower($val[0])];$/;"	v
limit	ThinkPHP/Lib/Core/Model.class.php	/^    public function limit($offset,$length=null){$/;"	f
linkID	ThinkPHP/Lib/Core/Db.class.php	/^    protected $linkID     = array();$/;"	v
list	ThinkPHP/Common/runtime.php	/^    $list = array($/;"	v
list	ThinkPHP/Lib/Core/Think.class.php	/^            $list  =  $mode['core'];$/;"	v
list	ThinkPHP/Lib/Core/Think.class.php	/^            $list  =  array($/;"	v
list	ThinkPHP/Lib/Core/Think.class.php	/^            $list  =  array_merge($list,include CONF_PATH.'core.php');$/;"	v
listRows	ThinkPHP/Lib/Core/Db.class.php	/^            $listRows=  isset($listRows)?$listRows:(is_numeric($options['limit'])?$options['limit']:20);$/;"	v
literal	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private     $literal         =   array();$/;"	v
load	ThinkPHP/Common/common.php	/^function load($name, $baseUrl='', $ext='.php') {$/;"	f
loadTemplate	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function loadTemplate ($tmplTemplateFile,$prefix='') {$/;"	f
load_ext_file	ThinkPHP/Common/functions.php	/^function load_ext_file() {$/;"	f
load_runtime_file	ThinkPHP/Common/runtime.php	/^function load_runtime_file() {$/;"	f
log	ThinkPHP/Lib/Core/Log.class.php	/^    static $log     =  array();$/;"	v
logo	ThinkPHP/Lib/Core/App.class.php	/^    static public function logo(){$/;"	f
long	ThinkPHP/Common/functions.php	/^    $long = sprintf("%u",ip2long($ip));$/;"	v
m	ThinkPHP/Lib/Core/Db.class.php	/^                        foreach ($array as $m=>$k){$/;"	v
m1	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $m1 = explode('\/',$regx);$/;"	v
m2	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $m2 = explode('\/',$rule);$/;"	v
map	ThinkPHP/Lib/Core/Model.class.php	/^                $map = array();$/;"	v
map	ThinkPHP/Lib/Core/Model.class.php	/^            $map    =   array();$/;"	v
maps	ThinkPHP/Common/functions.php	/^                    $maps    =   $maps[strtolower($var[C('VAR_MODULE')])];$/;"	v
maps	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $maps =   $maps[strtolower(MODULE_NAME)];$/;"	v
match	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                        $match  =  $this->checkUrlMatch($regx,$rule);$/;"	v
match	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                        $match = false;$/;"	v
match	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                $match = false;$/;"	v
match	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $match = true; \/\/ 是否匹配$/;"	v
match	ThinkPHP/Lib/Core/Db.class.php	/^        $match  =  explode(':',$dsn);$/;"	v
matches	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $matches  =  array();$/;"	v
max	ThinkPHP/Lib/Core/Model.class.php	/^                    $max    =    $rule[1];$/;"	v
method	ThinkPHP/Common/common.php	/^        $method     =   'run';$/;"	v
method	ThinkPHP/Common/common.php	/^        $method =   'param';$/;"	v
method	ThinkPHP/Common/functions.php	/^function get_instance_of($name, $method='', $args=array()) {$/;"	v
method	ThinkPHP/Lib/Core/App.class.php	/^            $method =   new ReflectionMethod($module, $action);$/;"	v
method	ThinkPHP/Lib/Core/App.class.php	/^            $method = new ReflectionMethod($module,'__call');$/;"	v
methods	ThinkPHP/Lib/Core/Model.class.php	/^    protected $methods          =   array('table','order','alias','having','group','lock','distinct','auto','filter','validate','result','bind','token');$/;"	v
min	ThinkPHP/Lib/Core/Model.class.php	/^                    $min    =    $rule[0];$/;"	v
mix	ThinkPHP/Common/functions.php	/^        $mix = get_resource_type($mix) . strval($mix);$/;"	v
mix	ThinkPHP/Common/functions.php	/^        $mix = serialize($mix);$/;"	v
mod	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $mod   =    isset($tag['mod'])?$tag['mod']:'2';$/;"	v
mode	ThinkPHP/Lib/Core/Think.class.php	/^            $mode   =  array();$/;"	v
mode	ThinkPHP/Lib/Core/Think.class.php	/^            $mode   = include MODE_PATH.strtolower(MODE_NAME).'.php';$/;"	v
model	ThinkPHP/Common/common.php	/^        $model      =   new $class(basename($name));$/;"	v
model	ThinkPHP/Common/common.php	/^        $model      =   new Model(basename($name));$/;"	v
model	ThinkPHP/Lib/Core/Db.class.php	/^        $this->model  =   $options['model'];$/;"	v
model	ThinkPHP/Lib/Core/Db.class.php	/^        $this->model  =   '_think_';$/;"	v
model	ThinkPHP/Lib/Core/Db.class.php	/^        $this->model =  $model;$/;"	v
model	ThinkPHP/Lib/Core/Db.class.php	/^    protected $model      = '_think_';$/;"	v
modelSql	ThinkPHP/Lib/Core/Db.class.php	/^    protected $modelSql   = array();$/;"	v
module	ThinkPHP/Common/common.php	/^    $module =   $info['dirname'];$/;"	v
module	ThinkPHP/Lib/Core/App.class.php	/^                $module = A($group.'Empty');$/;"	v
module	ThinkPHP/Lib/Core/App.class.php	/^                $module = __hack_module();$/;"	v
module	ThinkPHP/Lib/Core/App.class.php	/^            $module  =  A($group.MODULE_NAME);$/;"	v
module	ThinkPHP/Lib/Core/App.class.php	/^            $module  =  false;$/;"	v
module	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $module =   array_pop($array);$/;"	v
module	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            $module = ucfirst(parse_name($module,1));$/;"	v
module	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE'));$/;"	v
module	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $module =   !empty($path)?array_pop($path):MODULE_NAME;$/;"	v
moduleName	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^            $moduleName = strtolower(MODULE_NAME);$/;"	v
moduleName	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $moduleName    =   defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME;$/;"	v
msg	ThinkPHP/Common/functions.php	/^        $msg    = "系统将在{$time}秒之后自动跳转到{$url}！";$/;"	v
multi	ThinkPHP/Lib/Core/Db.class.php	/^                    $multi  = is_array($val) &&  isset($val['_multi']);$/;"	v
multiConnect	ThinkPHP/Lib/Core/Db.class.php	/^    protected function multiConnect($master=false) {$/;"	f
must	ThinkPHP/Lib/Template/TagLib.class.php	/^                $must   =   array();$/;"	v
must	ThinkPHP/Lib/Template/TagLib.class.php	/^                $must   =   explode(',',$this->tags[strtolower($tag)]['must']);$/;"	v
n1	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $n1 = empty($val['attr'])?'(\\s*?)':'\\s([^'.$end.']*)';$/;"	v
name	ThinkPHP/Common/common.php	/^                $name   = $key;$/;"	v
name	ThinkPHP/Common/common.php	/^            $name       = substr($name, 2);$/;"	v
name	ThinkPHP/Common/common.php	/^            $name = strtolower($name);$/;"	v
name	ThinkPHP/Common/common.php	/^        $name       =   $app.'\/'.$layer.'\/'.$name;$/;"	v
name	ThinkPHP/Common/common.php	/^        $name       =   str_replace(':\/\/','\/'.$layer.'\/',$name);$/;"	v
name	ThinkPHP/Common/common.php	/^        $name   =  '@\/'.$layer.'\/'.$name;$/;"	v
name	ThinkPHP/Common/common.php	/^        $name   =  str_replace(':\/\/','\/'.$layer.'\/',$name);$/;"	v
name	ThinkPHP/Common/common.php	/^        $name = explode('.', $name);$/;"	v
name	ThinkPHP/Common/common.php	/^        $name = strtoupper($name);$/;"	v
name	ThinkPHP/Common/common.php	/^    $name = str_replace(array('.', '#'), array('\/', '.'), $name);$/;"	v
name	ThinkPHP/Common/functions.php	/^            $name   =  substr($name,1);$/;"	v
name	ThinkPHP/Common/functions.php	/^    $name = $config['prefix'] . $name;$/;"	v
name	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                    $name       =   strtoupper($name);$/;"	v
name	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        foreach ($tabs as $name=>$title){$/;"	v
name	ThinkPHP/Lib/Core/Action.class.php	/^            $this->name     =   substr(get_class($this),0,-6);$/;"	v
name	ThinkPHP/Lib/Core/Action.class.php	/^    private   $name     =  '';$/;"	v
name	ThinkPHP/Lib/Core/App.class.php	/^                        $name = $param->getName();$/;"	v
name	ThinkPHP/Lib/Core/Behavior.class.php	/^            foreach ($this->options as $name=>$val){$/;"	v
name	ThinkPHP/Lib/Core/Db.class.php	/^                $name       =   md5($key);$/;"	v
name	ThinkPHP/Lib/Core/Db.class.php	/^                $name   =   md5($key);$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^                    $name   =  $result[$key];$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^                $this->name   =  $name;$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^            $name   =   parse_name(substr($method,10));$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^            $name   = C('TOKEN_NAME');$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^            $this->name =   $this->getModelName();$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^            $this->name =   substr(get_class($this),0,-5);$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^            foreach ($params as $name=>$value){$/;"	v
name	ThinkPHP/Lib/Core/Model.class.php	/^    protected $name             =   '';$/;"	v
name	ThinkPHP/Lib/Core/Widget.class.php	/^            $name   = substr(get_class($this),0,-6);$/;"	v
name	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $name	=	md5($name);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $name       = $value; break;$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                $name  =    $this->tpl->parseVarFunction($name,$varArray);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                $name  =    'isset('.$name.')';$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name      =    $this->autoBuildVar($name);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name      =    array_shift($varArray);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name   =   $this->tpl->parseVarFunction($name,$varArray);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name   = $this->autoBuildVar($name);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name   = '$_result';$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $name = $this->tpl->parseVarFunction($name,$varArray);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name		= 'i';$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name       =   $tag['name'];$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name       =   $this->autoBuildVar($name);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name       =   $this->autoBuildVar($tag['name']);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name       =   '\\''.$tag['name']. '\\'';$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name       =   array_shift($varArray);$/;"	v
name	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $name  =    $tag['name'];$/;"	v
name	ThinkPHP/Lib/Template/TagLib.class.php	/^                    $name = '$'.$var;$/;"	v
name	ThinkPHP/Lib/Template/TagLib.class.php	/^                    $name = 'is_array($'.$var.')?$'.$var.'["'.$vars[0].'"]:$'.$var.'->'.$vars[0];$/;"	v
name	ThinkPHP/Lib/Template/TagLib.class.php	/^            $name   =   '$'.str_replace(':','->',$name);$/;"	v
name	ThinkPHP/Lib/Template/TagLib.class.php	/^            $name = '$'.$name;$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                            $name = "$fun($args[1])";$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                            $name = "$fun($name,$args[1])";$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $name = "$fun($name)";$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $name = '$'.$var;$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $name = 'is_array($'.$var.')?$'.$var.'["'.$vars[0].'"]:$'.$var.'->'.$vars[0];$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $name   = '('.$name.')?('.$name.'):'.$args[1];$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $name = "$".$var;$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $name = "$$var";$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $name = $this->parseThinkVar($var);$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $name = $this->parseVarFunction($name,$varArray);$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $name   = substr($tagStr,1);$/;"	v
name	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        foreach ($tLib->getTags() as $name=>$val){$/;"	v
now	ThinkPHP/Lib/Core/Log.class.php	/^        $now = date(self::$format);$/;"	v
numCols	ThinkPHP/Lib/Core/Db.class.php	/^    protected $numCols    = 0;$/;"	v
numCols	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->numCols    = $this->queryID->field_count;$/;"	v
numRows	ThinkPHP/Lib/Core/Db.class.php	/^    protected $numRows    = 0;$/;"	v
numRows	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->numRows = mysql_affected_rows($this->_linkID);$/;"	v
numRows	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->numRows = mysql_num_rows($this->queryID);$/;"	v
numRows	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->numRows  = $this->queryID->num_rows;$/;"	v
numRows	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->numRows = $this->_linkID->affected_rows;$/;"	v
o	ThinkPHP/Common/functions.php	/^            $o = new $name();$/;"	v
o	ThinkPHP/Lib/Core/Think.class.php	/^                $o = new $class();$/;"	v
offset	ThinkPHP/Lib/Core/Db.class.php	/^            $offset  =  $listRows*((int)$page-1);$/;"	v
onclick	ThinkPHP/Tpl/page_trace.tpl	/^close.onclick = function(){$/;"	j
onclick	ThinkPHP/Tpl/page_trace.tpl	/^open.onclick = function(){$/;"	j
op	ThinkPHP/Lib/Core/Db.class.php	/^                        $op = is_array($val[$i])?$this->comparison[strtolower($val[$i][0])]:'=';$/;"	v
op	ThinkPHP/Lib/Core/Db.class.php	/^                    $op   =  ' '.strtoupper($where['_logic']).' ';$/;"	v
op	ThinkPHP/Lib/Core/Db.class.php	/^                    $op   =  ' AND ';$/;"	v
open.onclick	ThinkPHP/Tpl/page_trace.tpl	/^open.onclick = function(){$/;"	j
operate	ThinkPHP/Lib/Core/Db.class.php	/^                $operate    =   ' '.$operate.' ';$/;"	v
operate	ThinkPHP/Lib/Core/Db.class.php	/^                $operate    =   ' AND ';$/;"	v
operate	ThinkPHP/Lib/Core/Db.class.php	/^            $operate  = isset($where['_logic'])?strtoupper($where['_logic']):'';$/;"	v
option	ThinkPHP/Common/functions.php	/^            $option = array('expire' => $option);$/;"	v
options	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^    protected $options   =  array($/;"	v
options	ThinkPHP/Lib/Core/Behavior.class.php	/^    protected $options =  array();$/;"	v
options	ThinkPHP/Lib/Core/Cache.class.php	/^    protected $options = array();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^                $options    =   $this->_scope['default'];$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^                $options    =   array_merge($options,$args);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^                $options    =   array_merge($options,$this->_scope[$name]);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^                $options =  $union;$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options                =   array();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options            =  $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options            =  array();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options        =   $scope;$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options        =   array();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options =  $this->_parseOptions();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options =  $union;$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $options =  array_merge($this->options,$options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^            $this->options  =   array_merge($this->options,array_change_key_case($options));$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $options                =   $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $options            =   $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $options    =   $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $options    =  $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $options =  $this->_parseOptions($options);$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^        $this->options  =   array();$/;"	v
options	ThinkPHP/Lib/Core/Model.class.php	/^    protected $options          =   array();$/;"	v
options	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^            $this->options =  $options;$/;"	v
order	ThinkPHP/Lib/Core/Db.class.php	/^            $order   =  implode(',',$array);$/;"	v
output	ThinkPHP/Common/functions.php	/^            $output = $label . print_r($var, true);$/;"	v
output	ThinkPHP/Common/functions.php	/^            $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>';$/;"	v
output	ThinkPHP/Common/functions.php	/^            $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output);$/;"	v
output	ThinkPHP/Common/functions.php	/^            $output = print_r($var, true);$/;"	v
output	ThinkPHP/Common/functions.php	/^        $output = ob_get_clean();$/;"	v
page	ThinkPHP/Lib/Core/Db.class.php	/^                $page = $options['page'];$/;"	v
page	ThinkPHP/Lib/Core/Db.class.php	/^            $page    =  $page?$page:1;$/;"	v
page	ThinkPHP/Lib/Core/Model.class.php	/^    public function page($page,$listRows=null){$/;"	f
param	ThinkPHP/Lib/Core/Cache.class.php	/^       $param = func_get_args();$/;"	v
params	ThinkPHP/Lib/Core/App.class.php	/^                    $params =  $method->getParameters();$/;"	v
params	ThinkPHP/Lib/Core/View.class.php	/^            $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix);$/;"	v
parse	ThinkPHP/Lib/Core/Model.class.php	/^                $parse = func_get_args();$/;"	v
parse	ThinkPHP/Lib/Core/Model.class.php	/^            $parse = array_map(array($this->db,'escapeString'),$parse);$/;"	v
parse	ThinkPHP/Lib/Core/Model.class.php	/^            $parse = func_get_args();$/;"	v
parse	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $parse    = array();$/;"	v
parse	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parse      = '_'.$tag;$/;"	v
parse	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parse($content) {$/;"	f
parseBind	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseBind($bind){$/;"	f
parseBlock	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function parseBlock($name,$content) {$/;"	f
parseComment	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseComment($comment) {$/;"	f
parseCondition	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function parseCondition($condition) {$/;"	f
parseConfig	ThinkPHP/Lib/Core/Db.class.php	/^    private function parseConfig($db_config='') {$/;"	f
parseDSN	ThinkPHP/Lib/Core/Db.class.php	/^    public function parseDSN($dsnStr) {$/;"	f
parseDistinct	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseDistinct($distinct) {$/;"	f
parseExtend	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected function parseExtend($content) {$/;"	f
parseField	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseField($fields) {$/;"	f
parseFieldsMap	ThinkPHP/Lib/Core/Model.class.php	/^    public function parseFieldsMap($data,$type=1) {$/;"	f
parseGroup	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseGroup($group) {$/;"	f
parseHaving	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseHaving($having) {$/;"	f
parseInclude	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected function parseInclude($content) {$/;"	f
parseIncludeItem	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function parseIncludeItem($tmplPublicName,$vars=array()){$/;"	f
parseJoin	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseJoin($join) {$/;"	f
parseKey	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseKey(&$key) {$/;"	f
parseKey	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    protected function parseKey(&$key) {$/;"	f
parseKey	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    protected function parseKey(&$key) {$/;"	f
parseLayout	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected function parseLayout($content) {$/;"	f
parseLimit	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseLimit($limit) {$/;"	f
parseLiteral	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function parseLiteral($content) {$/;"	f
parseLock	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseLock($lock=false) {$/;"	f
parseOrder	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseOrder($order) {$/;"	f
parsePhp	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected function parsePhp($content) {$/;"	f
parseRegex	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    private function parseRegex($matches,$route,$regx) {$/;"	f
parseRule	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    private function parseRule($rule,$route,$regx) {$/;"	f
parseSet	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseSet($data) {$/;"	f
parseSql	ThinkPHP/Lib/Core/Db.class.php	/^    public function parseSql($sql,$options=array()){$/;"	f
parseSql	ThinkPHP/Lib/Core/Model.class.php	/^    protected function parseSql($sql,$parse) {$/;"	f
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $parseStr   = '<?php if('.$fun.'(('.$name.'), '.$str.')): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $parseStr = '<?php $_RANGE_VAR_='.$str.';if('.$name.'<$_RANGE_VAR_[0] || '.$name.'>$_RANGE_VAR_[1]):?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $parseStr = '<?php $_RANGE_VAR_='.$str.';if('.$name.'>= $_RANGE_VAR_[0] && '.$name.'<= $_RANGE_VAR_[1]):?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php '.$name.' = '.$value.'; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php define('.$name.', '.$value.'); ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php elseif('.$condition.'): ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(!defined("'.$name.'")): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(!empty('.$name.')): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(!isset('.$name.')): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if('.$condition.'): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(('.$name.') '.$type.' '.$value.'): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(defined("'.$name.'")): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(empty('.$name.')): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(is_array('.$name.')): foreach('.$name.' as $'.$key.'=>$'.$item.'): ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php if(isset('.$name.')): ?>'.$content.'<?php endif; ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =   '<?php switch('.$name.'): ?>'.$content.'<?php endswitch;?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   =  '<?php ';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr   = '<?php $__FOR_START_'.$rand.'__='.$start.';$__FOR_END_'.$rand.'__='.$end.';';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr = '<?php '.$content.' ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr = '<?php '.$value.' ?>'.$content;$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr = '<?php default: ?>';$/;"	v
parseStr	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $parseStr = '<?php else: ?>';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_COOKIE[\\''.$vars[2].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_COOKIE[\\''.$vars[2].'\\'][\\''.$vars[3].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_COOKIE[\\''.C('COOKIE_PREFIX').$vars[2].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_SESSION[\\''.$vars[2].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_SESSION[\\''.$vars[2].'\\'][\\''.$vars[3].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                        $parseStr = '$_SESSION[\\''.C('SESSION_PREFIX').'\\'][\\''.$vars[2].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'CONFIG':    $parseStr = 'C("'.$vars[2].'")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'CONST':     $parseStr = strtoupper($vars[2]);break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'ENV':         $parseStr = '$_ENV[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'GET':         $parseStr = '$_GET[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'LANG':       $parseStr = 'L("'.$vars[2].'")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'LDELIM':    $parseStr = 'C("TMPL_L_DELIM")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'NOW':       $parseStr = "date('Y-m-d g:i a',time())";break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'POST':       $parseStr = '$_POST[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'RDELIM':    $parseStr = 'C("TMPL_R_DELIM")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'REQUEST':  $parseStr = '$_REQUEST[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'SERVER':    $parseStr = '$_SERVER[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                case 'VERSION':  $parseStr = 'THINK_VERSION';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^                default:  if(defined($vars[1])) $parseStr = $vars[1];$/;"	v
parseStr	ThinkPHP/Lib/Template/TagLib.class.php	/^        $parseStr   = '';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $parseStr = $vars[1];$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $parseStr = '$_COOKIE[\\''.$vars[2].'\\'][\\''.$vars[3].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $parseStr = '$_SESSION[\\''.$vars[2].'\\'][\\''.$vars[3].'\\']';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $parseStr = 'cookie(\\''.$vars[2].'\\')';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                        $parseStr = 'session(\\''.$vars[2].'\\')';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = "'".$this->templateFile."'";\/\/'C("TEMPLATE_NAME")';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = "date('Y-m-d g:i a',time())";$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = '$_ENV[\\''.strtoupper($vars[2]).'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = '$_GET[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = '$_POST[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = '$_REQUEST[\\''.$vars[2].'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = '$_SERVER[\\''.strtoupper($vars[2]).'\\']';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = 'C("'.$vars[2].'")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = 'C("TMPL_L_DELIM")';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = 'C("TMPL_R_DELIM")';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = 'L("'.$vars[2].'")';break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = 'THINK_VERSION';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $parseStr = strtoupper($vars[2]);break;$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $parseStr = '<?php echo ('.$name.'); ?>';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $parseStr = str_replace('['.$key.']',$val,$parseStr);$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parseStr           =   "<!--###literal{$i}###-->";$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parseStr   =   '';$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parseStr   =  $this->literal[$tag];$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parseStr = $this->parseTemplateName($tmplPublicName);$/;"	v
parseStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $parseStr = '';$/;"	v
parseTable	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseTable($tables) {$/;"	f
parseTag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $parseTag = !$hide? $tagLib.':'.$tag: $tag;\/\/ 实际要解析的标签名称$/;"	v
parseTag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseTag($tagStr){$/;"	f
parseTagLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseTagLib($tagLib,&$content,$hide=false) {$/;"	f
parseTemplate	ThinkPHP/Lib/Core/View.class.php	/^    public function parseTemplate($template='') {$/;"	f
parseTemplateName	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function parseTemplateName($templateName){$/;"	f
parseThinkVar	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function parseThinkVar($varStr){$/;"	f
parseThinkVar	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseThinkVar($varStr){$/;"	f
parseThinkWhere	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseThinkWhere($key,$val) {$/;"	f
parseUnion	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseUnion($union) {$/;"	f
parseUrl	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    private function parseUrl($url) {$/;"	f
parseValue	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseValue($value) {$/;"	f
parseVar	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseVar($varStr){$/;"	f
parseVarFunction	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseVarFunction($name,$varArray){$/;"	f
parseWhere	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseWhere($where) {$/;"	f
parseWhereItem	ThinkPHP/Lib/Core/Db.class.php	/^    protected function parseWhereItem($key,$val) {$/;"	f
parseXmlAttr	ThinkPHP/Lib/Template/TagLib.class.php	/^    public function parseXmlAttr($attr,$tag) {$/;"	f
parseXmlAttrs	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function parseXmlAttrs($attrs) {$/;"	f
parseXmlTag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function parseXmlTag($tagLib,$tag,$attr,$content) {$/;"	f
parse_name	ThinkPHP/Common/common.php	/^function parse_name($name, $type=0) {$/;"	f
part	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            $part =  pathinfo($_SERVER['PATH_INFO']);$/;"	v
patchValidate	ThinkPHP/Lib/Core/Model.class.php	/^    protected $patchValidate    =   false;$/;"	v
path	ThinkPHP/Common/common.php	/^    $path           =   explode('\/',$name);$/;"	v
path	ThinkPHP/Common/functions.php	/^            $path       =   explode($depr,$url);$/;"	v
path	ThinkPHP/Common/functions.php	/^    $path       =   empty($path) ? BASE_LIB_PATH : $path;$/;"	v
path	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $path   = explode('\/',$info['path']);$/;"	v
path	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $path = explode('\/',$url);$/;"	v
path	ThinkPHP/Lib/Core/Widget.class.php	/^                $path = CORE_PATH;$/;"	v
path	ThinkPHP/Lib/Core/Widget.class.php	/^                $path = EXTEND_PATH;$/;"	v
path	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $path   =  $this->options['temp'];$/;"	v
path	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $path   =   explode('\/',$templateName);$/;"	v
paths	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $paths = explode('\/',$regx);$/;"	v
paths	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/'));$/;"	v
paths	ThinkPHP/Lib/Core/Think.class.php	/^        $paths  =   explode(',',C('APP_AUTOLOAD_PATH'));$/;"	v
patterns	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $patterns       = '\/'.$begin.$parseTag.$n1.$end.'(.*?)'.$begin.'\\\/'.$parseTag.'(\\s*?)'.$end.'\/eis';$/;"	v
patterns	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $patterns       = '\/'.$begin.$parseTag.$n1.'\\\/(\\s*?)'.$end.'\/eis';$/;"	v
pconnect	ThinkPHP/Lib/Core/Db.class.php	/^    protected $pconnect   = false;$/;"	v
pconnect	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $pconnect   = !empty($config['params']['persist'])? $config['params']['persist']:$this->pconnect;$/;"	v
pk	ThinkPHP/Lib/Core/Model.class.php	/^            $pk   =  $this->getPk();$/;"	v
pk	ThinkPHP/Lib/Core/Model.class.php	/^        $pk         =   $this->getPk();$/;"	v
pk	ThinkPHP/Lib/Core/Model.class.php	/^        $pk   =  $this->getPk();$/;"	v
pk	ThinkPHP/Lib/Core/Model.class.php	/^    protected $pk               =   'id';$/;"	v
pkValue	ThinkPHP/Lib/Core/Model.class.php	/^            $pkValue    =   $options['where'][$pk];$/;"	v
pos	ThinkPHP/Common/functions.php	/^        $pos    =   array_search('unknown',$arr);$/;"	v
prefix	ThinkPHP/Common/functions.php	/^        $prefix = empty($value) ? $config['prefix'] : $value;$/;"	v
prefix	ThinkPHP/Common/functions.php	/^    $prefix   =  C('SESSION_PREFIX');$/;"	v
query	ThinkPHP/Lib/Core/Model.class.php	/^    public function query($sql,$parse=false) {$/;"	f
query	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function query($str) {$/;"	f
query	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function query($str) {$/;"	f
queryID	ThinkPHP/Lib/Core/Db.class.php	/^    protected $queryID    = null;$/;"	v
queryID	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $this->queryID = mysql_query($str, $this->_linkID);$/;"	v
queryID	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $this->queryID = null;$/;"	v
queryID	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $this->queryID = $this->_linkID->query($str);$/;"	v
queryID	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $this->queryID = null;$/;"	v
queryStr	ThinkPHP/Lib/Core/Db.class.php	/^    protected $queryStr   = '';$/;"	v
queryStr	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $this->queryStr = $str;$/;"	v
queryStr	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $this->queryStr = $str;$/;"	v
queue	ThinkPHP/Lib/Core/Cache.class.php	/^        $queue  =  isset($this->options['queue'])?$this->options['queue']:'file';$/;"	v
queue	ThinkPHP/Lib/Core/Cache.class.php	/^    protected function queue($key) {$/;"	f
queue_name	ThinkPHP/Lib/Core/Cache.class.php	/^        $queue_name=isset($this->options['queue_name'])?$this->options['queue_name']:'think_queue';$/;"	v
r	ThinkPHP/Lib/Core/Db.class.php	/^                    $r = C('DB_SLAVE_NO');$/;"	v
r	ThinkPHP/Lib/Core/Db.class.php	/^                    $r = floor(mt_rand(C('DB_MASTER_NUM'),count($_config['hostname'])-1));   \/\/ 每次随机连接的数据库$/;"	v
r	ThinkPHP/Lib/Core/Db.class.php	/^                $r  =   floor(mt_rand(0,C('DB_MASTER_NUM')-1));$/;"	v
r	ThinkPHP/Lib/Core/Db.class.php	/^            $r = floor(mt_rand(0,count($_config['hostname'])-1));   \/\/ 每次随机连接的数据库$/;"	v
rand	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $rand       = rand(); \/\/添加随机数，防止嵌套变量冲突$/;"	v
range	ThinkPHP/Lib/Core/Model.class.php	/^                $range   = is_array($rule)? $rule : explode(',',$rule);$/;"	v
record	ThinkPHP/Lib/Core/Log.class.php	/^    static function record($message,$level=self::ERR,$record=false) {$/;"	f
redirect	ThinkPHP/Common/functions.php	/^function redirect($url, $time=0, $msg='') {$/;"	f
redirect	ThinkPHP/Lib/Core/Action.class.php	/^    protected function redirect($url,$params=array(),$delay=0,$msg='') {$/;"	f
regex	ThinkPHP/Lib/Core/Model.class.php	/^    public function regex($value,$rule) {$/;"	f
regx	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $regx =  substr_replace($regx,'',0,strlen($matches[0]));$/;"	v
regx	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $regx = str_replace($depr,'\/',$regx);$/;"	v
regx	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $regx = trim($_SERVER['PATH_INFO'],'\/');$/;"	v
render	ThinkPHP/Lib/Core/View.class.php	/^    private function render($content,$charset='',$contentType=''){$/;"	f
render	ThinkPHP/Lib/Core/Widget.class.php	/^    abstract public function render($data);$/;"	f
renderFile	ThinkPHP/Lib/Core/Widget.class.php	/^    protected function renderFile($templateFile='',$var='') {$/;"	f
replace	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^            $replace =  array_merge($replace,C('TMPL_PARSE_STRING'));$/;"	v
replace	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^        $replace =  array($/;"	v
replace	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function replace($data,$options=array()) {$/;"	f
replace	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function replace($data,$options=array()) {$/;"	f
replace	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $replace    =   isset($array['replace'])?$array['replace']:$this->config['layout_item'];$/;"	v
replace	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $replace        = array('><','>');$/;"	v
replace	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $replace   =  isset($this->block[$name])?   $this->block[$name]   :   $content;$/;"	v
replaceBlock	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function replaceBlock($name,$content) {$/;"	f
replacement	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $replacement    = "\\$this->parseXmlTag('$tagLib','$tag','$1','$2')";$/;"	v
replacement	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $replacement    = "\\$this->parseXmlTag('$tagLib','$tag','$1','')";$/;"	v
requireHtmlCache	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^    static private function requireHtmlCache() {$/;"	f
require_array	ThinkPHP/Common/common.php	/^function require_array($array,$return=false){$/;"	f
require_cache	ThinkPHP/Common/common.php	/^function require_cache($filename) {$/;"	f
restoreLiteral	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function restoreLiteral($tag) {$/;"	f
result	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                        $result =   array();$/;"	v
result	ThinkPHP/Lib/Core/Db.class.php	/^        $result   = $this->query($sql,$this->parseBind(!empty($options['bind'])?$options['bind']:array()));$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^            $result = $this->db->select($options);$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^        $result     =   $this->db->update($data,$options);$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^        $result  =    $this->db->delete($options);$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^        $result = $this->db->insert($data,$options,$replace);$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^        $result = $this->db->insertAll($dataList,$options,$replace);$/;"	v
result	ThinkPHP/Lib/Core/Model.class.php	/^        if(false === $result = $this->db->selectInsert($fields?$fields:$options['field'],$table?$table:$this->getTableName(),$options)){$/;"	v
result	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^        $result  =   file_put_contents($filename,$data);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $result = mysql_query('COMMIT', $this->_linkID);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $result = mysql_query('ROLLBACK', $this->_linkID);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $result =   $this->query($sql);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $result =   $this->query('SHOW COLUMNS FROM '.$this->parseKey($tableName));$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $result =   mysql_query($str, $this->_linkID) ;$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $result = array();$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $result = $this->_linkID->commit();$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $result = $this->_linkID->rollback();$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $result =   $this->_linkID->query($str);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $result =   $this->query($sql);$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $result =   $this->query('SHOW COLUMNS FROM '.$this->parseKey($tableName));$/;"	v
result	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $result = array();$/;"	v
resultSet	ThinkPHP/Lib/Core/Model.class.php	/^            $resultSet          =   $this->db->select($options);$/;"	v
resultSet	ThinkPHP/Lib/Core/Model.class.php	/^        $resultSet          =   $this->db->select($options);$/;"	v
resultSet	ThinkPHP/Lib/Core/Model.class.php	/^        $resultSet  = $this->db->select($options);$/;"	v
return	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                        if($match)  return $return = $this->parseRule($rule,$route,$regx);$/;"	v
return	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    return $return = $this->parseRegex($matches,$route,$regx);$/;"	v
return	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $return = false;$/;"	v
return	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        if(!C('URL_ROUTER_ON')) return $return = false;$/;"	v
return	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        if(empty($regx)) return $return = true;$/;"	v
return	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $return   =  false;$/;"	v
returnResult	ThinkPHP/Lib/Core/Model.class.php	/^    protected function returnResult($data,$type=''){$/;"	f
rm	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    public function rm($name) {$/;"	f
rollback	ThinkPHP/Lib/Core/Model.class.php	/^    public function rollback() {$/;"	f
rollback	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function rollback() {$/;"	f
rollback	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function rollback() {$/;"	f
root	ThinkPHP/Common/functions.php	/^function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') {$/;"	v
route	ThinkPHP/Common/functions.php	/^            $route      =   true;$/;"	v
routerCheck	ThinkPHP/Lib/Core/Dispatcher.class.php	/^    static public function routerCheck() {$/;"	f
routes	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $routes = C('URL_ROUTE_RULES');$/;"	v
rule	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                                $rule =  substr($rule,0,-1);$/;"	v
rule	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            foreach ($routes as $rule=>$route){$/;"	v
rule	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $rule =  explode('\/',$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = $html[0];$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule   = str_ireplace($/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                $rule  = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule);$/;"	v
rule	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^                if(!empty($html[2])) $rule    =   $html[2]($rule); \/\/ 应用附加函数$/;"	v
rule	ThinkPHP/Lib/Core/Db.class.php	/^                    $rule   = 'AND';$/;"	v
rule	ThinkPHP/Lib/Core/Db.class.php	/^                $rule  = isset($val[$count-1])?strtoupper($val[$count-1]):'';$/;"	v
rule	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                        $rule =  $rules['*'];$/;"	v
rule	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                    $rule =  $rules[$subDomain];$/;"	v
rule	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $rule = $rules[$_SERVER['HTTP_HOST']];$/;"	v
rule	ThinkPHP/Lib/Core/Model.class.php	/^            $rule       =   $validate[strtolower($rule)];$/;"	v
rules	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            $rules      = C('APP_SUB_DOMAIN_RULES');$/;"	v
run	Lib/Action/WebimAction.class.php	/^	public function run() {$/;"	f
run	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^    public function run(&$return){$/;"	f
run	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^    public function run(&$content){$/;"	f
run	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^    public function run(&$_data){$/;"	f
run	ThinkPHP/Lib/Behavior/ReadHtmlCacheBehavior.class.php	/^    public function run(&$params){$/;"	f
run	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^    public function run(&$params){$/;"	f
run	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^    public function run(&$content){$/;"	f
run	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^    public function run(&$content){$/;"	f
run	ThinkPHP/Lib/Behavior/WriteHtmlCacheBehavior.class.php	/^    public function run(&$content){$/;"	f
run	ThinkPHP/Lib/Core/App.class.php	/^    static public function run() {$/;"	f
run	ThinkPHP/Lib/Core/Behavior.class.php	/^    abstract public function run(&$params);$/;"	f
run	php.tags	/^run	Lib\/Action\/WebimAction.class.php	\/^	public function run() {$\/;"	f$/;"	f
runtime	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^                $runtime = $this->showTime();$/;"	v
runtime	ThinkPHP/ThinkPHP.php	/^	$runtime = defined('MODE_NAME')?'~'.strtolower(MODE_NAME).'_runtime.php':'~runtime.php';$/;"	v
save	ThinkPHP/Lib/Core/Log.class.php	/^    static function save($type='',$destination='',$extra='') {$/;"	f
save	ThinkPHP/Lib/Core/Model.class.php	/^    public function save($data='',$options=array()) {$/;"	f
scope	ThinkPHP/Lib/Core/Model.class.php	/^    public function scope($scope='',$args=NULL){$/;"	f
scopes	ThinkPHP/Lib/Core/Model.class.php	/^            $scopes         =   explode(',',$scope);$/;"	v
select	ThinkPHP/Lib/Core/Db.class.php	/^    public function select($options=array()) {$/;"	f
select	ThinkPHP/Lib/Core/Model.class.php	/^    public function select($options=array()) {$/;"	f
selectAdd	ThinkPHP/Lib/Core/Model.class.php	/^    public function selectAdd($fields='',$table='',$options=array()) {$/;"	f
selectInsert	ThinkPHP/Lib/Core/Db.class.php	/^    public function selectInsert($fields,$table,$options=array()) {$/;"	f
selectSql	ThinkPHP/Lib/Core/Db.class.php	/^    protected $selectSql  = 'SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT% %UNION%%COMMENT%';$/;"	v
send_http_status	ThinkPHP/Common/functions.php	/^function send_http_status($code) {$/;"	f
session	ThinkPHP/Common/functions.php	/^function session($name,$value='') {$/;"	f
set	ThinkPHP/Lib/Driver/Cache/CacheFile.class.php	/^    public function set($name,$value,$expire=null) {$/;"	f
set	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public function set($name,$value) {$/;"	f
setDec	ThinkPHP/Lib/Core/Model.class.php	/^    public function setDec($field,$step=1) {$/;"	f
setField	ThinkPHP/Lib/Core/Model.class.php	/^    public function setField($field,$value='') {$/;"	f
setInc	ThinkPHP/Lib/Core/Model.class.php	/^    public function setInc($field,$step=1) {$/;"	f
setModel	ThinkPHP/Lib/Core/Db.class.php	/^    public function setModel($model){$/;"	f
setOptions	ThinkPHP/Lib/Core/Cache.class.php	/^    public function setOptions($name,$value) {$/;"	f
setProperty	ThinkPHP/Lib/Core/Model.class.php	/^    public function setProperty($name,$value) {$/;"	f
show	ThinkPHP/Lib/Core/Action.class.php	/^    protected function show($content,$charset='',$contentType='',$prefix='') {$/;"	f
showTime	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^    private function showTime() {$/;"	f
showTime	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^        $showTime   =   'Process: '.G('beginTime','viewEndTime').'s ';$/;"	v
showTime	ThinkPHP/Lib/Behavior/ShowRuntimeBehavior.class.php	/^    private function showTime() {$/;"	f
showTrace	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^    private function showTrace() {$/;"	f
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql    = $this->buildSelectSql($options);$/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql   =    'INSERT INTO '.$this->parseTable($table).' ('.implode(',', $fields).') ';$/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql   =  ($replace?'REPLACE':'INSERT').' INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')';$/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql   = 'DELETE FROM '$/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql   = 'UPDATE '$/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql   = str_replace($/;"	v
sql	ThinkPHP/Lib/Core/Db.class.php	/^        $sql  =   $this->parseSql($this->selectSql,$options);$/;"	v
sql	ThinkPHP/Lib/Core/Model.class.php	/^            $sql    =   strtr($sql,array('__TABLE__'=>$this->getTableName(),'__PREFIX__'=>C('DB_PREFIX')));$/;"	v
sql	ThinkPHP/Lib/Core/Model.class.php	/^            $sql  =   $this->db->parseSql($sql,$options);$/;"	v
sql	ThinkPHP/Lib/Core/Model.class.php	/^            $sql  = vsprintf($sql,$parse);$/;"	v
sql	ThinkPHP/Lib/Core/Model.class.php	/^        $sql  =   $this->parseSql($sql,$parse);$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^           $sql    = 'SHOW TABLES ';$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^           $sql    = 'SHOW TABLES FROM '.$dbName;$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $sql   =  'REPLACE INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')';$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $sql   =  ($replace?'REPLACE':'INSERT').' INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES '.implode(',',$values);$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $sql    = !empty($dbName)?'SHOW TABLES FROM '.$dbName:'SHOW TABLES ';$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $sql   =  'REPLACE INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')';$/;"	v
sql	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $sql   =  ($replace?'REPLACE':'INSERT').' INTO '.$this->parseTable($options['table']).' ('.implode(',', $fields).') VALUES '.implode(',',$values);$/;"	v
start	ThinkPHP/Lib/Core/Model.class.php	/^                if(!is_numeric($start)) $start   =  strtotime($start);$/;"	v
start	ThinkPHP/Lib/Core/Think.class.php	/^    static public function start() {$/;"	f
start	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $start      = $value; break;$/;"	v
start	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $start 		= 0;$/;"	v
startTrans	ThinkPHP/Lib/Core/Model.class.php	/^    public function startTrans() {$/;"	f
startTrans	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^    public function startTrans() {$/;"	f
startTrans	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^    public function startTrans() {$/;"	f
status	ThinkPHP/Lib/Core/Think.class.php	/^            $status  =  C('APP_STATUS');$/;"	v
step	ThinkPHP/Common/common.php	/^function N($key, $step=0,$save=false) {$/;"	v
step	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $step       = $value; break;$/;"	v
step	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $step 		= 1;$/;"	v
str	ThinkPHP/Common/functions.php	/^        $str    = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>";$/;"	v
str	ThinkPHP/Lib/Core/Db.class.php	/^                        $str   =  array();$/;"	v
str	ThinkPHP/Lib/Core/Db.class.php	/^            $str  =   'UNION ';$/;"	v
str	ThinkPHP/Lib/Core/Db.class.php	/^            $str  =   'UNION ALL ';$/;"	v
str	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $str    =   'explode(\\',\\','.$value.')';$/;"	v
str	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $str    =   'is_array('.$value.')?'.$value.':explode(\\',\\','.$value.')';$/;"	v
stripPreg	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    private function stripPreg($str) {$/;"	f
stripStr	ThinkPHP/Common/common.php	/^    $stripStr   = '';$/;"	v
strip_whitespace	ThinkPHP/Common/common.php	/^function strip_whitespace($content) {$/;"	f
subDomain	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $subDomain  = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.')));$/;"	v
success	ThinkPHP/Lib/Core/Action.class.php	/^    protected function success($message='',$jumpUrl='',$ajax=false) {$/;"	f
suffix	ThinkPHP/Common/functions.php	/^                $suffix = substr($suffix, 0, $pos);$/;"	v
suffix	ThinkPHP/Common/functions.php	/^            $suffix   =  $suffix===true?C('URL_HTML_SUFFIX'):$suffix;$/;"	v
switchModel	ThinkPHP/Lib/Core/Model.class.php	/^    public function switchModel($type,$vars=array()) {$/;"	f
t	ThinkPHP/Lib/Core/View.class.php	/^                $t = C('VAR_TEMPLATE');$/;"	v
tLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tLib       =   Think::instance($className);$/;"	v
tLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tLib       =  Think::instance('TagLib'.ucwords(strtolower($tagLib)));$/;"	v
tVar	ThinkPHP/Lib/Core/View.class.php	/^            $this->tVar   =  array_merge($this->tVar,$name);$/;"	v
tVar	ThinkPHP/Lib/Core/View.class.php	/^    protected $tVar     =   array();$/;"	v
tVar	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $this->tVar         =   $templateVar;$/;"	v
tVar	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    public      $tVar            =   array();$/;"	v
table	ThinkPHP/Lib/Core/Db.class.php	/^            foreach ($tables as $table=>$alias){$/;"	v
tableName	ThinkPHP/Lib/Core/Model.class.php	/^            $tableName  = !empty($this->tablePrefix) ? $this->tablePrefix : '';$/;"	v
tableName	ThinkPHP/Lib/Core/Model.class.php	/^    protected $tableName        =   '';$/;"	v
tablePrefix	ThinkPHP/Common/common.php	/^function M($name='', $tablePrefix='',$connection='') {$/;"	v
tablePrefix	ThinkPHP/Lib/Core/Model.class.php	/^            $this->tablePrefix = $tablePrefix;$/;"	v
tablePrefix	ThinkPHP/Lib/Core/Model.class.php	/^            $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX');$/;"	v
tablePrefix	ThinkPHP/Lib/Core/Model.class.php	/^            $this->tablePrefix = '';$/;"	v
tablePrefix	ThinkPHP/Lib/Core/Model.class.php	/^    protected $tablePrefix      =   '';$/;"	v
tables	ThinkPHP/Lib/Core/Db.class.php	/^            $tables  =  $array;$/;"	v
tables	ThinkPHP/Lib/Core/Db.class.php	/^            $tables  =  explode(',',$tables);$/;"	v
tabs	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^                $tabs   =   C('TRACE_PAGE_TABS');$/;"	v
tabs	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $tabs   =   C('TRACE_PAGE_TABS');$/;"	v
tag	ThinkPHP/Common/common.php	/^function tag($tag, &$params=NULL) {$/;"	f
tag	ThinkPHP/Common/runtime.php	/^    foreach ($tags as $tag=>$item){$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'_notdefined');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'assign');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'compare');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'define');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'defined');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'elseif');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'empty');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'foreach');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'if');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'import');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'notempty');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'notpresent');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'present');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'range');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag        =   $this->parseXmlAttr($attr,'switch');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag    = $this->parseXmlAttr($attr,'case');$/;"	v
tag	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $tag   =    $this->parseXmlAttr($attr,'volist');$/;"	v
tag	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                    $tag  =  $name;$/;"	v
tagLib	ThinkPHP/Lib/Template/TagLib.class.php	/^        $this->tagLib  = strtolower(substr(get_class($this),6));$/;"	v
tagLib	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $tagLib   ='';$/;"	v
tagLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $this->tagLib   = explode(',',$array['name']);$/;"	v
tagLib	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected   $tagLib          =   array();$/;"	v
tagLibs	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tagLibs =  explode(',',C('TAGLIB_PRE_LOAD'));$/;"	v
tagLibs	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tagLibs =  explode(',',C('TAGLIB_BUILD_IN'));$/;"	v
tagList	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $tagList  = array();$/;"	v
tagStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tagStr = stripslashes($tagStr);$/;"	v
tags	ThinkPHP/Common/common.php	/^            $tags = array_unique(array_merge($extends,$tags));$/;"	v
tags	ThinkPHP/Common/common.php	/^        $tags = $extends;$/;"	v
tags	ThinkPHP/Common/common.php	/^    $tags       = C('tags.' . $tag);$/;"	v
tags	ThinkPHP/Common/runtime.php	/^    $tags = C('extends');$/;"	v
tags	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^    protected $tags   =  array($/;"	v
tags	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $tags     = array();\/\/ 标签定义$/;"	v
tags	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $tags       = explode(',',$val['alias']);$/;"	v
tags	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tags = array($name);$/;"	v
template	Runtime/~runtime.php	/^<?php $GLOBALS['_beginTime'] = microtime(TRUE); defined('APP_NAME') or define('APP_NAME','Webim'); defined('APP_PATH') or define('APP_PATH','.\/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_PATH') or define('THINK_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/'); defined('APP_DEBUG') or define('APP_DEBUG',false); defined('RUNTIME_PATH') or define('RUNTIME_PATH','.\/Runtime\/'); defined('RUNTIME_FILE') or define('RUNTIME_FILE','.\/Runtime\/~runtime.php'); defined('THINK_VERSION') or define('THINK_VERSION','3.1.3'); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',0); defined('IS_WIN') or define('IS_WIN',0); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','\/index.php'); defined('__ROOT__') or define('__ROOT__',''); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('CORE_PATH') or define('CORE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/'); defined('EXTEND_PATH') or define('EXTEND_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/'); defined('MODE_PATH') or define('MODE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Mode\/'); defined('ENGINE_PATH') or define('ENGINE_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Engine\/'); defined('VENDOR_PATH') or define('VENDOR_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Vendor\/'); defined('LIBRARY_PATH') or define('LIBRARY_PATH','\/Users\/erylee\/WebServer\/ThinkPHP\/Extend\/Library\/'); defined('COMMON_PATH') or define('COMMON_PATH','.\/Common\/'); defined('LIB_PATH') or define('LIB_PATH','.\/Lib\/'); defined('CONF_PATH') or define('CONF_PATH','.\/Conf\/'); defined('LANG_PATH') or define('LANG_PATH','.\/Lang\/'); defined('TMPL_PATH') or define('TMPL_PATH','.\/Tpl\/'); defined('HTML_PATH') or define('HTML_PATH','.\/Html\/'); defined('LOG_PATH') or define('LOG_PATH','.\/Runtime\/Logs\/'); defined('TEMP_PATH') or define('TEMP_PATH','.\/Runtime\/Temp\/'); defined('DATA_PATH') or define('DATA_PATH','.\/Runtime\/Data\/'); defined('CACHE_PATH') or define('CACHE_PATH','.\/Runtime\/Cache\/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); function T($template='',$layer=''){ if(is_file($template)) { return $template; } if(false === strpos($template,':\/\/')){ $template = APP_NAME.':\/\/'.str_replace(':', '\/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $group = isset($info['user'])?$info['user'].'\/':(defined('GROUP_NAME')?GROUP_NAME.'\/':''); $app = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); if(($list = C('EXTEND_GROUP_LIST')) && isset($list[$app])){ $baseUrl = $list[$app].'\/'.$group.$layer.'\/'; }elseif(1==C('APP_GROUP_MODE')){ $baseUrl = dirname(BASE_LIB_PATH).'\/'.$group.$layer.'\/'; }else{ $baseUrl = TMPL_PATH.$group; } if('' == $file) { $file = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($file, '\/')){ $file = MODULE_NAME . C('TMPL_FILE_DEPR') . $file; } return $baseUrl.$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; default: return NULL; } if(C('VAR_FILTERS')) { $_filters = explode(',',C('VAR_FILTERS')); foreach($_filters as $_filter){ array_walk_recursive($input,$_filter); } } if(empty($name)) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $data = array_map($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])\/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace("\/_([a-zA-Z])\/e", "strtoupper('\\\\1')", $name)); } else { return strtolower(trim(preg_replace("\/[A-Z]\/", "_\\\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function require_array($array,$return=false){ foreach ($array as $file){ if (require_cache($file) && $return) return true; } if($return) return false; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && C('APP_FILE_CASE')) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext='.class.php') { static $_file = array(); $class = str_replace(array('.', '#'), array('\/', '.'), $class); if ('' === $baseUrl && false === strpos($class, '\/')) { return alias_import($class); } if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('\/', $class); if (empty($baseUrl)) { $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; if ('@' == $class_strut[0] || APP_NAME == $class_strut[0]) { $baseUrl = dirname($libPath); $class = substr_replace($class, basename($libPath).'\/', 0, strlen($class_strut[0]) + 1); }elseif ('think' == strtolower($class_strut[0])){ $baseUrl = CORE_PATH; $class = substr($class,6); }elseif (in_array(strtolower($class_strut[0]), array('org', 'com'))) { $baseUrl = LIBRARY_PATH; }else { $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); $baseUrl = APP_PATH . '..\/' . $class_strut[0] . '\/'.basename($libPath).'\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('\/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@\/')) { $baseUrl = COMMON_PATH; $name = substr($name, 2); } else { $baseUrl = EXTEND_PATH . 'Function\/'; } } if (substr($baseUrl, -1) != '\/') $baseUrl .= '\/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function alias_import($alias, $classfile='') { static $_alias = array(); if (is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); }elseif ('' !== $classfile) { $_alias[$alias] = $classfile; return; } }elseif (is_array($alias)) { $_alias = array_merge($_alias,$alias); return; } return false; } function D($name='',$layer='') { if(empty($name)) return new Model; static $_model = array(); $layer = $layer?$layer:C('DEFAULT_M_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = C('DEFAULT_APP'); $name = $app.'\/'.$layer.'\/'.$name; } if(isset($_model[$name])) return $_model[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class)) { $model = new $class(basename($name)); }else { $model = new Model(basename($name)); } $_model[$name] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Model'; } $guid = $tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function A($name,$layer='',$common=false) { static $_action = array(); $layer = $layer?$layer:C('DEFAULT_C_LAYER'); if(strpos($name,':\/\/')) { list($app) = explode(':\/\/',$name); $name = str_replace(':\/\/','\/'.$layer.'\/',$name); }else{ $app = '@'; $name = '@\/'.$layer.'\/'.$name; } if(isset($_action[$name])) return $_action[$name]; $path = explode('\/',$name); if($list = C('EXTEND_GROUP_LIST') && isset($list[$app])){ $baseUrl = $list[$app]; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif(count($path)>3 && 1 == C('APP_GROUP_MODE')) { $baseUrl = $path[0]== '@' ? dirname(BASE_LIB_PATH) : APP_PATH.'..\/'.$path[0].'\/'.C('APP_GROUP_PATH').'\/'; import($path[2].'\/'.$path[1].'\/'.$path[3].$layer,$baseUrl); }elseif($common) { import(str_replace('@\/','',$name).$layer,LIB_PATH); }else{ import($name.$layer); } $class = basename($name.$layer); if(class_exists($class,false)) { $action = new $class(); $_action[$name] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function C($name=null, $value=null) { static $_config = array(); if (empty($name)) { if(!empty($value) && $array = S('c_'.$value)) { $_config = array_merge($_config, array_change_key_case($array)); } return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name)); if(!empty($value)) { S('c_'.$value,$_config); } return; } return null; } function tag($tag, &$params=NULL) { $extends = C('extends.' . $tag); $tags = C('tags.' . $tag); if (!empty($tags)) { if(empty($tags['_overlay']) && !empty($extends)) { $tags = array_unique(array_merge($extends,$tags)); }elseif(isset($tags['_overlay'])){ unset($tags['_overlay']); } }elseif(!empty($extends)) { $tags = $extends; } if($tags) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach ($tags as $key=>$name) { if(!is_int($key)) { $name = $key; } B($name, $params); } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } }else{ return false; } } function add_tag_behavior($tag,$behavior,$path='') { $array = C('tags.'.$tag); if(!$array) { $array = array(); } if($path) { $array[$behavior] = $path; }else{ $array[] = $behavior; } C('tags.'.$tag,$array); } function B($name, &$params=NULL) { if(strpos($name,'\/')){ list($name,$method) = explode('\/',$name); }else{ $method = 'run'; } $class = $name.'Behavior'; if(APP_DEBUG) { G('behaviorStart'); } $behavior = new $class(); $behavior->$method($params); if(APP_DEBUG) { G('behaviorEnd'); trace($name.' Behavior ::'.$method.' [ RunTime:'.G('behaviorStart','behaviorEnd',6).'s ]','','INFO'); } } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); if('ERR' == $level && C('TRACE_EXCEPTION')) { throw_exception($info); } $level = strtoupper($level); if(!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { Log::record($info,$level,$record); } } } class Think { private static $_instance = array(); static public function start() { register_shutdown_function(array('Think','fatalError')); set_error_handler(array('Think','appError')); set_exception_handler(array('Think','appException')); spl_autoload_register(array('Think', 'autoload')); App::run(); return ; } public static function autoload($class) { if(alias_import($class)) return ; $libPath = defined('BASE_LIB_PATH')?BASE_LIB_PATH:LIB_PATH; $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ?GROUP_NAME.'\/':''; $file = $class.'.class.php'; if(substr($class,-8)=='Behavior') { if(require_array(array( CORE_PATH.'Behavior\/'.$file, EXTEND_PATH.'Behavior\/'.$file, LIB_PATH.'Behavior\/'.$file, $libPath.'Behavior\/'.$file),true) || (defined('MODE_NAME') && require_cache(MODE_PATH.ucwords(MODE_NAME).'\/Behavior\/'.$file))) { return ; } }elseif(substr($class,-5)=='Model'){ if(require_array(array( LIB_PATH.'Model\/'.$group.$file, $libPath.'Model\/'.$file, EXTEND_PATH.'Model\/'.$file),true)) { return ; } }elseif(substr($class,-6)=='Action'){ if(require_array(array( LIB_PATH.'Action\/'.$group.$file, $libPath.'Action\/'.$file, EXTEND_PATH.'Action\/'.$file),true)) { return ; } }elseif(substr($class,0,5)=='Cache'){ if(require_array(array( EXTEND_PATH.'Driver\/Cache\/'.$file, CORE_PATH.'Driver\/Cache\/'.$file),true)){ return ; } }elseif(substr($class,0,2)=='Db'){ if(require_array(array( EXTEND_PATH.'Driver\/Db\/'.$file, CORE_PATH.'Driver\/Db\/'.$file),true)){ return ; } }elseif(substr($class,0,8)=='Template'){ if(require_array(array( EXTEND_PATH.'Driver\/Template\/'.$file, CORE_PATH.'Driver\/Template\/'.$file),true)){ return ; } }elseif(substr($class,0,6)=='TagLib'){ if(require_array(array( EXTEND_PATH.'Driver\/TagLib\/'.$file, CORE_PATH.'Driver\/TagLib\/'.$file),true)) { return ; } } $paths = explode(',',C('APP_AUTOLOAD_PATH')); foreach ($paths as $path){ if(import($path.'.'.$class)) return ; } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func_array(array(&$o, $method)); else self::$_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('throw_exception'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } Log::record($error['message'],Log::ERR); halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); function_exists('halt')?halt($errorStr):exit('ERROR:'.$errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { if(C('LOG_RECORD')) Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); function_exists('halt')?halt($e):exit('ERROR:'.$e['message']); break; } } } } class ThinkException extends Exception { } abstract class Behavior { protected $options = array(); public function __construct() { if(!empty($this->options)) { foreach ($this->options as $name=>$val){ if(NULL !== C($name)) { $this->options[$name] = C($name); }else{ C($name,$val); } } array_change_key_case($this->options); } } public function __get($name){ return $this->options[strtolower($name)]; } abstract public function run(&$params); } class ReadHtmlCacheBehavior extends Behavior { protected $options = array( 'HTML_CACHE_ON' => false, 'HTML_CACHE_TIME' => 60, 'HTML_CACHE_RULES' => array(), 'HTML_FILE_SUFFIX' => '.html', ); public function run(&$params){ if(C('HTML_CACHE_ON')) { $cacheTime = $this->requireHtmlCache(); if( false !== $cacheTime && $this->checkHTMLCache(HTML_FILE_NAME,$cacheTime)) { readfile(HTML_FILE_NAME); exit(); } } } static private function requireHtmlCache() { $htmls = C('HTML_CACHE_RULES'); if(!empty($htmls)) { $htmls = array_change_key_case($htmls); $moduleName = strtolower(MODULE_NAME); $actionName = strtolower(ACTION_NAME); if(isset($htmls[$moduleName.':'.$actionName])) { $html = $htmls[$moduleName.':'.$actionName]; }elseif(isset($htmls[$moduleName.':'])){ $html = $htmls[$moduleName.':']; }elseif(isset($htmls[$actionName])){ $html = $htmls[$actionName]; }elseif(isset($htmls['*'])){ $html = $htmls['*']; }elseif(isset($htmls['empty:index']) && !class_exists(MODULE_NAME.'Action')){ $html = $htmls['empty:index']; }elseif(isset($htmls[$moduleName.':_empty']) && $this->isEmptyAction(MODULE_NAME,ACTION_NAME)){ $html = $htmls[$moduleName.':_empty']; } if(!empty($html)) { $rule = $html[0]; $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)\\|(\\w+)}\/e',"\\\\3(\\$\\\\1['\\\\2'])",$rule); $rule = preg_replace('\/{\\$(_\\w+)\\.(\\w+)}\/e',"\\$\\\\1['\\\\2']",$rule); $rule = preg_replace('\/{(\\w+)\\|(\\w+)}\/e',"\\\\2(\\$_GET['\\\\1'])",$rule); $rule = preg_replace('\/{(\\w+)}\/e',"\\$_GET['\\\\1']",$rule); $rule = str_ireplace( array('{:app}','{:module}','{:action}','{:group}'), array(APP_NAME,MODULE_NAME,ACTION_NAME,defined('GROUP_NAME')?GROUP_NAME:''), $rule); $rule = preg_replace('\/{|(\\w+)}\/e',"\\\\1()",$rule); if(!empty($html[2])) $rule = $html[2]($rule); $cacheTime = isset($html[1])?$html[1]:C('HTML_CACHE_TIME'); define('HTML_FILE_NAME',HTML_PATH . $rule.C('HTML_FILE_SUFFIX')); return $cacheTime; } } return false; } static public function checkHTMLCache($cacheFile='',$cacheTime='') { if(!is_file($cacheFile)){ return false; }elseif (filemtime(C('TEMPLATE_NAME')) > filemtime($cacheFile)) { return false; }elseif(!is_numeric($cacheTime) && function_exists($cacheTime)){ return $cacheTime($cacheFile); }elseif ($cacheTime != 0 && NOW_TIME > filemtime($cacheFile)+$cacheTime) { return false; } return true; } static private function isEmptyAction($module,$action) { $className = $module.'Action'; $class = new $className; return !method_exists($class,$action); } } class CheckRouteBehavior extends Behavior { protected $options = array( 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array(), ); public function run(&$return){ $regx = trim($_SERVER['PATH_INFO'],'\/'); if(empty($regx)) return $return = true; if(!C('URL_ROUTER_ON')) return $return = false; $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { $depr = C('URL_PATHINFO_DEPR'); $regx = str_replace($depr,'\/',$regx); foreach ($routes as $rule=>$route){ if(0===strpos($rule,'\/') && preg_match($rule,$regx,$matches)) { return $return = $this->parseRegex($matches,$route,$regx); }else{ $len1 = substr_count($regx,'\/'); $len2 = substr_count($rule,'\/'); if($len1>=$len2) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = $this->checkUrlMatch($regx,$rule); if($match) return $return = $this->parseRule($rule,$route,$regx); } } } } $return = false; } private function checkUrlMatch($regx,$rule) { $m1 = explode('\/',$regx); $m2 = explode('\/',$rule); $match = true; foreach ($m2 as $key=>$val){ if(':' == substr($val,0,1)) { if(strpos($val,'\\\\')) { $type = substr($val,-1); if('d'==$type && !is_numeric($m1[$key])) { $match = false; break; } }elseif(strpos($val,'^')){ $array = explode('|',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { $match = false; break; } } }elseif(0 !== strcasecmp($val,$m1[$key])){ $match = false; break; } } return $match; } private function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('\/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'\/')){ $path = explode('\/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_GROUP')] = array_pop($path); } } return $var; } private function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('\/',$regx); $matches = array(); $rule = explode('\/',$rule); foreach ($rule as $item){ if(0===strpos($item,':')) { if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if($paths) { preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url); if(0=== strpos($url,'\/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = $this->parseUrl($url); $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace('@(\\w+)\\\/([^,\\\/]+)@e', '$var[strtolower(\\'\\\\1\\')]=strip_tags(\\'\\\\2\\');', $regx); } if(is_array($route) && isset($route[1])) { parse_str($route[1],$params); $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } } class ParseTemplateBehavior extends Behavior { protected $options = array( 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => true, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', ); public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { extract($_data['var'], EXTR_OVERWRITE); include C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'); }else{ $tpl = Think::instance('ThinkTemplate'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ $class = 'Template'.ucwords($engine); if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { throw_exception(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!is_file($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > filemtime($tmplCacheFile)) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > filemtime($tmplCacheFile)+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > filemtime($tmplCacheFile)) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(is_file(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } } class ContentReplaceBehavior extends Behavior { protected $options = array( 'TMPL_PARSE_STRING' => array(), ); public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__TMPL__' => APP_TMPL_PATH, '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__GROUP__' => defined('GROUP_NAME')?__GROUP__:__APP__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__URL__' => __URL__, '..\/Public' => APP_TMPL_PATH.'Public', '__PUBLIC__' => __ROOT__.'\/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } } class TokenBuildBehavior extends Behavior { protected $options = array( 'TOKEN_ON' => false, 'TOKEN_NAME' => '__hash__', 'TOKEN_TYPE' => 'md5', 'TOKEN_RESET' => true, ); public function run(&$content){ if(C('TOKEN_ON')) { if(strpos($content,'{__TOKEN__}')) { $content = str_replace('{__TOKEN__}',$this->buildToken(),$content); }elseif(preg_match('\/<\\\/form(\\s*)>\/is',$content,$match)) { $content = str_replace($match[0],$this->buildToken().$match[0],$content); } }else{ $content = str_replace('{__TOKEN__}','',$content); } } private function buildToken() { $tokenName = C('TOKEN_NAME'); $tokenType = C('TOKEN_TYPE'); if(!isset($_SESSION[$tokenName])) { $_SESSION[$tokenName] = array(); } $tokenKey = md5($_SERVER['REQUEST_URI']); if(isset($_SESSION[$tokenName][$tokenKey])) { $tokenValue = $_SESSION[$tokenName][$tokenKey]; }else{ $tokenValue = $tokenType(microtime(TRUE)); $_SESSION[$tokenName][$tokenKey] = $tokenValue; } $token = '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>'; return $token; } } class WriteHtmlCacheBehavior extends Behavior { public function run(&$content){ if(C('HTML_CACHE_ON') && defined('HTML_FILE_NAME')) { if(!is_dir(dirname(HTML_FILE_NAME))) mkdir(dirname(HTML_FILE_NAME),0755,true); if( false === file_put_contents( HTML_FILE_NAME , $content )) throw_exception(L('_CACHE_WRITE_ERROR_').':'.HTML_FILE_NAME); } } } class ShowRuntimeBehavior extends Behavior { protected $options = array( 'SHOW_RUN_TIME' => false, 'SHOW_ADV_TIME' => false, 'SHOW_DB_TIMES' => false, 'SHOW_CACHE_TIMES' => false, 'SHOW_USE_MEM' => false, 'SHOW_LOAD_FILE' => false, 'SHOW_FUN_TIMES' => false , ); public function run(&$content){ if(C('SHOW_RUN_TIME')){ if(false !== strpos($content,'{__NORUNTIME__}')) { $content = str_replace('{__NORUNTIME__}','',$content); }else{ $runtime = $this->showTime(); if(strpos($content,'{__RUNTIME__}')) $content = str_replace('{__RUNTIME__}',$runtime,$content); else $content .= $runtime; } }else{ $content = str_replace(array('{__NORUNTIME__}','{__RUNTIME__}'),'',$content); } } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); $showTime = 'Process: '.G('beginTime','viewEndTime').'s '; if(C('SHOW_ADV_TIME')) { $showTime .= '( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $showTime .= ' | DB :'.N('db_query').' queries '.N('db_write').' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $showTime .= ' | Cache :'.N('cache_read').' gets '.N('cache_write').' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $showTime .= ' | UseMem:'. number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024).' kb'; } if(C('SHOW_LOAD_FILE')) { $showTime .= ' | LoadFile:'.count(get_included_files()); } if(C('SHOW_FUN_TIMES')) { $fun = get_defined_functions(); $showTime .= ' | CallFun:'.count($fun['user']).','.count($fun['internal']); } return $showTime; } } class ShowPageTraceBehavior extends Behavior { protected $options = array( 'SHOW_PAGE_TRACE' => false, 'TRACE_PAGE_TABS' => array('BASE'=>'基本','FILE'=>'文件','INFO'=>'流程','ERR|NOTIC'=>'错误','SQL'=>'SQL','DEBUG'=>'调试'), 'PAGE_TRACE_SAVE' => false, ); public function run(&$params){ if(!IS_AJAX && C('SHOW_PAGE_TRACE')) { echo $this->showTrace(); } } private function showTrace() { $files = get_included_files(); $info = array(); foreach ($files as $key=>$file){ $info[] = $file.' ( '.number_format(filesize($file)\/1024,2).' KB )'; } $trace = array(); $base = array( '请求信息' => date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME']).' '.$_SERVER['SERVER_PROTOCOL'].' '.$_SERVER['REQUEST_METHOD'].' : '.__SELF__, '运行时间' => $this->showTime(), '吞吐率' => number_format(1\/G('beginTime','viewEndTime'),2).'req\/s', '内存开销' => MEMORY_LIMIT_ON?number_format((memory_get_usage() - $GLOBALS['_startUseMems'])\/1024,2).' kb':'不支持', '查询信息' => N('db_query').' queries '.N('db_write').' writes ', '文件加载' => count(get_included_files()), '缓存信息' => N('cache_read').' gets '.N('cache_write').' writes ', '配置加载' => count(c()), '会话信息' => 'SESSION_ID='.session_id(), ); $traceFile = CONF_PATH.'trace.php'; if(is_file($traceFile)) { $base = array_merge($base,include $traceFile); } $debug = trace(); $tabs = C('TRACE_PAGE_TABS'); foreach ($tabs as $name=>$title){ switch(strtoupper($name)) { case 'BASE': $trace[$title] = $base; break; case 'FILE': $trace[$title] = $info; break; default: $name = strtoupper($name); if(strpos($name,'|')) { $array = explode('|',$name); $result = array(); foreach($array as $name){ $result += isset($debug[$name])?$debug[$name]:array(); } $trace[$title] = $result; }else{ $trace[$title] = isset($debug[$name])?$debug[$name]:''; } } } if($save = C('PAGE_TRACE_SAVE')) { if(is_array($save)) { $tabs = C('TRACE_PAGE_TABS'); $array = array(); foreach ($save as $tab){ $array[] = $tabs[$tab]; } } $content = date('[ c ]').' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n"; foreach ($trace as $key=>$val){ if(!isset($array) || in_array($key,$array)) { $content .= '[ '.$key." ]\\r\\n"; if(is_array($val)) { foreach ($val as $k=>$v){ $content .= (!is_numeric($k)?$k.':':'').print_r($v,true)."\\r\\n"; } }else{ $content .= print_r($val,true)."\\r\\n"; } $content .= "\\r\\n"; } } error_log(str_replace('<br\/>',"\\r\\n",$content), Log::FILE,LOG_PATH.date('y_m_d').'_trace.log'); } unset($files,$info,$base); ob_start(); include C('TMPL_TRACE_FILE')?C('TMPL_TRACE_FILE'):THINK_PATH.'Tpl\/page_trace.tpl'; return ob_get_clean(); } private function showTime() { G('beginTime',$GLOBALS['_beginTime']); G('viewEndTime'); return G('beginTime','viewEndTime').'s ( Load:'.G('beginTime','loadTime').'s Init:'.G('loadTime','initTime').'s Exec:'.G('initTime','viewStartTime').'s Template:'.G('viewStartTime','viewEndTime').'s )'; } }alias_import(array ( 'Model' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Model.class.php', 'Db' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Db.class.php', 'Log' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Log.class.php', 'ThinkTemplate' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/ThinkTemplate.class.php', 'TagLib' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Template\/TagLib.class.php', 'Cache' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Cache.class.php', 'Widget' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Core\/Widget.class.php', 'TagLibCx' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Lib\/Driver\/TagLib\/TagLibCx.class.php', )); function halt($error) { $e = array(); if (APP_DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { if (C('SHOW_ERROR_MSG')) $e['message'] = is_array($error) ? $error['message'] : $error; else $e['message'] = C('ERROR_MESSAGE'); } } include C('TMPL_EXCEPTION_FILE'); exit; } function throw_exception($msg, $type='ThinkException', $code=0) { if (class_exists($type, false)) throw new $type($msg, $code); else halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '<\/pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _404($msg='',$url='') { APP_DEBUG && throw_exception($msg); if($msg && C('LOG_EXCEPTION_RECORD')) Log::write($msg); if(empty($url) && C('URL_404_REDIRECT')) { $url = C('URL_404_REDIRECT'); } if($url) { redirect($url); }else{ send_http_status(404); exit; } } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$redirect=false,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { if(false === strpos($key,'*') && 0=== strpos($url,$rule[0])) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule[0])); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); if($url) { if(0=== strpos($url,'\/')) { $route = true; $url = substr($url,1); if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } }else{ if('\/' != $depr) { $url = str_replace('\/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $var[C('VAR_ACTION')] = !empty($path)?array_pop($path):ACTION_NAME; $var[C('VAR_MODULE')] = !empty($path)?array_pop($path):MODULE_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[C('VAR_MODULE')])])) { $maps = $maps[strtolower($var[C('VAR_MODULE')])]; if($action = array_search(strtolower($var[C('VAR_ACTION')]),$maps)){ $var[C('VAR_ACTION')] = $action; } } } if($maps = C('URL_MODULE_MAP')) { if($module = array_search(strtolower($var[C('VAR_MODULE')]),$maps)){ $var[C('VAR_MODULE')] = $module; } } if(C('URL_CASE_INSENSITIVE')) { $var[C('VAR_MODULE')] = parse_name($var[C('VAR_MODULE')]); } if(!C('APP_SUB_DOMAIN_DEPLOY') && C('APP_GROUP_LIST')) { if(!empty($path)) { $group = array_pop($path); $var[C('VAR_GROUP')] = $group; }else{ if(GROUP_NAME != C('DEFAULT_GROUP')) { $var[C('VAR_GROUP')]= GROUP_NAME; } } if(C('URL_CASE_INSENSITIVE') && isset($var[C('VAR_GROUP')])) { $var[C('VAR_GROUP')] = strtolower($var[C('VAR_GROUP')]); } } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.http_build_query(array_reverse($var)); if(!empty($vars)) { $vars = urldecode(http_build_query($vars)); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'\/'.rtrim($url,$depr); }else{ $url = __APP__.'\/'.implode($depr,array_reverse($var)); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '\/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url; } if($redirect) redirect($url); else return $url; } function W($name, $data=array(), $return=false,$path='') { $class = $name . 'Widget'; $path = empty($path) ? BASE_LIB_PATH : $path; require_cache($path . 'Widget\/' . $class . '.class.php'); if (!class_exists($class)) throw_exception(L('_CLASS_NOT_EXIST_') . ':' . $class); $widget = Think::instance($class); $content = $widget->render($data); if ($return) return $content; else echo $content; } function filter($name, &$content) { $class = $name . 'Filter'; require_cache(BASE_LIB_PATH . 'Filter\/' . $class . '.class.php'); $filter = new $class(); $content = $filter->run($content); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\\n", "\\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function cache($name,$value='',$options=null){ return S($name,$value,$options); } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { return false !== strpos($name,'*')?array_map("unlink", glob($filename)):unlink($filename); } else { $dir = dirname($filename); if (!is_dir($dir)) mkdir($dir,0755,true); $_cache[$name] = $value; return file_put_contents($filename, strip_whitespace("<?php\\treturn " . var_export($value, true) . ";?>")); } } if (isset($_cache[$name])) return $_cache[$name]; if (is_file($filename)) { $value = include $filename; $_cache[$name] = $value; } else { $value = false; } return $value; } function get_instance_of($name, $method='', $args=array()) { static $_instance = array(); $identify = empty($args) ? $name . $method : $name . $method . to_guid_string($args); if (!isset($_instance[$identify])) { if (class_exists($name)) { $o = new $name(); if (method_exists($o, $method)) { if (!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); } else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_') . ':' . $name); } return $_instance[$identify]; } function to_guid_string($mix) { if (is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\\"{$value}\\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "<\/{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\\"{$key}\\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "<\/{$key}>"; } return $xml; } function session($name,$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } ini_set('session.auto_start', 0); if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $class = 'Session'. ucwords(strtolower(C('SESSION_TYPE'))); if(require_cache(EXTEND_PATH.'Driver\/Session\/'.$class.'.class.php')) { $hander = new $class(); $hander->execute(); }else { throw_exception(L('_CLASS_NOT_EXIST_').': ' . $class); } } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!is_array($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name, $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; } $name = $config['prefix'] . $name; if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file() { if(C('LOAD_EXT_FILE')) { $files = explode(',',C('LOAD_EXT_FILE')); foreach ($files as $file){ $file = COMMON_PATH.$file.'.php'; if(is_file($file)) include $file; } } if(C('LOAD_EXT_CONFIG')) { $configs = C('LOAD_EXT_CONFIG'); if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = CONF_PATH.$config.'.php'; if(is_file($file)) { is_numeric($key)?C(include $file):C($key,include $file); } } } } function get_client_ip($type = 0) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP\/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const FILE = 3; const SAPI = 4; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\\r\\n"; } } static function save($type='',$destination='',$extra='') { if(empty(self::$log)) return ; $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } $now = date(self::$format); error_log($now.' '.get_client_ip().' '.$_SERVER['REQUEST_URI']."\\r\\n".implode('',self::$log)."\\r\\n", $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='',$extra='') { $now = date(self::$format); $type = $type?$type:C('LOG_TYPE'); if(self::FILE == $type) { if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ) rename($destination,dirname($destination).'\/'.time().'-'.basename($destination)); }else{ $destination = $destination?$destination:C('LOG_DEST'); $extra = $extra?$extra:C('LOG_EXTRA'); } error_log("{$now} {$level}: {$message}\\r\\n", $type,$destination,$extra ); } } class Dispatcher { static public function dispatch() { $urlMode = C('URL_MODEL'); if(isset($_GET[C('VAR_PATHINFO')])) { $_SERVER['PATH_INFO'] = $_GET[C('VAR_PATHINFO')]; unset($_GET[C('VAR_PATHINFO')]); } if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.C('VAR_PATHINFO').'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '\/' || $url == '\\\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; }else{ $subDomain = strtolower(substr($_SERVER['HTTP_HOST'],0,strpos($_SERVER['HTTP_HOST'],'.'))); define('SUB_DOMAIN',$subDomain); if($subDomain && isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*'])){ if('www' != $subDomain && !in_array($subDomain,C('APP_SUB_DOMAIN_DENY'))) { $rule = $rules['*']; } } } if(!empty($rule)) { $array = explode('\/',$rule[0]); $module = array_pop($array); if(!empty($module)) { $_GET[C('VAR_MODULE')] = $module; $domainModule = true; } if(!empty($array)) { $_GET[C('VAR_GROUP')] = array_pop($array); $domainGroup = true; } if(isset($rule[1])) { parse_str($rule[1],$parms); $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); if(!empty($_SERVER['PATH_INFO'])) { tag('path_info'); $part = pathinfo($_SERVER['PATH_INFO']); define('__EXT__', isset($part['extension'])?strtolower($part['extension']):''); if(__EXT__){ if(C('URL_DENY_SUFFIX') && preg_match('\/\\.('.trim(C('URL_DENY_SUFFIX'),'.').')$\/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } if(C('URL_HTML_SUFFIX')) { $_SERVER['PATH_INFO'] = preg_replace('\/\\.('.trim(C('URL_HTML_SUFFIX'),'.').')$\/i', '', $_SERVER['PATH_INFO']); }else{ $_SERVER['PATH_INFO'] = preg_replace('\/.'.__EXT__.'$\/i','',$_SERVER['PATH_INFO']); } } if(!self::routerCheck()){ $paths = explode($depr,trim($_SERVER['PATH_INFO'],'\/')); if(C('VAR_URL_PARAMS')) { $_GET[C('VAR_URL_PARAMS')] = $paths; } $var = array(); if (C('APP_GROUP_LIST') && !isset($_GET[C('VAR_GROUP')])){ $var[C('VAR_GROUP')] = in_array(strtolower($paths[0]),explode(',',strtolower(C('APP_GROUP_LIST'))))? array_shift($paths) : ''; if(C('APP_GROUP_DENY') && in_array(strtolower($var[C('VAR_GROUP')]),explode(',',strtolower(C('APP_GROUP_DENY'))))) { exit; } } if(!isset($_GET[C('VAR_MODULE')])) { $var[C('VAR_MODULE')] = array_shift($paths); } $var[C('VAR_ACTION')] = array_shift($paths); preg_replace('@(\\w+)\\\/([^\\\/]+)@e', '$var[\\'\\\\1\\']=strip_tags(\\'\\\\2\\');', implode('\/',$paths)); $_GET = array_merge($var,$_GET); } define('__INFO__',$_SERVER['PATH_INFO']); }else{ define('__INFO__',''); } define('__SELF__',strip_tags($_SERVER['REQUEST_URI'])); define('__APP__',strip_tags(PHP_FILE)); if (C('APP_GROUP_LIST')) { define('GROUP_NAME', self::getGroup(C('VAR_GROUP'))); define('__GROUP__',(!empty($domainGroup) || strtolower(GROUP_NAME) == strtolower(C('DEFAULT_GROUP')) )?__APP__ : __APP__.'\/'.(C('URL_CASE_INSENSITIVE') ? strtolower(GROUP_NAME) : GROUP_NAME)); } define('BASE_LIB_PATH', (defined('GROUP_NAME') && C('APP_GROUP_MODE')==1) ? APP_PATH.C('APP_GROUP_PATH').'\/'.GROUP_NAME.'\/' : LIB_PATH); if(defined('GROUP_NAME')) { C('CACHE_PATH',CACHE_PATH.GROUP_NAME.'\/'); if(1 == C('APP_GROUP_MODE')){ $config_path = BASE_LIB_PATH.'Conf\/'; $common_path = BASE_LIB_PATH.'Common\/'; }else{ $config_path = CONF_PATH.GROUP_NAME.'\/'; $common_path = COMMON_PATH.GROUP_NAME.'\/'; } if(is_file($config_path.'config.php')) C(include $config_path.'config.php'); if(is_file($config_path.'alias.php')) alias_import(include $config_path.'alias.php'); if(is_file($config_path.'tags.php')) C('tags', include $config_path.'tags.php'); if(is_file($common_path.'function.php')) include $common_path.'function.php'; }else{ C('CACHE_PATH',CACHE_PATH); } define('MODULE_NAME',self::getModule(C('VAR_MODULE'))); define('ACTION_NAME',self::getAction(C('VAR_ACTION'))); $moduleName = defined('MODULE_ALIAS')?MODULE_ALIAS:MODULE_NAME; if(defined('GROUP_NAME')) { define('__URL__',!empty($domainModule)?__GROUP__.$depr : __GROUP__.$depr.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName ) ); }else{ define('__URL__',!empty($domainModule)?__APP__.'\/' : __APP__.'\/'.( C('URL_CASE_INSENSITIVE') ? strtolower($moduleName) : $moduleName) ); } define('__ACTION__',__URL__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static public function routerCheck() { $return = false; tag('route_check',$return); return $return; } static private function getModule($var) { $module = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return $maps[MODULE_ALIAS]; }elseif(array_search(strtolower($module),$maps)){ return ''; } } if(C('URL_CASE_INSENSITIVE')) { $module = ucfirst(parse_name($module,1)); } return strip_tags($module); } static private function getAction($var) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(MODULE_NAME)])) { $maps = $maps[strtolower(MODULE_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); return $maps[ACTION_ALIAS]; }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags(C('URL_CASE_INSENSITIVE')?strtolower($action):$action); } static private function getGroup($var) { $group = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_GROUP')); unset($_GET[$var]); return strip_tags(C('URL_CASE_INSENSITIVE') ?ucfirst(strtolower($group)):$group); } } class App { static public function init() { if(C('OUTPUT_ENCODE')){ $zlib = ini_get('zlib.output_compression'); if(empty($zlib)) ob_start('ob_gzhandler'); } date_default_timezone_set(C('DEFAULT_TIMEZONE')); load_ext_file(); Dispatcher::dispatch(); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); tag('url_dispatch'); if(C('VAR_FILTERS')) { $filters = explode(',',C('VAR_FILTERS')); foreach($filters as $filter){ array_walk_recursive($_POST,$filter); array_walk_recursive($_GET,$filter); } } C('LOG_PATH',realpath(LOG_PATH).'\/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('\/^[A-Za-z](\\w)*$\/',MODULE_NAME)){ $module = false; }else{ $group = defined('GROUP_NAME') && C('APP_GROUP_MODE')==0 ? GROUP_NAME.'\/' : ''; $module = A($group.MODULE_NAME); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == MODULE_NAME) { header("Content-type:image\/png"); exit(base64_decode(App::logo())); } if(function_exists('__hack_module')) { $module = __hack_module(); if(!is_object($module)) { return ; } }else{ $module = A($group.'Empty'); if(!$module){ _404(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } } } $action = C('ACTION_NAME')?C('ACTION_NAME'):ACTION_NAME; $action .= C('ACTION_SUFFIX'); try{ if(!preg_match('\/^[A-Za-z](\\w)*$\/',$action)){ throw new ReflectionException(); } $method = new ReflectionMethod($module, $action); if($method->isPublic()) { $class = new ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if(C('URL_PARAMS_BIND') && $method->getNumberOfParameters()>0){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); foreach ($params as $param){ $name = $param->getName(); if(isset($vars[$name])) { $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ throw_exception(L('_PARAM_ERROR_').':'.$name); } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new ReflectionException(); } } catch (ReflectionException $e) { $method = new ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { tag('app_init'); App::init(); tag('app_begin'); session(C('SESSION_OPTIONS')); G('initTime'); App::exec(); tag('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw\/eHBhY2tldCBiZWdpbj0i77u\/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw\/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk\/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7\/v\/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+\/OEQ4+obQn5D+4Ubb22+YOGsWi\/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9\/W4H3iNSQqIe09O196dLKX7d1O39OViP\/wthtkND62if\/wj\/DbMpph8BY\/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy\/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z\/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB\/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc\/AOuXiwH07VCS3w5+UQMAuF\/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5\/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8\/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR\/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5\/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v\/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ\/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh\/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE\/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC\/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm\/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr\/XKm0ZofKSI2Q\/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0\/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W\/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc\/i3jJSAwhgfFlp20laMLOku\/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi\/MubUA\/mCT4Fhf038PC8XplhWnCmnK\/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2\/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9\/y5i\/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0\/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk\/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p\/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru\/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl\/tFILYwGPjXWO3zOfSq\/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t\/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX\/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay\/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV\/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1\/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v\/8jG\/fZX\/IW5MKPKtjSYlt0ellxh+\/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL\/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5\/1H3gaNmMpn8Fz0GpYFp6Zw615H\/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc\/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn\/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C\/P\/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq\/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs\/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk\/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS\/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh\/eMDzHEzGYu0Lg8gJ7oS\/tFCwoic44fyUtix0n\/46vP4bf+\/\/BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } } abstract class Action { protected $view = null; private $name = ''; protected $config = array(); public function __construct() { tag('action_begin',$this->config); $this->view = Think::instance('View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function getActionName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-6); } return $this->name; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if('xmlhttprequest' == strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])) return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) return true; return false; } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); if(!is_dir(dirname($htmlfile))) mkdir(dirname($htmlfile),0755,true); if(false === file_put_contents($htmlfile,$content)) throw_exception(L('_CACHE_WRITE_ERROR_').':'.$htmlfile); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }elseif(function_exists('__hack_action')) { __hack_action(); }else{ _404(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ switch(strtolower($method)) { case 'ispost' : case 'isget' : case 'ishead' : case 'isdelete' : case 'isput' : return strtolower($_SERVER['REQUEST_METHOD']) == strtolower(substr($method,2)); case '_get' : $input =& $_GET;break; case '_post' : $input =& $_POST;break; case '_put' : parse_str(file_get_contents('php:\/\/input'), $input);break; case '_param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php:\/\/input'), $input); break; default: $input = $_GET; } if(C('VAR_URL_PARAMS') && isset($_GET[C('VAR_URL_PARAMS')])){ $input = array_merge($input,$_GET[C('VAR_URL_PARAMS')]); } break; case '_request' : $input =& $_REQUEST; break; case '_session' : $input =& $_SESSION; break; case '_cookie' : $input =& $_COOKIE; break; case '_server' : $input =& $_SERVER; break; case '_globals' : $input =& $GLOBALS; break; default: throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } if(!isset($args[0])) { $data = $input; }elseif(isset($input[$args[0]])) { $data = $input[$args[0]]; $filters = isset($args[1])?$args[1]:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map($filter,$data):$filter($data); } } } }else{ $data = isset($args[2])?$args[2]:NULL; } Log::record('建议使用I方法替代'.$method,Log::NOTICE); return $data; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(func_num_args()>2) { $args = func_get_args(); array_shift($args); $info = array(); $info['data'] = $data; $info['info'] = array_shift($args); $info['status'] = array_shift($args); $data = $info; $type = $args?array_shift($args):''; } if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application\/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text\/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application\/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text\/html; charset=utf-8'); exit($data); default : tag('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { tag('action_end'); } } class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); tag('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); tag('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); tag('view_parse',$params); } $content = ob_get_clean(); tag('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; $theme = C('DEFAULT_THEME'); if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } return $template; } $template = str_replace(':', '\/', $template); $theme = $this->getTemplateTheme(); $group = defined('GROUP_NAME')?GROUP_NAME.'\/':''; if(defined('GROUP_NAME') && strpos($template,'@')){ list($group,$template) = explode('@',$template); $group .= '\/'; } if(1==C('APP_GROUP_MODE')){ define('THEME_PATH', dirname(BASE_LIB_PATH).'\/'.$group.basename(TMPL_PATH).'\/'.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').C('APP_GROUP_PATH').'\/'.$group.basename(TMPL_PATH).'\/'.$theme); }else{ define('THEME_PATH', TMPL_PATH.$group.$theme); define('APP_TMPL_PATH',__ROOT__.'\/'.APP_NAME.(APP_NAME?'\/':'').basename(TMPL_PATH).'\/'.$group.$theme); } if('' == $template) { $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME; }elseif(false === strpos($template, '\/')){ $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template; } return THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } define('THEME_NAME', $theme); return $theme?$theme . '\/':''; } } L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_ACTION_NOT_EXIST_' => '控制器不存在或者没有定义', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '您所请求的方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', ));C(array ( 'app_status' => 'debug', 'app_file_case' => false, 'app_autoload_path' => '', 'app_tags_on' => true, 'app_sub_domain_deploy' => false, 'app_sub_domain_rules' => array ( ), 'app_sub_domain_deny' => array ( ), 'app_group_list' => '', 'app_group_mode' => 0, 'app_group_path' => 'Modules', 'action_suffix' => '', 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '\/', 'cookie_prefix' => '', 'default_m_layer' => 'Model', 'default_c_layer' => 'Action', 'default_v_layer' => 'Tpl', 'default_app' => '@', 'default_lang' => 'zh-cn', 'default_theme' => '', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_jsonp_handler' => 'jsonpReturn', 'default_filter' => 'htmlspecialchars', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => '', 'db_user' => 'root', 'db_pwd' => '', 'db_port' => '', 'db_prefix' => 'think_', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'db_master_num' => 1, 'db_slave_no' => '', 'db_sql_build_cache' => false, 'db_sql_build_queue' => 'file', 'db_sql_build_length' => 20, 'db_sql_log' => false, 'data_cache_time' => 0, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_prefix' => '', 'data_cache_type' => 'File', 'data_cache_path' => '.\/Runtime\/Temp\/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '页面错误！请稍后再试～', 'error_page' => '', 'show_error_msg' => false, 'trace_exception' => false, 'log_record' => false, 'log_type' => 3, 'log_dest' => '', 'log_extra' => '', 'log_level' => 'EMERG,ALERT,CRIT,ERR', 'log_file_size' => 2097152, 'log_exception_record' => false, 'session_auto_start' => true, 'session_options' => array ( ), 'session_type' => '', 'session_prefix' => '', 'tmpl_content_type' => 'text\/html', 'tmpl_action_error' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_action_success' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/dispatch_jump.tpl', 'tmpl_exception_file' => '\/Users\/erylee\/WebServer\/ThinkPHP\/Tpl\/think_exception.tpl', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_file_depr' => '\/', 'url_case_insensitive' => false, 'url_model' => 1, 'url_pathinfo_depr' => '\/', 'url_pathinfo_fetch' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'url_html_suffix' => 'html', 'url_deny_suffix' => 'ico|png|gif|jpg', 'url_params_bind' => true, 'url_404_redirect' => '', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_ajax_submit' => 'ajax', 'var_jsonp_handler' => 'callback', 'var_pathinfo' => 's', 'var_url_params' => '_URL_', 'var_template' => 't', 'var_filters' => 'filter_exp', 'output_encode' => false, 'http_cache_control' => 'private', 'extends' => array ( 'app_init' => array ( ), 'app_begin' => array ( 0 => 'ReadHtmlCache', ), 'route_check' => array ( 0 => 'CheckRoute', ), 'app_end' => array ( ), 'path_info' => array ( ), 'action_begin' => array ( ), 'action_end' => array ( ), 'view_begin' => array ( ), 'view_parse' => array ( 0 => 'ParseTemplate', ), 'view_filter' => array ( 0 => 'ContentReplace', 1 => 'TokenBuild', 2 => 'WriteHtmlCache', 3 => 'ShowRuntime', ), 'view_end' => array ( 0 => 'ShowPageTrace', ), ), ));G('loadTime');Think::Start();/;"	v
template	ThinkPHP/Common/common.php	/^            $template   =   APP_NAME.':\/\/'.str_replace(':', '\/',$template);$/;"	v
template	ThinkPHP/Lib/Core/View.class.php	/^            $template = MODULE_NAME . C('TMPL_FILE_DEPR') . $template;$/;"	v
template	ThinkPHP/Lib/Core/View.class.php	/^            $template = MODULE_NAME . C('TMPL_FILE_DEPR') . ACTION_NAME;$/;"	v
template	ThinkPHP/Lib/Core/View.class.php	/^        $template = str_replace(':', '\/', $template);$/;"	v
template	ThinkPHP/Lib/Core/Widget.class.php	/^        $template   =  strtolower($this->template?$this->template:(C('TMPL_ENGINE_TYPE')?C('TMPL_ENGINE_TYPE'):'php'));$/;"	v
template	ThinkPHP/Lib/Core/Widget.class.php	/^    protected $template =  '';$/;"	v
templateCacheFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $templateCacheFile  =   $this->loadTemplate($templateFile,$prefix);$/;"	v
templateContentReplace	ThinkPHP/Lib/Behavior/ContentReplaceBehavior.class.php	/^    protected function templateContentReplace($content) {$/;"	f
templateFile	ThinkPHP/Lib/Core/View.class.php	/^            $templateFile   =   $this->parseTemplate($templateFile);$/;"	v
templateFile	ThinkPHP/Lib/Core/Widget.class.php	/^            $templateFile = BASE_LIB_PATH.'Widget\/'.$name.'\/'.$filename.C('TMPL_TEMPLATE_SUFFIX');$/;"	v
templateFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $this->templateFile    =  $tmplTemplateFile;$/;"	v
templateFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^    protected   $templateFile    =   '';$/;"	v
templateName	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^				$templateName = str_replace(':', '\/', $templateName);$/;"	v
templateName	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $templateName  =  $basePath.$module.C('TMPL_FILE_DEPR').$action.$this->config['template_suffix'];$/;"	v
templateName	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $templateName = $this->get(substr($templateName,1));$/;"	v
template_deny_funs	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $template_deny_funs = explode(',',C('TMPL_DENY_FUNC_LIST'));$/;"	v
theme	ThinkPHP/Lib/Core/Action.class.php	/^    protected function theme($theme){$/;"	f
theme	ThinkPHP/Lib/Core/View.class.php	/^                    $theme =  C('DEFAULT_THEME');$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^                    $theme = $_GET[$t];$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^                    $theme = cookie('think_template');$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^            $theme  =   C('DEFAULT_THEME');$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^            $theme =  C('DEFAULT_THEME');$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^            $theme = $this->theme;$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^        $theme = $this->getTemplateTheme();$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^        $this->theme = $theme;$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^    protected $theme    =   '';$/;"	v
theme	ThinkPHP/Lib/Core/View.class.php	/^    public function theme($theme){$/;"	f
throw_exception	ThinkPHP/Common/functions.php	/^function throw_exception($msg, $type='ThinkException', $code=0) {$/;"	f
time	ThinkPHP/Common/functions.php	/^function redirect($url, $time=0, $msg='') {$/;"	v
tmplCacheFile	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^        $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX');$/;"	v
tmplCacheFile	ThinkPHP/Lib/Core/Widget.class.php	/^        $tmplCacheFile = C('CACHE_PATH').md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX');$/;"	v
tmplCacheFile	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplCacheFile = $this->config['cache_path'].$prefix.md5($tmplTemplateFile).$this->config['cache_suffix'];$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $tmplContent = str_replace($this->config['layout_item'],$tmplContent,file_get_contents($layoutFile));$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $tmplContent = str_replace('{__NOLAYOUT__}','',$tmplContent);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tmplContent    = preg_replace($find, $replace, $tmplContent);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tmplContent =  $tmplTemplateFile;$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $tmplContent =  file_get_contents($tmplTemplateFile);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplContent =  $this->compiler($tmplContent);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplContent =  $this->parse($tmplContent);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplContent =  '<?php if (!defined(\\'THINK_PATH\\')) exit();?>'.$tmplContent;$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplContent =  preg_replace('\/<!--###literal(\\d+)###-->\/eis',"\\$this->restoreLiteral('\\\\1')",$tmplContent);$/;"	v
tmplContent	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $tmplContent = str_replace('?><?php','',$tmplContent);$/;"	v
to_guid_string	ThinkPHP/Common/functions.php	/^function to_guid_string($mix) {$/;"	f
token	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^        $token      =  '<input type="hidden" name="'.$tokenName.'" value="'.$tokenKey.'_'.$tokenValue.'" \/>';$/;"	v
tokenKey	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^        $tokenKey   =  md5($_SERVER['REQUEST_URI']);$/;"	v
tokenName	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^        $tokenName  = C('TOKEN_NAME');$/;"	v
tokenType	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^        $tokenType  = C('TOKEN_TYPE');$/;"	v
tokenValue	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^            $tokenValue = $_SESSION[$tokenName][$tokenKey];$/;"	v
tokenValue	ThinkPHP/Lib/Behavior/TokenBuildBehavior.class.php	/^            $tokenValue = $tokenType(microtime(TRUE));$/;"	v
tokens	ThinkPHP/Common/common.php	/^    $tokens     = token_get_all($content);$/;"	v
tpl	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^                $tpl   =  new $class;$/;"	v
tpl	ThinkPHP/Lib/Behavior/ParseTemplateBehavior.class.php	/^                $tpl = Think::instance('ThinkTemplate');$/;"	v
tpl	ThinkPHP/Lib/Core/Widget.class.php	/^                $tpl = Think::instance('ThinkTemplate');$/;"	v
tpl	ThinkPHP/Lib/Core/Widget.class.php	/^            $tpl   =  new $class;$/;"	v
tpl	ThinkPHP/Lib/Template/TagLib.class.php	/^        $this->tpl     = Think::instance('ThinkTemplate');$/;"	v
tpl	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $tpl;$/;"	v
trace	ThinkPHP/Common/common.php	/^function trace($value='[think]',$label='',$level='DEBUG',$record=false) {$/;"	f
trace	ThinkPHP/Common/functions.php	/^            $trace          = debug_backtrace();$/;"	v
trace	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $trace  =   array();$/;"	v
trace	ThinkPHP/Lib/Core/Think.class.php	/^        $trace  =   $e->getTrace();$/;"	v
traceFile	ThinkPHP/Lib/Behavior/ShowPageTraceBehavior.class.php	/^        $traceFile  =   CONF_PATH.'trace.php';$/;"	v
transTimes	ThinkPHP/Lib/Core/Db.class.php	/^    protected $transTimes = 0;$/;"	v
transTimes	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $this->transTimes = 0;$/;"	v
transTimes	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $this->transTimes = 0;$/;"	v
trueTableName	ThinkPHP/Lib/Core/Model.class.php	/^            $this->trueTableName    =   strtolower($tableName);$/;"	v
trueTableName	ThinkPHP/Lib/Core/Model.class.php	/^    protected $trueTableName    =   '';$/;"	v
type	ThinkPHP/Common/common.php	/^function parse_name($name, $type=0) {$/;"	v
type	ThinkPHP/Common/functions.php	/^	$type       =  $type ? 1 : 0;$/;"	v
type	ThinkPHP/Common/functions.php	/^        $type       =   isset($name['type'])?$name['type']:'';$/;"	v
type	ThinkPHP/Common/functions.php	/^        $type       =   isset($options['type'])?$options['type']:'';$/;"	v
type	ThinkPHP/Common/functions.php	/^function throw_exception($msg, $type='ThinkException', $code=0) {$/;"	v
type	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $type = substr($val,-1);$/;"	v
type	ThinkPHP/Lib/Core/Action.class.php	/^            $type           =   $args?array_shift($args):'';$/;"	v
type	ThinkPHP/Lib/Core/Action.class.php	/^        if(empty($type)) $type  =   C('DEFAULT_AJAX_RETURN');$/;"	v
type	ThinkPHP/Lib/Core/Cache.class.php	/^        $type  = strtolower(trim($type));$/;"	v
type	ThinkPHP/Lib/Core/Cache.class.php	/^        if(empty($type))  $type = C('DATA_CACHE_TYPE');$/;"	v
type	ThinkPHP/Lib/Core/Log.class.php	/^        $type = $type?$type:C('LOG_TYPE');$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^                if( $type == $auto[2] || $auto[2] == self::MODEL_BOTH) {$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^                return $type == 'between' ? $value>=$min && $value<=$max : $value<$min || $value>$max;$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^                return $type == 'equal' ? $value == $rule : $value != $rule;$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^                return $type == 'in' ? in_array($value ,$range) : !in_array($value ,$range);$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^        $type   =   strtolower(trim($type));$/;"	v
type	ThinkPHP/Lib/Core/Model.class.php	/^        $type = $type?$type:(!empty($data[$this->getPk()])?self::MODEL_UPDATE:self::MODEL_INSERT);$/;"	v
type	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                    $type = $reset = strtolower(substr(strrchr($val, '.'),1));$/;"	v
type	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $type       =   $type?$type:(!empty($tag['type'])?strtolower($tag['type']):'js');$/;"	v
type	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $type  = $type?$type:(!empty($tag['type'])?strtolower($tag['type']):null);$/;"	v
type	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $type       =   $this->parseCondition(' '.$type.' ');$/;"	v
type	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $type       =   isset($tag['type'])?$tag['type']:$type;$/;"	v
types	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            $types   =  explode(',',C('URL_PATHINFO_FETCH'));$/;"	v
union	ThinkPHP/Lib/Core/Model.class.php	/^            $union   =  get_object_vars($union);$/;"	v
union	ThinkPHP/Lib/Core/Model.class.php	/^    public function union($union,$all=false) {$/;"	f
update	ThinkPHP/Lib/Core/Db.class.php	/^    public function update($data,$options) {$/;"	f
url	ThinkPHP/Common/functions.php	/^                    $url    =  substr_replace($url,'',0,strlen($rule[0]));$/;"	v
url	ThinkPHP/Common/functions.php	/^                $url    =   str_replace('\/',$depr,$url);$/;"	v
url	ThinkPHP/Common/functions.php	/^            $url        =   substr($url,1);$/;"	v
url	ThinkPHP/Common/functions.php	/^            $url        =   trim($url,$depr);$/;"	v
url	ThinkPHP/Common/functions.php	/^            $url    =   __APP__.'\/'.implode($depr,array_reverse($var));$/;"	v
url	ThinkPHP/Common/functions.php	/^            $url    =   __APP__.'\/'.rtrim($url,$depr);$/;"	v
url	ThinkPHP/Common/functions.php	/^        $url        =   __APP__.'?'.http_build_query(array_reverse($var));$/;"	v
url	ThinkPHP/Common/functions.php	/^        $url    =   C('URL_404_REDIRECT');$/;"	v
url	ThinkPHP/Common/functions.php	/^        $url   =  (is_ssl()?'https:\/\/':'http:\/\/').$domain.$url;$/;"	v
url	ThinkPHP/Common/functions.php	/^    $url        = str_replace(array("\\n", "\\r"), '', $url);$/;"	v
url	ThinkPHP/Common/functions.php	/^    $url    =  !empty($info['path'])?$info['path']:ACTION_NAME;$/;"	v
url	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                $url  =  preg_replace('\/:(\\d+)\/e','$values[\\\\1-1]',$url);$/;"	v
url	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $url   =  is_array($route)?$route[0]:$route;$/;"	v
url	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $url   =  preg_replace('\/:(\\d+)\/e','$matches[\\\\1]',$url);$/;"	v
url	ThinkPHP/Lib/Core/Action.class.php	/^        $url    =   U($url,$params);$/;"	v
url	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $url    =   '';$/;"	v
url	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            $url    =   dirname(_PHP_FILE_);$/;"	v
url	ThinkPHP/Lib/Core/Dispatcher.class.php	/^            if($url == '\/' || $url == '\\\\')$/;"	v
urlMode	ThinkPHP/Lib/Core/Dispatcher.class.php	/^        $urlMode  =  C('URL_MODEL');$/;"	v
v	ThinkPHP/Lib/Core/Db.class.php	/^                            $v =  $multi?$val[$m]:$val;$/;"	v
val	ThinkPHP/Common/common.php	/^            $val = ($val) ? 'true' : 'false';$/;"	v
val	ThinkPHP/Lib/Core/Db.class.php	/^                $val  =  '%'.$val.'%';$/;"	v
val	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^                $val   =  $this->parseValue($val);$/;"	v
val	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^                $val   =  $this->parseValue($val);$/;"	v
valid	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $valid    = false;$/;"	v
validate	ThinkPHP/Lib/Core/Model.class.php	/^        $validate = array($/;"	v
value	ThinkPHP/Common/common.php	/^function C($name=null, $value=null) {$/;"	v
value	ThinkPHP/Common/common.php	/^function L($name=null, $value=null) {$/;"	v
value	ThinkPHP/Common/functions.php	/^                $value  =   substr($value,6);$/;"	v
value	ThinkPHP/Common/functions.php	/^                $value  = 'think:'.json_encode(array_map('urlencode',$value));$/;"	v
value	ThinkPHP/Common/functions.php	/^            $value =    $_COOKIE[$name];$/;"	v
value	ThinkPHP/Common/functions.php	/^        $value          =   false;$/;"	v
value	ThinkPHP/Common/functions.php	/^        $value          =   include $filename;$/;"	v
value	ThinkPHP/Common/functions.php	/^function F($name, $value='', $path=DATA_PATH) {$/;"	v
value	ThinkPHP/Common/functions.php	/^function cookie($name, $value='', $option=null) {$/;"	v
value	ThinkPHP/Lib/Core/Cache.class.php	/^            $value   =  array();$/;"	v
value	ThinkPHP/Lib/Core/Cache.class.php	/^        $value  =  $fun[0]($queue_name);$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value  =  S($key);$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value  =  S($key,'',$cache);$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value =  $this->escapeString($value[1]);$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value =  $value ? '1' : '0';$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value =  '\\''.$this->escapeString($value).'\\'';$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value =  'null';$/;"	v
value	ThinkPHP/Lib/Core/Db.class.php	/^            $value =  array_map(array($this, 'parseValue'),$value);$/;"	v
value	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $value   =  $this->parseValue($val);$/;"	v
value	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^            $value   =  array();$/;"	v
value	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $value   =  $this->parseValue($val);$/;"	v
value	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^            $value   =  array();$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                $value  =   $this->tpl->parseVarFunction($value,$varArray);$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                $value = $this->autoBuildVar(substr($value,1));$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^                $value = substr($value,1);$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value	    =	array_shift($varArray);$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value	=	'case "'.$value.'": ';$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value      =   $this->autoBuildVar(substr($value,1));$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value      =   '';$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value      =   'case '.$value.': ';$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value  =   $this->autoBuildVar(substr($tag['value'],1));$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value  =   $this->autoBuildVar(substr($value,1));$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value  =   '"'.$value.'"';$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value  =   '\\''.$tag['value']. '\\'';$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value  =  $this->autoBuildVar(substr($value,1));$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $value = trim($value);$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $value      =   $tag['value'];$/;"	v
value	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $value  = $tag['value'];$/;"	v
values	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                $values  =  array_values($matches);$/;"	v
values	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $values  =  array_values($matches);$/;"	v
values	ThinkPHP/Lib/Core/Db.class.php	/^        $values  =  $fields    = array();$/;"	v
values	ThinkPHP/Lib/Driver/Db/DbMysql.class.php	/^        $values  =  array();$/;"	v
values	ThinkPHP/Lib/Driver/Db/DbMysqli.class.php	/^        $values  =  array();$/;"	v
values	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $values     =   explode('|',$value);$/;"	v
var	ThinkPHP/Common/functions.php	/^            $var        =   array();$/;"	v
var	ThinkPHP/Common/functions.php	/^            foreach ($vars as $var => $val){$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $var  =  substr($item,1);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $var  =  substr($item,1,$pos-1);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                    $var  =  substr($item,1,-2);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^                $var   =   array_merge($var,$params);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $var   =   array_merge($matches,$var);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^            $var  =  $this->parseUrl($url);$/;"	v
var	ThinkPHP/Lib/Behavior/CheckRouteBehavior.class.php	/^        $var  =  array();$/;"	v
var	ThinkPHP/Lib/Core/Dispatcher.class.php	/^                $var  =  array();$/;"	v
var	ThinkPHP/Lib/Template/TagLib.class.php	/^            $var  =  array_shift($vars);$/;"	v
var	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $var  =  array_shift($vars);$/;"	v
var	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $var  =  str_replace(':','->',$var);$/;"	v
var	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $var  = $vars[0];$/;"	v
var	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $var = $match[1];$/;"	v
var	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $var = array_shift($varArray);$/;"	v
varArray	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $varArray   =   explode('|',$value);$/;"	v
varArray	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^            $varArray  =    explode('|',$tag['value']);$/;"	v
varArray	ThinkPHP/Lib/Driver/TagLib/TagLibCx.class.php	/^        $varArray   =   explode('|',$name);$/;"	v
varArray	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^            $varArray = explode('|',$varStr);$/;"	v
varExists	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $varExists  =   true;$/;"	v
varStr	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $varStr     =   trim($varStr);$/;"	v
vars	ThinkPHP/Common/functions.php	/^            $vars   =   urldecode(http_build_query($vars));$/;"	v
vars	ThinkPHP/Common/functions.php	/^        $vars = array();$/;"	v
vars	ThinkPHP/Common/functions.php	/^        $vars = array_merge($params,$vars);$/;"	v
vars	ThinkPHP/Lib/Core/App.class.php	/^                            $vars    =  array_merge($_GET,$_POST);$/;"	v
vars	ThinkPHP/Lib/Core/App.class.php	/^                            $vars  =  $_GET;$/;"	v
vars	ThinkPHP/Lib/Template/TagLib.class.php	/^            $vars = explode('.',$name);$/;"	v
vars	ThinkPHP/Lib/Template/TagLib.class.php	/^        $vars       = explode('.',$varStr);$/;"	v
vars	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $vars = explode('.',$var);$/;"	v
vars	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^                $vars = explode(':',$var);$/;"	v
vars	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $vars = explode('.',$varStr);$/;"	v
vendor	ThinkPHP/Common/common.php	/^function vendor($class, $baseUrl = '', $ext='.php') {$/;"	f
version	ThinkPHP/Lib/Core/Model.class.php	/^                    $version    =   C('DB_FIELD_VERSION');$/;"	v
view	ThinkPHP/Lib/Core/Action.class.php	/^        $this->view     = Think::instance('View');           $/;"	v
view	ThinkPHP/Lib/Core/Action.class.php	/^    protected $view     =  null;$/;"	v
where	ThinkPHP/Lib/Core/Model.class.php	/^            $where  =   $map;$/;"	v
where	ThinkPHP/Lib/Core/Model.class.php	/^            $where  =   get_object_vars($where);$/;"	v
where	ThinkPHP/Lib/Core/Model.class.php	/^            $where =   vsprintf($where,$parse);$/;"	v
where	ThinkPHP/Lib/Core/Model.class.php	/^    public function where($where,$parse=null){$/;"	f
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^                $whereStr   =   is_string($val)? $val : substr($this->parseWhere($val),6);$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^                $whereStr   = implode($op,$array);$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^                $whereStr = $val;$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^                $whereStr = substr($whereStr,0,-4);$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^            $whereStr = $where;$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^            $whereStr = substr($whereStr,0,-strlen($operate));$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^        $whereStr   = '';$/;"	v
whereStr	ThinkPHP/Lib/Core/Db.class.php	/^        $whereStr = '';$/;"	v
widget	ThinkPHP/Common/functions.php	/^    $widget     =   Think::instance($class);$/;"	v
write	ThinkPHP/Lib/Core/Log.class.php	/^    static function write($message,$level=self::ERR,$type='',$destination='',$extra='') {$/;"	f
xml	ThinkPHP/Common/functions.php	/^    $xml    = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>";$/;"	v
xml	ThinkPHP/Common/functions.php	/^    $xml = $attr = '';$/;"	v
xml	ThinkPHP/Lib/Template/TagLib.class.php	/^        $xml    =   '<tpl><tag '.$attr.' \/><\/tpl>';$/;"	v
xml	ThinkPHP/Lib/Template/TagLib.class.php	/^        $xml    =   (array)($xml->tag->attributes());$/;"	v
xml	ThinkPHP/Lib/Template/TagLib.class.php	/^        $xml    =   simplexml_load_string($xml);$/;"	v
xml	ThinkPHP/Lib/Template/TagLib.class.php	/^    protected $xml      = '';$/;"	v
xml	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $xml        =   '<tpl><tag '.$attrs.' \/><\/tpl>';$/;"	v
xml	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $xml        =   (array)($xml->tag->attributes());$/;"	v
xml	ThinkPHP/Lib/Template/ThinkTemplate.class.php	/^        $xml        =   simplexml_load_string($xml);$/;"	v
xml_encode	ThinkPHP/Common/functions.php	/^function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') {$/;"	f
zlib	ThinkPHP/Lib/Core/App.class.php	/^            $zlib = ini_get('zlib.output_compression');$/;"	v
zlib	ThinkPHP/Lib/Core/Think.class.php	/^                $zlib = ini_get('zlib.output_compression');$/;"	v
zone	ThinkPHP/Lib/Core/Db.class.php	/^                        $zone      =   implode(',',$this->parseValue($val[1]));$/;"	v
